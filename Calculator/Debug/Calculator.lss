
Calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004192  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000156  00800060  00004192  00004226  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000040  008001b6  008001b6  0000437c  2**0
                  ALLOC
  3 .stab         00002b98  00000000  00000000  0000437c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e56  00000000  00000000  00006f14  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000200  00000000  00000000  00007d6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000250  00000000  00000000  00007f6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002b10  00000000  00000000  000081ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001782  00000000  00000000  0000acca  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000014b1  00000000  00000000  0000c44c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000220  00000000  00000000  0000d900  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000317  00000000  00000000  0000db20  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a92  00000000  00000000  0000de37  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000e8c9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e9       	ldi	r30, 0x92	; 146
      68:	f1 e4       	ldi	r31, 0x41	; 65
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 3b       	cpi	r26, 0xB6	; 182
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 eb       	ldi	r26, 0xB6	; 182
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 3f       	cpi	r26, 0xF6	; 246
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 1b 1f 	call	0x3e36	; 0x3e36 <main>
      8a:	0c 94 c7 20 	jmp	0x418e	; 0x418e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 55 04 	call	0x8aa	; 0x8aa <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 13 05 	call	0xa26	; 0xa26 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 13 05 	call	0xa26	; 0xa26 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 90 20 	jmp	0x4120	; 0x4120 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ad e6       	ldi	r26, 0x6D	; 109
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ac 20 	jmp	0x4158	; 0x4158 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 9c 20 	jmp	0x4138	; 0x4138 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 04 07 	call	0xe08	; 0xe08 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 04 07 	call	0xe08	; 0xe08 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 2f 06 	call	0xc5e	; 0xc5e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 b8 20 	jmp	0x4170	; 0x4170 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 9c 20 	jmp	0x4138	; 0x4138 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 04 07 	call	0xe08	; 0xe08 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 04 07 	call	0xe08	; 0xe08 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 2f 06 	call	0xc5e	; 0xc5e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 b8 20 	jmp	0x4170	; 0x4170 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 90 20 	jmp	0x4120	; 0x4120 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 04 07 	call	0xe08	; 0xe08 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 04 07 	call	0xe08	; 0xe08 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8d e6       	ldi	r24, 0x6D	; 109
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 2f 06 	call	0xc5e	; 0xc5e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ac 20 	jmp	0x4158	; 0x4158 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 98 20 	jmp	0x4130	; 0x4130 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 04 07 	call	0xe08	; 0xe08 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 04 07 	call	0xe08	; 0xe08 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6d e6       	ldi	r22, 0x6D	; 109
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 2f 06 	call	0xc5e	; 0xc5e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 b4 20 	jmp	0x4168	; 0x4168 <__epilogue_restores__+0x10>

0000078a <__eqsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 9c 20 	jmp	0x4138	; 0x4138 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 04 07 	call	0xe08	; 0xe08 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 04 07 	call	0xe08	; 0xe08 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__eqsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__eqsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 7c 07 	call	0xef8	; 0xef8 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__eqsf2+0x58>
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 b8 20 	jmp	0x4170	; 0x4170 <__epilogue_restores__+0x18>

000007ea <__nesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 9c 20 	jmp	0x4138	; 0x4138 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 04 07 	call	0xe08	; 0xe08 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 04 07 	call	0xe08	; 0xe08 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__nesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__nesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 7c 07 	call	0xef8	; 0xef8 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__nesf2+0x58>
     840:	81 e0       	ldi	r24, 0x01	; 1
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 b8 20 	jmp	0x4170	; 0x4170 <__epilogue_restores__+0x18>

0000084a <__gtsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 9c 20 	jmp	0x4138	; 0x4138 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 04 07 	call	0xe08	; 0xe08 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 04 07 	call	0xe08	; 0xe08 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 7c 07 	call	0xef8	; 0xef8 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	8f ef       	ldi	r24, 0xFF	; 255
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 b8 20 	jmp	0x4170	; 0x4170 <__epilogue_restores__+0x18>

000008aa <__gesf2>:
     8aa:	a8 e1       	ldi	r26, 0x18	; 24
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 9c 20 	jmp	0x4138	; 0x4138 <__prologue_saves__+0x18>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	2d 83       	std	Y+5, r18	; 0x05
     8c0:	3e 83       	std	Y+6, r19	; 0x06
     8c2:	4f 83       	std	Y+7, r20	; 0x07
     8c4:	58 87       	std	Y+8, r21	; 0x08
     8c6:	89 e0       	ldi	r24, 0x09	; 9
     8c8:	e8 2e       	mov	r14, r24
     8ca:	f1 2c       	mov	r15, r1
     8cc:	ec 0e       	add	r14, r28
     8ce:	fd 1e       	adc	r15, r29
     8d0:	ce 01       	movw	r24, r28
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	b7 01       	movw	r22, r14
     8d6:	0e 94 04 07 	call	0xe08	; 0xe08 <__unpack_f>
     8da:	8e 01       	movw	r16, r28
     8dc:	0f 5e       	subi	r16, 0xEF	; 239
     8de:	1f 4f       	sbci	r17, 0xFF	; 255
     8e0:	ce 01       	movw	r24, r28
     8e2:	05 96       	adiw	r24, 0x05	; 5
     8e4:	b8 01       	movw	r22, r16
     8e6:	0e 94 04 07 	call	0xe08	; 0xe08 <__unpack_f>
     8ea:	89 85       	ldd	r24, Y+9	; 0x09
     8ec:	82 30       	cpi	r24, 0x02	; 2
     8ee:	40 f0       	brcs	.+16     	; 0x900 <__gesf2+0x56>
     8f0:	89 89       	ldd	r24, Y+17	; 0x11
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	28 f0       	brcs	.+10     	; 0x900 <__gesf2+0x56>
     8f6:	c7 01       	movw	r24, r14
     8f8:	b8 01       	movw	r22, r16
     8fa:	0e 94 7c 07 	call	0xef8	; 0xef8 <__fpcmp_parts_f>
     8fe:	01 c0       	rjmp	.+2      	; 0x902 <__gesf2+0x58>
     900:	8f ef       	ldi	r24, 0xFF	; 255
     902:	68 96       	adiw	r28, 0x18	; 24
     904:	e6 e0       	ldi	r30, 0x06	; 6
     906:	0c 94 b8 20 	jmp	0x4170	; 0x4170 <__epilogue_restores__+0x18>

0000090a <__ltsf2>:
     90a:	a8 e1       	ldi	r26, 0x18	; 24
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	eb e8       	ldi	r30, 0x8B	; 139
     910:	f4 e0       	ldi	r31, 0x04	; 4
     912:	0c 94 9c 20 	jmp	0x4138	; 0x4138 <__prologue_saves__+0x18>
     916:	69 83       	std	Y+1, r22	; 0x01
     918:	7a 83       	std	Y+2, r23	; 0x02
     91a:	8b 83       	std	Y+3, r24	; 0x03
     91c:	9c 83       	std	Y+4, r25	; 0x04
     91e:	2d 83       	std	Y+5, r18	; 0x05
     920:	3e 83       	std	Y+6, r19	; 0x06
     922:	4f 83       	std	Y+7, r20	; 0x07
     924:	58 87       	std	Y+8, r21	; 0x08
     926:	89 e0       	ldi	r24, 0x09	; 9
     928:	e8 2e       	mov	r14, r24
     92a:	f1 2c       	mov	r15, r1
     92c:	ec 0e       	add	r14, r28
     92e:	fd 1e       	adc	r15, r29
     930:	ce 01       	movw	r24, r28
     932:	01 96       	adiw	r24, 0x01	; 1
     934:	b7 01       	movw	r22, r14
     936:	0e 94 04 07 	call	0xe08	; 0xe08 <__unpack_f>
     93a:	8e 01       	movw	r16, r28
     93c:	0f 5e       	subi	r16, 0xEF	; 239
     93e:	1f 4f       	sbci	r17, 0xFF	; 255
     940:	ce 01       	movw	r24, r28
     942:	05 96       	adiw	r24, 0x05	; 5
     944:	b8 01       	movw	r22, r16
     946:	0e 94 04 07 	call	0xe08	; 0xe08 <__unpack_f>
     94a:	89 85       	ldd	r24, Y+9	; 0x09
     94c:	82 30       	cpi	r24, 0x02	; 2
     94e:	40 f0       	brcs	.+16     	; 0x960 <__ltsf2+0x56>
     950:	89 89       	ldd	r24, Y+17	; 0x11
     952:	82 30       	cpi	r24, 0x02	; 2
     954:	28 f0       	brcs	.+10     	; 0x960 <__ltsf2+0x56>
     956:	c7 01       	movw	r24, r14
     958:	b8 01       	movw	r22, r16
     95a:	0e 94 7c 07 	call	0xef8	; 0xef8 <__fpcmp_parts_f>
     95e:	01 c0       	rjmp	.+2      	; 0x962 <__ltsf2+0x58>
     960:	81 e0       	ldi	r24, 0x01	; 1
     962:	68 96       	adiw	r28, 0x18	; 24
     964:	e6 e0       	ldi	r30, 0x06	; 6
     966:	0c 94 b8 20 	jmp	0x4170	; 0x4170 <__epilogue_restores__+0x18>

0000096a <__floatsisf>:
     96a:	a8 e0       	ldi	r26, 0x08	; 8
     96c:	b0 e0       	ldi	r27, 0x00	; 0
     96e:	eb eb       	ldi	r30, 0xBB	; 187
     970:	f4 e0       	ldi	r31, 0x04	; 4
     972:	0c 94 99 20 	jmp	0x4132	; 0x4132 <__prologue_saves__+0x12>
     976:	9b 01       	movw	r18, r22
     978:	ac 01       	movw	r20, r24
     97a:	83 e0       	ldi	r24, 0x03	; 3
     97c:	89 83       	std	Y+1, r24	; 0x01
     97e:	da 01       	movw	r26, r20
     980:	c9 01       	movw	r24, r18
     982:	88 27       	eor	r24, r24
     984:	b7 fd       	sbrc	r27, 7
     986:	83 95       	inc	r24
     988:	99 27       	eor	r25, r25
     98a:	aa 27       	eor	r26, r26
     98c:	bb 27       	eor	r27, r27
     98e:	b8 2e       	mov	r11, r24
     990:	21 15       	cp	r18, r1
     992:	31 05       	cpc	r19, r1
     994:	41 05       	cpc	r20, r1
     996:	51 05       	cpc	r21, r1
     998:	19 f4       	brne	.+6      	; 0x9a0 <__floatsisf+0x36>
     99a:	82 e0       	ldi	r24, 0x02	; 2
     99c:	89 83       	std	Y+1, r24	; 0x01
     99e:	3a c0       	rjmp	.+116    	; 0xa14 <__floatsisf+0xaa>
     9a0:	88 23       	and	r24, r24
     9a2:	a9 f0       	breq	.+42     	; 0x9ce <__floatsisf+0x64>
     9a4:	20 30       	cpi	r18, 0x00	; 0
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	38 07       	cpc	r19, r24
     9aa:	80 e0       	ldi	r24, 0x00	; 0
     9ac:	48 07       	cpc	r20, r24
     9ae:	80 e8       	ldi	r24, 0x80	; 128
     9b0:	58 07       	cpc	r21, r24
     9b2:	29 f4       	brne	.+10     	; 0x9be <__floatsisf+0x54>
     9b4:	60 e0       	ldi	r22, 0x00	; 0
     9b6:	70 e0       	ldi	r23, 0x00	; 0
     9b8:	80 e0       	ldi	r24, 0x00	; 0
     9ba:	9f ec       	ldi	r25, 0xCF	; 207
     9bc:	30 c0       	rjmp	.+96     	; 0xa1e <__floatsisf+0xb4>
     9be:	ee 24       	eor	r14, r14
     9c0:	ff 24       	eor	r15, r15
     9c2:	87 01       	movw	r16, r14
     9c4:	e2 1a       	sub	r14, r18
     9c6:	f3 0a       	sbc	r15, r19
     9c8:	04 0b       	sbc	r16, r20
     9ca:	15 0b       	sbc	r17, r21
     9cc:	02 c0       	rjmp	.+4      	; 0x9d2 <__floatsisf+0x68>
     9ce:	79 01       	movw	r14, r18
     9d0:	8a 01       	movw	r16, r20
     9d2:	8e e1       	ldi	r24, 0x1E	; 30
     9d4:	c8 2e       	mov	r12, r24
     9d6:	d1 2c       	mov	r13, r1
     9d8:	dc 82       	std	Y+4, r13	; 0x04
     9da:	cb 82       	std	Y+3, r12	; 0x03
     9dc:	ed 82       	std	Y+5, r14	; 0x05
     9de:	fe 82       	std	Y+6, r15	; 0x06
     9e0:	0f 83       	std	Y+7, r16	; 0x07
     9e2:	18 87       	std	Y+8, r17	; 0x08
     9e4:	c8 01       	movw	r24, r16
     9e6:	b7 01       	movw	r22, r14
     9e8:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <__clzsi2>
     9ec:	01 97       	sbiw	r24, 0x01	; 1
     9ee:	18 16       	cp	r1, r24
     9f0:	19 06       	cpc	r1, r25
     9f2:	84 f4       	brge	.+32     	; 0xa14 <__floatsisf+0xaa>
     9f4:	08 2e       	mov	r0, r24
     9f6:	04 c0       	rjmp	.+8      	; 0xa00 <__floatsisf+0x96>
     9f8:	ee 0c       	add	r14, r14
     9fa:	ff 1c       	adc	r15, r15
     9fc:	00 1f       	adc	r16, r16
     9fe:	11 1f       	adc	r17, r17
     a00:	0a 94       	dec	r0
     a02:	d2 f7       	brpl	.-12     	; 0x9f8 <__floatsisf+0x8e>
     a04:	ed 82       	std	Y+5, r14	; 0x05
     a06:	fe 82       	std	Y+6, r15	; 0x06
     a08:	0f 83       	std	Y+7, r16	; 0x07
     a0a:	18 87       	std	Y+8, r17	; 0x08
     a0c:	c8 1a       	sub	r12, r24
     a0e:	d9 0a       	sbc	r13, r25
     a10:	dc 82       	std	Y+4, r13	; 0x04
     a12:	cb 82       	std	Y+3, r12	; 0x03
     a14:	ba 82       	std	Y+2, r11	; 0x02
     a16:	ce 01       	movw	r24, r28
     a18:	01 96       	adiw	r24, 0x01	; 1
     a1a:	0e 94 2f 06 	call	0xc5e	; 0xc5e <__pack_f>
     a1e:	28 96       	adiw	r28, 0x08	; 8
     a20:	e9 e0       	ldi	r30, 0x09	; 9
     a22:	0c 94 b5 20 	jmp	0x416a	; 0x416a <__epilogue_restores__+0x12>

00000a26 <__fixsfsi>:
     a26:	ac e0       	ldi	r26, 0x0C	; 12
     a28:	b0 e0       	ldi	r27, 0x00	; 0
     a2a:	e9 e1       	ldi	r30, 0x19	; 25
     a2c:	f5 e0       	ldi	r31, 0x05	; 5
     a2e:	0c 94 a0 20 	jmp	0x4140	; 0x4140 <__prologue_saves__+0x20>
     a32:	69 83       	std	Y+1, r22	; 0x01
     a34:	7a 83       	std	Y+2, r23	; 0x02
     a36:	8b 83       	std	Y+3, r24	; 0x03
     a38:	9c 83       	std	Y+4, r25	; 0x04
     a3a:	ce 01       	movw	r24, r28
     a3c:	01 96       	adiw	r24, 0x01	; 1
     a3e:	be 01       	movw	r22, r28
     a40:	6b 5f       	subi	r22, 0xFB	; 251
     a42:	7f 4f       	sbci	r23, 0xFF	; 255
     a44:	0e 94 04 07 	call	0xe08	; 0xe08 <__unpack_f>
     a48:	8d 81       	ldd	r24, Y+5	; 0x05
     a4a:	82 30       	cpi	r24, 0x02	; 2
     a4c:	61 f1       	breq	.+88     	; 0xaa6 <__fixsfsi+0x80>
     a4e:	82 30       	cpi	r24, 0x02	; 2
     a50:	50 f1       	brcs	.+84     	; 0xaa6 <__fixsfsi+0x80>
     a52:	84 30       	cpi	r24, 0x04	; 4
     a54:	21 f4       	brne	.+8      	; 0xa5e <__fixsfsi+0x38>
     a56:	8e 81       	ldd	r24, Y+6	; 0x06
     a58:	88 23       	and	r24, r24
     a5a:	51 f1       	breq	.+84     	; 0xab0 <__fixsfsi+0x8a>
     a5c:	2e c0       	rjmp	.+92     	; 0xaba <__fixsfsi+0x94>
     a5e:	2f 81       	ldd	r18, Y+7	; 0x07
     a60:	38 85       	ldd	r19, Y+8	; 0x08
     a62:	37 fd       	sbrc	r19, 7
     a64:	20 c0       	rjmp	.+64     	; 0xaa6 <__fixsfsi+0x80>
     a66:	6e 81       	ldd	r22, Y+6	; 0x06
     a68:	2f 31       	cpi	r18, 0x1F	; 31
     a6a:	31 05       	cpc	r19, r1
     a6c:	1c f0       	brlt	.+6      	; 0xa74 <__fixsfsi+0x4e>
     a6e:	66 23       	and	r22, r22
     a70:	f9 f0       	breq	.+62     	; 0xab0 <__fixsfsi+0x8a>
     a72:	23 c0       	rjmp	.+70     	; 0xaba <__fixsfsi+0x94>
     a74:	8e e1       	ldi	r24, 0x1E	; 30
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	82 1b       	sub	r24, r18
     a7a:	93 0b       	sbc	r25, r19
     a7c:	29 85       	ldd	r18, Y+9	; 0x09
     a7e:	3a 85       	ldd	r19, Y+10	; 0x0a
     a80:	4b 85       	ldd	r20, Y+11	; 0x0b
     a82:	5c 85       	ldd	r21, Y+12	; 0x0c
     a84:	04 c0       	rjmp	.+8      	; 0xa8e <__fixsfsi+0x68>
     a86:	56 95       	lsr	r21
     a88:	47 95       	ror	r20
     a8a:	37 95       	ror	r19
     a8c:	27 95       	ror	r18
     a8e:	8a 95       	dec	r24
     a90:	d2 f7       	brpl	.-12     	; 0xa86 <__fixsfsi+0x60>
     a92:	66 23       	and	r22, r22
     a94:	b1 f0       	breq	.+44     	; 0xac2 <__fixsfsi+0x9c>
     a96:	50 95       	com	r21
     a98:	40 95       	com	r20
     a9a:	30 95       	com	r19
     a9c:	21 95       	neg	r18
     a9e:	3f 4f       	sbci	r19, 0xFF	; 255
     aa0:	4f 4f       	sbci	r20, 0xFF	; 255
     aa2:	5f 4f       	sbci	r21, 0xFF	; 255
     aa4:	0e c0       	rjmp	.+28     	; 0xac2 <__fixsfsi+0x9c>
     aa6:	20 e0       	ldi	r18, 0x00	; 0
     aa8:	30 e0       	ldi	r19, 0x00	; 0
     aaa:	40 e0       	ldi	r20, 0x00	; 0
     aac:	50 e0       	ldi	r21, 0x00	; 0
     aae:	09 c0       	rjmp	.+18     	; 0xac2 <__fixsfsi+0x9c>
     ab0:	2f ef       	ldi	r18, 0xFF	; 255
     ab2:	3f ef       	ldi	r19, 0xFF	; 255
     ab4:	4f ef       	ldi	r20, 0xFF	; 255
     ab6:	5f e7       	ldi	r21, 0x7F	; 127
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__fixsfsi+0x9c>
     aba:	20 e0       	ldi	r18, 0x00	; 0
     abc:	30 e0       	ldi	r19, 0x00	; 0
     abe:	40 e0       	ldi	r20, 0x00	; 0
     ac0:	50 e8       	ldi	r21, 0x80	; 128
     ac2:	b9 01       	movw	r22, r18
     ac4:	ca 01       	movw	r24, r20
     ac6:	2c 96       	adiw	r28, 0x0c	; 12
     ac8:	e2 e0       	ldi	r30, 0x02	; 2
     aca:	0c 94 bc 20 	jmp	0x4178	; 0x4178 <__epilogue_restores__+0x20>

00000ace <__floatunsisf>:
     ace:	a8 e0       	ldi	r26, 0x08	; 8
     ad0:	b0 e0       	ldi	r27, 0x00	; 0
     ad2:	ed e6       	ldi	r30, 0x6D	; 109
     ad4:	f5 e0       	ldi	r31, 0x05	; 5
     ad6:	0c 94 98 20 	jmp	0x4130	; 0x4130 <__prologue_saves__+0x10>
     ada:	7b 01       	movw	r14, r22
     adc:	8c 01       	movw	r16, r24
     ade:	61 15       	cp	r22, r1
     ae0:	71 05       	cpc	r23, r1
     ae2:	81 05       	cpc	r24, r1
     ae4:	91 05       	cpc	r25, r1
     ae6:	19 f4       	brne	.+6      	; 0xaee <__floatunsisf+0x20>
     ae8:	82 e0       	ldi	r24, 0x02	; 2
     aea:	89 83       	std	Y+1, r24	; 0x01
     aec:	60 c0       	rjmp	.+192    	; 0xbae <__floatunsisf+0xe0>
     aee:	83 e0       	ldi	r24, 0x03	; 3
     af0:	89 83       	std	Y+1, r24	; 0x01
     af2:	8e e1       	ldi	r24, 0x1E	; 30
     af4:	c8 2e       	mov	r12, r24
     af6:	d1 2c       	mov	r13, r1
     af8:	dc 82       	std	Y+4, r13	; 0x04
     afa:	cb 82       	std	Y+3, r12	; 0x03
     afc:	ed 82       	std	Y+5, r14	; 0x05
     afe:	fe 82       	std	Y+6, r15	; 0x06
     b00:	0f 83       	std	Y+7, r16	; 0x07
     b02:	18 87       	std	Y+8, r17	; 0x08
     b04:	c8 01       	movw	r24, r16
     b06:	b7 01       	movw	r22, r14
     b08:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <__clzsi2>
     b0c:	fc 01       	movw	r30, r24
     b0e:	31 97       	sbiw	r30, 0x01	; 1
     b10:	f7 ff       	sbrs	r31, 7
     b12:	3b c0       	rjmp	.+118    	; 0xb8a <__floatunsisf+0xbc>
     b14:	22 27       	eor	r18, r18
     b16:	33 27       	eor	r19, r19
     b18:	2e 1b       	sub	r18, r30
     b1a:	3f 0b       	sbc	r19, r31
     b1c:	57 01       	movw	r10, r14
     b1e:	68 01       	movw	r12, r16
     b20:	02 2e       	mov	r0, r18
     b22:	04 c0       	rjmp	.+8      	; 0xb2c <__floatunsisf+0x5e>
     b24:	d6 94       	lsr	r13
     b26:	c7 94       	ror	r12
     b28:	b7 94       	ror	r11
     b2a:	a7 94       	ror	r10
     b2c:	0a 94       	dec	r0
     b2e:	d2 f7       	brpl	.-12     	; 0xb24 <__floatunsisf+0x56>
     b30:	40 e0       	ldi	r20, 0x00	; 0
     b32:	50 e0       	ldi	r21, 0x00	; 0
     b34:	60 e0       	ldi	r22, 0x00	; 0
     b36:	70 e0       	ldi	r23, 0x00	; 0
     b38:	81 e0       	ldi	r24, 0x01	; 1
     b3a:	90 e0       	ldi	r25, 0x00	; 0
     b3c:	a0 e0       	ldi	r26, 0x00	; 0
     b3e:	b0 e0       	ldi	r27, 0x00	; 0
     b40:	04 c0       	rjmp	.+8      	; 0xb4a <__floatunsisf+0x7c>
     b42:	88 0f       	add	r24, r24
     b44:	99 1f       	adc	r25, r25
     b46:	aa 1f       	adc	r26, r26
     b48:	bb 1f       	adc	r27, r27
     b4a:	2a 95       	dec	r18
     b4c:	d2 f7       	brpl	.-12     	; 0xb42 <__floatunsisf+0x74>
     b4e:	01 97       	sbiw	r24, 0x01	; 1
     b50:	a1 09       	sbc	r26, r1
     b52:	b1 09       	sbc	r27, r1
     b54:	8e 21       	and	r24, r14
     b56:	9f 21       	and	r25, r15
     b58:	a0 23       	and	r26, r16
     b5a:	b1 23       	and	r27, r17
     b5c:	00 97       	sbiw	r24, 0x00	; 0
     b5e:	a1 05       	cpc	r26, r1
     b60:	b1 05       	cpc	r27, r1
     b62:	21 f0       	breq	.+8      	; 0xb6c <__floatunsisf+0x9e>
     b64:	41 e0       	ldi	r20, 0x01	; 1
     b66:	50 e0       	ldi	r21, 0x00	; 0
     b68:	60 e0       	ldi	r22, 0x00	; 0
     b6a:	70 e0       	ldi	r23, 0x00	; 0
     b6c:	4a 29       	or	r20, r10
     b6e:	5b 29       	or	r21, r11
     b70:	6c 29       	or	r22, r12
     b72:	7d 29       	or	r23, r13
     b74:	4d 83       	std	Y+5, r20	; 0x05
     b76:	5e 83       	std	Y+6, r21	; 0x06
     b78:	6f 83       	std	Y+7, r22	; 0x07
     b7a:	78 87       	std	Y+8, r23	; 0x08
     b7c:	8e e1       	ldi	r24, 0x1E	; 30
     b7e:	90 e0       	ldi	r25, 0x00	; 0
     b80:	8e 1b       	sub	r24, r30
     b82:	9f 0b       	sbc	r25, r31
     b84:	9c 83       	std	Y+4, r25	; 0x04
     b86:	8b 83       	std	Y+3, r24	; 0x03
     b88:	12 c0       	rjmp	.+36     	; 0xbae <__floatunsisf+0xe0>
     b8a:	30 97       	sbiw	r30, 0x00	; 0
     b8c:	81 f0       	breq	.+32     	; 0xbae <__floatunsisf+0xe0>
     b8e:	0e 2e       	mov	r0, r30
     b90:	04 c0       	rjmp	.+8      	; 0xb9a <__floatunsisf+0xcc>
     b92:	ee 0c       	add	r14, r14
     b94:	ff 1c       	adc	r15, r15
     b96:	00 1f       	adc	r16, r16
     b98:	11 1f       	adc	r17, r17
     b9a:	0a 94       	dec	r0
     b9c:	d2 f7       	brpl	.-12     	; 0xb92 <__floatunsisf+0xc4>
     b9e:	ed 82       	std	Y+5, r14	; 0x05
     ba0:	fe 82       	std	Y+6, r15	; 0x06
     ba2:	0f 83       	std	Y+7, r16	; 0x07
     ba4:	18 87       	std	Y+8, r17	; 0x08
     ba6:	ce 1a       	sub	r12, r30
     ba8:	df 0a       	sbc	r13, r31
     baa:	dc 82       	std	Y+4, r13	; 0x04
     bac:	cb 82       	std	Y+3, r12	; 0x03
     bae:	1a 82       	std	Y+2, r1	; 0x02
     bb0:	ce 01       	movw	r24, r28
     bb2:	01 96       	adiw	r24, 0x01	; 1
     bb4:	0e 94 2f 06 	call	0xc5e	; 0xc5e <__pack_f>
     bb8:	28 96       	adiw	r28, 0x08	; 8
     bba:	ea e0       	ldi	r30, 0x0A	; 10
     bbc:	0c 94 b4 20 	jmp	0x4168	; 0x4168 <__epilogue_restores__+0x10>

00000bc0 <__clzsi2>:
     bc0:	ef 92       	push	r14
     bc2:	ff 92       	push	r15
     bc4:	0f 93       	push	r16
     bc6:	1f 93       	push	r17
     bc8:	7b 01       	movw	r14, r22
     bca:	8c 01       	movw	r16, r24
     bcc:	80 e0       	ldi	r24, 0x00	; 0
     bce:	e8 16       	cp	r14, r24
     bd0:	80 e0       	ldi	r24, 0x00	; 0
     bd2:	f8 06       	cpc	r15, r24
     bd4:	81 e0       	ldi	r24, 0x01	; 1
     bd6:	08 07       	cpc	r16, r24
     bd8:	80 e0       	ldi	r24, 0x00	; 0
     bda:	18 07       	cpc	r17, r24
     bdc:	88 f4       	brcc	.+34     	; 0xc00 <__clzsi2+0x40>
     bde:	8f ef       	ldi	r24, 0xFF	; 255
     be0:	e8 16       	cp	r14, r24
     be2:	f1 04       	cpc	r15, r1
     be4:	01 05       	cpc	r16, r1
     be6:	11 05       	cpc	r17, r1
     be8:	31 f0       	breq	.+12     	; 0xbf6 <__clzsi2+0x36>
     bea:	28 f0       	brcs	.+10     	; 0xbf6 <__clzsi2+0x36>
     bec:	88 e0       	ldi	r24, 0x08	; 8
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	a0 e0       	ldi	r26, 0x00	; 0
     bf2:	b0 e0       	ldi	r27, 0x00	; 0
     bf4:	17 c0       	rjmp	.+46     	; 0xc24 <__clzsi2+0x64>
     bf6:	80 e0       	ldi	r24, 0x00	; 0
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	a0 e0       	ldi	r26, 0x00	; 0
     bfc:	b0 e0       	ldi	r27, 0x00	; 0
     bfe:	12 c0       	rjmp	.+36     	; 0xc24 <__clzsi2+0x64>
     c00:	80 e0       	ldi	r24, 0x00	; 0
     c02:	e8 16       	cp	r14, r24
     c04:	80 e0       	ldi	r24, 0x00	; 0
     c06:	f8 06       	cpc	r15, r24
     c08:	80 e0       	ldi	r24, 0x00	; 0
     c0a:	08 07       	cpc	r16, r24
     c0c:	81 e0       	ldi	r24, 0x01	; 1
     c0e:	18 07       	cpc	r17, r24
     c10:	28 f0       	brcs	.+10     	; 0xc1c <__clzsi2+0x5c>
     c12:	88 e1       	ldi	r24, 0x18	; 24
     c14:	90 e0       	ldi	r25, 0x00	; 0
     c16:	a0 e0       	ldi	r26, 0x00	; 0
     c18:	b0 e0       	ldi	r27, 0x00	; 0
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__clzsi2+0x64>
     c1c:	80 e1       	ldi	r24, 0x10	; 16
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	20 e2       	ldi	r18, 0x20	; 32
     c26:	30 e0       	ldi	r19, 0x00	; 0
     c28:	40 e0       	ldi	r20, 0x00	; 0
     c2a:	50 e0       	ldi	r21, 0x00	; 0
     c2c:	28 1b       	sub	r18, r24
     c2e:	39 0b       	sbc	r19, r25
     c30:	4a 0b       	sbc	r20, r26
     c32:	5b 0b       	sbc	r21, r27
     c34:	04 c0       	rjmp	.+8      	; 0xc3e <__clzsi2+0x7e>
     c36:	16 95       	lsr	r17
     c38:	07 95       	ror	r16
     c3a:	f7 94       	ror	r15
     c3c:	e7 94       	ror	r14
     c3e:	8a 95       	dec	r24
     c40:	d2 f7       	brpl	.-12     	; 0xc36 <__clzsi2+0x76>
     c42:	f7 01       	movw	r30, r14
     c44:	eb 58       	subi	r30, 0x8B	; 139
     c46:	ff 4f       	sbci	r31, 0xFF	; 255
     c48:	80 81       	ld	r24, Z
     c4a:	28 1b       	sub	r18, r24
     c4c:	31 09       	sbc	r19, r1
     c4e:	41 09       	sbc	r20, r1
     c50:	51 09       	sbc	r21, r1
     c52:	c9 01       	movw	r24, r18
     c54:	1f 91       	pop	r17
     c56:	0f 91       	pop	r16
     c58:	ff 90       	pop	r15
     c5a:	ef 90       	pop	r14
     c5c:	08 95       	ret

00000c5e <__pack_f>:
     c5e:	df 92       	push	r13
     c60:	ef 92       	push	r14
     c62:	ff 92       	push	r15
     c64:	0f 93       	push	r16
     c66:	1f 93       	push	r17
     c68:	fc 01       	movw	r30, r24
     c6a:	e4 80       	ldd	r14, Z+4	; 0x04
     c6c:	f5 80       	ldd	r15, Z+5	; 0x05
     c6e:	06 81       	ldd	r16, Z+6	; 0x06
     c70:	17 81       	ldd	r17, Z+7	; 0x07
     c72:	d1 80       	ldd	r13, Z+1	; 0x01
     c74:	80 81       	ld	r24, Z
     c76:	82 30       	cpi	r24, 0x02	; 2
     c78:	48 f4       	brcc	.+18     	; 0xc8c <__pack_f+0x2e>
     c7a:	80 e0       	ldi	r24, 0x00	; 0
     c7c:	90 e0       	ldi	r25, 0x00	; 0
     c7e:	a0 e1       	ldi	r26, 0x10	; 16
     c80:	b0 e0       	ldi	r27, 0x00	; 0
     c82:	e8 2a       	or	r14, r24
     c84:	f9 2a       	or	r15, r25
     c86:	0a 2b       	or	r16, r26
     c88:	1b 2b       	or	r17, r27
     c8a:	a5 c0       	rjmp	.+330    	; 0xdd6 <__pack_f+0x178>
     c8c:	84 30       	cpi	r24, 0x04	; 4
     c8e:	09 f4       	brne	.+2      	; 0xc92 <__pack_f+0x34>
     c90:	9f c0       	rjmp	.+318    	; 0xdd0 <__pack_f+0x172>
     c92:	82 30       	cpi	r24, 0x02	; 2
     c94:	21 f4       	brne	.+8      	; 0xc9e <__pack_f+0x40>
     c96:	ee 24       	eor	r14, r14
     c98:	ff 24       	eor	r15, r15
     c9a:	87 01       	movw	r16, r14
     c9c:	05 c0       	rjmp	.+10     	; 0xca8 <__pack_f+0x4a>
     c9e:	e1 14       	cp	r14, r1
     ca0:	f1 04       	cpc	r15, r1
     ca2:	01 05       	cpc	r16, r1
     ca4:	11 05       	cpc	r17, r1
     ca6:	19 f4       	brne	.+6      	; 0xcae <__pack_f+0x50>
     ca8:	e0 e0       	ldi	r30, 0x00	; 0
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	96 c0       	rjmp	.+300    	; 0xdda <__pack_f+0x17c>
     cae:	62 81       	ldd	r22, Z+2	; 0x02
     cb0:	73 81       	ldd	r23, Z+3	; 0x03
     cb2:	9f ef       	ldi	r25, 0xFF	; 255
     cb4:	62 38       	cpi	r22, 0x82	; 130
     cb6:	79 07       	cpc	r23, r25
     cb8:	0c f0       	brlt	.+2      	; 0xcbc <__pack_f+0x5e>
     cba:	5b c0       	rjmp	.+182    	; 0xd72 <__pack_f+0x114>
     cbc:	22 e8       	ldi	r18, 0x82	; 130
     cbe:	3f ef       	ldi	r19, 0xFF	; 255
     cc0:	26 1b       	sub	r18, r22
     cc2:	37 0b       	sbc	r19, r23
     cc4:	2a 31       	cpi	r18, 0x1A	; 26
     cc6:	31 05       	cpc	r19, r1
     cc8:	2c f0       	brlt	.+10     	; 0xcd4 <__pack_f+0x76>
     cca:	20 e0       	ldi	r18, 0x00	; 0
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	40 e0       	ldi	r20, 0x00	; 0
     cd0:	50 e0       	ldi	r21, 0x00	; 0
     cd2:	2a c0       	rjmp	.+84     	; 0xd28 <__pack_f+0xca>
     cd4:	b8 01       	movw	r22, r16
     cd6:	a7 01       	movw	r20, r14
     cd8:	02 2e       	mov	r0, r18
     cda:	04 c0       	rjmp	.+8      	; 0xce4 <__pack_f+0x86>
     cdc:	76 95       	lsr	r23
     cde:	67 95       	ror	r22
     ce0:	57 95       	ror	r21
     ce2:	47 95       	ror	r20
     ce4:	0a 94       	dec	r0
     ce6:	d2 f7       	brpl	.-12     	; 0xcdc <__pack_f+0x7e>
     ce8:	81 e0       	ldi	r24, 0x01	; 1
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	a0 e0       	ldi	r26, 0x00	; 0
     cee:	b0 e0       	ldi	r27, 0x00	; 0
     cf0:	04 c0       	rjmp	.+8      	; 0xcfa <__pack_f+0x9c>
     cf2:	88 0f       	add	r24, r24
     cf4:	99 1f       	adc	r25, r25
     cf6:	aa 1f       	adc	r26, r26
     cf8:	bb 1f       	adc	r27, r27
     cfa:	2a 95       	dec	r18
     cfc:	d2 f7       	brpl	.-12     	; 0xcf2 <__pack_f+0x94>
     cfe:	01 97       	sbiw	r24, 0x01	; 1
     d00:	a1 09       	sbc	r26, r1
     d02:	b1 09       	sbc	r27, r1
     d04:	8e 21       	and	r24, r14
     d06:	9f 21       	and	r25, r15
     d08:	a0 23       	and	r26, r16
     d0a:	b1 23       	and	r27, r17
     d0c:	00 97       	sbiw	r24, 0x00	; 0
     d0e:	a1 05       	cpc	r26, r1
     d10:	b1 05       	cpc	r27, r1
     d12:	21 f0       	breq	.+8      	; 0xd1c <__pack_f+0xbe>
     d14:	81 e0       	ldi	r24, 0x01	; 1
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	a0 e0       	ldi	r26, 0x00	; 0
     d1a:	b0 e0       	ldi	r27, 0x00	; 0
     d1c:	9a 01       	movw	r18, r20
     d1e:	ab 01       	movw	r20, r22
     d20:	28 2b       	or	r18, r24
     d22:	39 2b       	or	r19, r25
     d24:	4a 2b       	or	r20, r26
     d26:	5b 2b       	or	r21, r27
     d28:	da 01       	movw	r26, r20
     d2a:	c9 01       	movw	r24, r18
     d2c:	8f 77       	andi	r24, 0x7F	; 127
     d2e:	90 70       	andi	r25, 0x00	; 0
     d30:	a0 70       	andi	r26, 0x00	; 0
     d32:	b0 70       	andi	r27, 0x00	; 0
     d34:	80 34       	cpi	r24, 0x40	; 64
     d36:	91 05       	cpc	r25, r1
     d38:	a1 05       	cpc	r26, r1
     d3a:	b1 05       	cpc	r27, r1
     d3c:	39 f4       	brne	.+14     	; 0xd4c <__pack_f+0xee>
     d3e:	27 ff       	sbrs	r18, 7
     d40:	09 c0       	rjmp	.+18     	; 0xd54 <__pack_f+0xf6>
     d42:	20 5c       	subi	r18, 0xC0	; 192
     d44:	3f 4f       	sbci	r19, 0xFF	; 255
     d46:	4f 4f       	sbci	r20, 0xFF	; 255
     d48:	5f 4f       	sbci	r21, 0xFF	; 255
     d4a:	04 c0       	rjmp	.+8      	; 0xd54 <__pack_f+0xf6>
     d4c:	21 5c       	subi	r18, 0xC1	; 193
     d4e:	3f 4f       	sbci	r19, 0xFF	; 255
     d50:	4f 4f       	sbci	r20, 0xFF	; 255
     d52:	5f 4f       	sbci	r21, 0xFF	; 255
     d54:	e0 e0       	ldi	r30, 0x00	; 0
     d56:	f0 e0       	ldi	r31, 0x00	; 0
     d58:	20 30       	cpi	r18, 0x00	; 0
     d5a:	a0 e0       	ldi	r26, 0x00	; 0
     d5c:	3a 07       	cpc	r19, r26
     d5e:	a0 e0       	ldi	r26, 0x00	; 0
     d60:	4a 07       	cpc	r20, r26
     d62:	a0 e4       	ldi	r26, 0x40	; 64
     d64:	5a 07       	cpc	r21, r26
     d66:	10 f0       	brcs	.+4      	; 0xd6c <__pack_f+0x10e>
     d68:	e1 e0       	ldi	r30, 0x01	; 1
     d6a:	f0 e0       	ldi	r31, 0x00	; 0
     d6c:	79 01       	movw	r14, r18
     d6e:	8a 01       	movw	r16, r20
     d70:	27 c0       	rjmp	.+78     	; 0xdc0 <__pack_f+0x162>
     d72:	60 38       	cpi	r22, 0x80	; 128
     d74:	71 05       	cpc	r23, r1
     d76:	64 f5       	brge	.+88     	; 0xdd0 <__pack_f+0x172>
     d78:	fb 01       	movw	r30, r22
     d7a:	e1 58       	subi	r30, 0x81	; 129
     d7c:	ff 4f       	sbci	r31, 0xFF	; 255
     d7e:	d8 01       	movw	r26, r16
     d80:	c7 01       	movw	r24, r14
     d82:	8f 77       	andi	r24, 0x7F	; 127
     d84:	90 70       	andi	r25, 0x00	; 0
     d86:	a0 70       	andi	r26, 0x00	; 0
     d88:	b0 70       	andi	r27, 0x00	; 0
     d8a:	80 34       	cpi	r24, 0x40	; 64
     d8c:	91 05       	cpc	r25, r1
     d8e:	a1 05       	cpc	r26, r1
     d90:	b1 05       	cpc	r27, r1
     d92:	39 f4       	brne	.+14     	; 0xda2 <__pack_f+0x144>
     d94:	e7 fe       	sbrs	r14, 7
     d96:	0d c0       	rjmp	.+26     	; 0xdb2 <__pack_f+0x154>
     d98:	80 e4       	ldi	r24, 0x40	; 64
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	a0 e0       	ldi	r26, 0x00	; 0
     d9e:	b0 e0       	ldi	r27, 0x00	; 0
     da0:	04 c0       	rjmp	.+8      	; 0xdaa <__pack_f+0x14c>
     da2:	8f e3       	ldi	r24, 0x3F	; 63
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	a0 e0       	ldi	r26, 0x00	; 0
     da8:	b0 e0       	ldi	r27, 0x00	; 0
     daa:	e8 0e       	add	r14, r24
     dac:	f9 1e       	adc	r15, r25
     dae:	0a 1f       	adc	r16, r26
     db0:	1b 1f       	adc	r17, r27
     db2:	17 ff       	sbrs	r17, 7
     db4:	05 c0       	rjmp	.+10     	; 0xdc0 <__pack_f+0x162>
     db6:	16 95       	lsr	r17
     db8:	07 95       	ror	r16
     dba:	f7 94       	ror	r15
     dbc:	e7 94       	ror	r14
     dbe:	31 96       	adiw	r30, 0x01	; 1
     dc0:	87 e0       	ldi	r24, 0x07	; 7
     dc2:	16 95       	lsr	r17
     dc4:	07 95       	ror	r16
     dc6:	f7 94       	ror	r15
     dc8:	e7 94       	ror	r14
     dca:	8a 95       	dec	r24
     dcc:	d1 f7       	brne	.-12     	; 0xdc2 <__pack_f+0x164>
     dce:	05 c0       	rjmp	.+10     	; 0xdda <__pack_f+0x17c>
     dd0:	ee 24       	eor	r14, r14
     dd2:	ff 24       	eor	r15, r15
     dd4:	87 01       	movw	r16, r14
     dd6:	ef ef       	ldi	r30, 0xFF	; 255
     dd8:	f0 e0       	ldi	r31, 0x00	; 0
     dda:	6e 2f       	mov	r22, r30
     ddc:	67 95       	ror	r22
     dde:	66 27       	eor	r22, r22
     de0:	67 95       	ror	r22
     de2:	90 2f       	mov	r25, r16
     de4:	9f 77       	andi	r25, 0x7F	; 127
     de6:	d7 94       	ror	r13
     de8:	dd 24       	eor	r13, r13
     dea:	d7 94       	ror	r13
     dec:	8e 2f       	mov	r24, r30
     dee:	86 95       	lsr	r24
     df0:	49 2f       	mov	r20, r25
     df2:	46 2b       	or	r20, r22
     df4:	58 2f       	mov	r21, r24
     df6:	5d 29       	or	r21, r13
     df8:	b7 01       	movw	r22, r14
     dfa:	ca 01       	movw	r24, r20
     dfc:	1f 91       	pop	r17
     dfe:	0f 91       	pop	r16
     e00:	ff 90       	pop	r15
     e02:	ef 90       	pop	r14
     e04:	df 90       	pop	r13
     e06:	08 95       	ret

00000e08 <__unpack_f>:
     e08:	fc 01       	movw	r30, r24
     e0a:	db 01       	movw	r26, r22
     e0c:	40 81       	ld	r20, Z
     e0e:	51 81       	ldd	r21, Z+1	; 0x01
     e10:	22 81       	ldd	r18, Z+2	; 0x02
     e12:	62 2f       	mov	r22, r18
     e14:	6f 77       	andi	r22, 0x7F	; 127
     e16:	70 e0       	ldi	r23, 0x00	; 0
     e18:	22 1f       	adc	r18, r18
     e1a:	22 27       	eor	r18, r18
     e1c:	22 1f       	adc	r18, r18
     e1e:	93 81       	ldd	r25, Z+3	; 0x03
     e20:	89 2f       	mov	r24, r25
     e22:	88 0f       	add	r24, r24
     e24:	82 2b       	or	r24, r18
     e26:	28 2f       	mov	r18, r24
     e28:	30 e0       	ldi	r19, 0x00	; 0
     e2a:	99 1f       	adc	r25, r25
     e2c:	99 27       	eor	r25, r25
     e2e:	99 1f       	adc	r25, r25
     e30:	11 96       	adiw	r26, 0x01	; 1
     e32:	9c 93       	st	X, r25
     e34:	11 97       	sbiw	r26, 0x01	; 1
     e36:	21 15       	cp	r18, r1
     e38:	31 05       	cpc	r19, r1
     e3a:	a9 f5       	brne	.+106    	; 0xea6 <__unpack_f+0x9e>
     e3c:	41 15       	cp	r20, r1
     e3e:	51 05       	cpc	r21, r1
     e40:	61 05       	cpc	r22, r1
     e42:	71 05       	cpc	r23, r1
     e44:	11 f4       	brne	.+4      	; 0xe4a <__unpack_f+0x42>
     e46:	82 e0       	ldi	r24, 0x02	; 2
     e48:	37 c0       	rjmp	.+110    	; 0xeb8 <__unpack_f+0xb0>
     e4a:	82 e8       	ldi	r24, 0x82	; 130
     e4c:	9f ef       	ldi	r25, 0xFF	; 255
     e4e:	13 96       	adiw	r26, 0x03	; 3
     e50:	9c 93       	st	X, r25
     e52:	8e 93       	st	-X, r24
     e54:	12 97       	sbiw	r26, 0x02	; 2
     e56:	9a 01       	movw	r18, r20
     e58:	ab 01       	movw	r20, r22
     e5a:	67 e0       	ldi	r22, 0x07	; 7
     e5c:	22 0f       	add	r18, r18
     e5e:	33 1f       	adc	r19, r19
     e60:	44 1f       	adc	r20, r20
     e62:	55 1f       	adc	r21, r21
     e64:	6a 95       	dec	r22
     e66:	d1 f7       	brne	.-12     	; 0xe5c <__unpack_f+0x54>
     e68:	83 e0       	ldi	r24, 0x03	; 3
     e6a:	8c 93       	st	X, r24
     e6c:	0d c0       	rjmp	.+26     	; 0xe88 <__unpack_f+0x80>
     e6e:	22 0f       	add	r18, r18
     e70:	33 1f       	adc	r19, r19
     e72:	44 1f       	adc	r20, r20
     e74:	55 1f       	adc	r21, r21
     e76:	12 96       	adiw	r26, 0x02	; 2
     e78:	8d 91       	ld	r24, X+
     e7a:	9c 91       	ld	r25, X
     e7c:	13 97       	sbiw	r26, 0x03	; 3
     e7e:	01 97       	sbiw	r24, 0x01	; 1
     e80:	13 96       	adiw	r26, 0x03	; 3
     e82:	9c 93       	st	X, r25
     e84:	8e 93       	st	-X, r24
     e86:	12 97       	sbiw	r26, 0x02	; 2
     e88:	20 30       	cpi	r18, 0x00	; 0
     e8a:	80 e0       	ldi	r24, 0x00	; 0
     e8c:	38 07       	cpc	r19, r24
     e8e:	80 e0       	ldi	r24, 0x00	; 0
     e90:	48 07       	cpc	r20, r24
     e92:	80 e4       	ldi	r24, 0x40	; 64
     e94:	58 07       	cpc	r21, r24
     e96:	58 f3       	brcs	.-42     	; 0xe6e <__unpack_f+0x66>
     e98:	14 96       	adiw	r26, 0x04	; 4
     e9a:	2d 93       	st	X+, r18
     e9c:	3d 93       	st	X+, r19
     e9e:	4d 93       	st	X+, r20
     ea0:	5c 93       	st	X, r21
     ea2:	17 97       	sbiw	r26, 0x07	; 7
     ea4:	08 95       	ret
     ea6:	2f 3f       	cpi	r18, 0xFF	; 255
     ea8:	31 05       	cpc	r19, r1
     eaa:	79 f4       	brne	.+30     	; 0xeca <__unpack_f+0xc2>
     eac:	41 15       	cp	r20, r1
     eae:	51 05       	cpc	r21, r1
     eb0:	61 05       	cpc	r22, r1
     eb2:	71 05       	cpc	r23, r1
     eb4:	19 f4       	brne	.+6      	; 0xebc <__unpack_f+0xb4>
     eb6:	84 e0       	ldi	r24, 0x04	; 4
     eb8:	8c 93       	st	X, r24
     eba:	08 95       	ret
     ebc:	64 ff       	sbrs	r22, 4
     ebe:	03 c0       	rjmp	.+6      	; 0xec6 <__unpack_f+0xbe>
     ec0:	81 e0       	ldi	r24, 0x01	; 1
     ec2:	8c 93       	st	X, r24
     ec4:	12 c0       	rjmp	.+36     	; 0xeea <__unpack_f+0xe2>
     ec6:	1c 92       	st	X, r1
     ec8:	10 c0       	rjmp	.+32     	; 0xeea <__unpack_f+0xe2>
     eca:	2f 57       	subi	r18, 0x7F	; 127
     ecc:	30 40       	sbci	r19, 0x00	; 0
     ece:	13 96       	adiw	r26, 0x03	; 3
     ed0:	3c 93       	st	X, r19
     ed2:	2e 93       	st	-X, r18
     ed4:	12 97       	sbiw	r26, 0x02	; 2
     ed6:	83 e0       	ldi	r24, 0x03	; 3
     ed8:	8c 93       	st	X, r24
     eda:	87 e0       	ldi	r24, 0x07	; 7
     edc:	44 0f       	add	r20, r20
     ede:	55 1f       	adc	r21, r21
     ee0:	66 1f       	adc	r22, r22
     ee2:	77 1f       	adc	r23, r23
     ee4:	8a 95       	dec	r24
     ee6:	d1 f7       	brne	.-12     	; 0xedc <__unpack_f+0xd4>
     ee8:	70 64       	ori	r23, 0x40	; 64
     eea:	14 96       	adiw	r26, 0x04	; 4
     eec:	4d 93       	st	X+, r20
     eee:	5d 93       	st	X+, r21
     ef0:	6d 93       	st	X+, r22
     ef2:	7c 93       	st	X, r23
     ef4:	17 97       	sbiw	r26, 0x07	; 7
     ef6:	08 95       	ret

00000ef8 <__fpcmp_parts_f>:
     ef8:	1f 93       	push	r17
     efa:	dc 01       	movw	r26, r24
     efc:	fb 01       	movw	r30, r22
     efe:	9c 91       	ld	r25, X
     f00:	92 30       	cpi	r25, 0x02	; 2
     f02:	08 f4       	brcc	.+2      	; 0xf06 <__fpcmp_parts_f+0xe>
     f04:	47 c0       	rjmp	.+142    	; 0xf94 <__fpcmp_parts_f+0x9c>
     f06:	80 81       	ld	r24, Z
     f08:	82 30       	cpi	r24, 0x02	; 2
     f0a:	08 f4       	brcc	.+2      	; 0xf0e <__fpcmp_parts_f+0x16>
     f0c:	43 c0       	rjmp	.+134    	; 0xf94 <__fpcmp_parts_f+0x9c>
     f0e:	94 30       	cpi	r25, 0x04	; 4
     f10:	51 f4       	brne	.+20     	; 0xf26 <__fpcmp_parts_f+0x2e>
     f12:	11 96       	adiw	r26, 0x01	; 1
     f14:	1c 91       	ld	r17, X
     f16:	84 30       	cpi	r24, 0x04	; 4
     f18:	99 f5       	brne	.+102    	; 0xf80 <__fpcmp_parts_f+0x88>
     f1a:	81 81       	ldd	r24, Z+1	; 0x01
     f1c:	68 2f       	mov	r22, r24
     f1e:	70 e0       	ldi	r23, 0x00	; 0
     f20:	61 1b       	sub	r22, r17
     f22:	71 09       	sbc	r23, r1
     f24:	3f c0       	rjmp	.+126    	; 0xfa4 <__fpcmp_parts_f+0xac>
     f26:	84 30       	cpi	r24, 0x04	; 4
     f28:	21 f0       	breq	.+8      	; 0xf32 <__fpcmp_parts_f+0x3a>
     f2a:	92 30       	cpi	r25, 0x02	; 2
     f2c:	31 f4       	brne	.+12     	; 0xf3a <__fpcmp_parts_f+0x42>
     f2e:	82 30       	cpi	r24, 0x02	; 2
     f30:	b9 f1       	breq	.+110    	; 0xfa0 <__fpcmp_parts_f+0xa8>
     f32:	81 81       	ldd	r24, Z+1	; 0x01
     f34:	88 23       	and	r24, r24
     f36:	89 f1       	breq	.+98     	; 0xf9a <__fpcmp_parts_f+0xa2>
     f38:	2d c0       	rjmp	.+90     	; 0xf94 <__fpcmp_parts_f+0x9c>
     f3a:	11 96       	adiw	r26, 0x01	; 1
     f3c:	1c 91       	ld	r17, X
     f3e:	11 97       	sbiw	r26, 0x01	; 1
     f40:	82 30       	cpi	r24, 0x02	; 2
     f42:	f1 f0       	breq	.+60     	; 0xf80 <__fpcmp_parts_f+0x88>
     f44:	81 81       	ldd	r24, Z+1	; 0x01
     f46:	18 17       	cp	r17, r24
     f48:	d9 f4       	brne	.+54     	; 0xf80 <__fpcmp_parts_f+0x88>
     f4a:	12 96       	adiw	r26, 0x02	; 2
     f4c:	2d 91       	ld	r18, X+
     f4e:	3c 91       	ld	r19, X
     f50:	13 97       	sbiw	r26, 0x03	; 3
     f52:	82 81       	ldd	r24, Z+2	; 0x02
     f54:	93 81       	ldd	r25, Z+3	; 0x03
     f56:	82 17       	cp	r24, r18
     f58:	93 07       	cpc	r25, r19
     f5a:	94 f0       	brlt	.+36     	; 0xf80 <__fpcmp_parts_f+0x88>
     f5c:	28 17       	cp	r18, r24
     f5e:	39 07       	cpc	r19, r25
     f60:	bc f0       	brlt	.+46     	; 0xf90 <__fpcmp_parts_f+0x98>
     f62:	14 96       	adiw	r26, 0x04	; 4
     f64:	8d 91       	ld	r24, X+
     f66:	9d 91       	ld	r25, X+
     f68:	0d 90       	ld	r0, X+
     f6a:	bc 91       	ld	r27, X
     f6c:	a0 2d       	mov	r26, r0
     f6e:	24 81       	ldd	r18, Z+4	; 0x04
     f70:	35 81       	ldd	r19, Z+5	; 0x05
     f72:	46 81       	ldd	r20, Z+6	; 0x06
     f74:	57 81       	ldd	r21, Z+7	; 0x07
     f76:	28 17       	cp	r18, r24
     f78:	39 07       	cpc	r19, r25
     f7a:	4a 07       	cpc	r20, r26
     f7c:	5b 07       	cpc	r21, r27
     f7e:	18 f4       	brcc	.+6      	; 0xf86 <__fpcmp_parts_f+0x8e>
     f80:	11 23       	and	r17, r17
     f82:	41 f0       	breq	.+16     	; 0xf94 <__fpcmp_parts_f+0x9c>
     f84:	0a c0       	rjmp	.+20     	; 0xf9a <__fpcmp_parts_f+0xa2>
     f86:	82 17       	cp	r24, r18
     f88:	93 07       	cpc	r25, r19
     f8a:	a4 07       	cpc	r26, r20
     f8c:	b5 07       	cpc	r27, r21
     f8e:	40 f4       	brcc	.+16     	; 0xfa0 <__fpcmp_parts_f+0xa8>
     f90:	11 23       	and	r17, r17
     f92:	19 f0       	breq	.+6      	; 0xf9a <__fpcmp_parts_f+0xa2>
     f94:	61 e0       	ldi	r22, 0x01	; 1
     f96:	70 e0       	ldi	r23, 0x00	; 0
     f98:	05 c0       	rjmp	.+10     	; 0xfa4 <__fpcmp_parts_f+0xac>
     f9a:	6f ef       	ldi	r22, 0xFF	; 255
     f9c:	7f ef       	ldi	r23, 0xFF	; 255
     f9e:	02 c0       	rjmp	.+4      	; 0xfa4 <__fpcmp_parts_f+0xac>
     fa0:	60 e0       	ldi	r22, 0x00	; 0
     fa2:	70 e0       	ldi	r23, 0x00	; 0
     fa4:	cb 01       	movw	r24, r22
     fa6:	1f 91       	pop	r17
     fa8:	08 95       	ret

00000faa <DIO_SetPinDirection>:
#include "Utils.h"
#include "Memmap.h"
#include "DIO.h"

extern void DIO_SetPinDirection(PortID_t Port, PinID_t Pin, uint8 direction)
{
     faa:	df 93       	push	r29
     fac:	cf 93       	push	r28
     fae:	cd b7       	in	r28, 0x3d	; 61
     fb0:	de b7       	in	r29, 0x3e	; 62
     fb2:	2d 97       	sbiw	r28, 0x0d	; 13
     fb4:	0f b6       	in	r0, 0x3f	; 63
     fb6:	f8 94       	cli
     fb8:	de bf       	out	0x3e, r29	; 62
     fba:	0f be       	out	0x3f, r0	; 63
     fbc:	cd bf       	out	0x3d, r28	; 61
     fbe:	89 83       	std	Y+1, r24	; 0x01
     fc0:	6a 83       	std	Y+2, r22	; 0x02
     fc2:	4b 83       	std	Y+3, r20	; 0x03
	if((Port <= PD) && (Pin <= PIN7))
     fc4:	89 81       	ldd	r24, Y+1	; 0x01
     fc6:	84 30       	cpi	r24, 0x04	; 4
     fc8:	08 f0       	brcs	.+2      	; 0xfcc <DIO_SetPinDirection+0x22>
     fca:	b5 c1       	rjmp	.+874    	; 0x1336 <DIO_SetPinDirection+0x38c>
     fcc:	8a 81       	ldd	r24, Y+2	; 0x02
     fce:	88 30       	cpi	r24, 0x08	; 8
     fd0:	08 f0       	brcs	.+2      	; 0xfd4 <DIO_SetPinDirection+0x2a>
     fd2:	b1 c1       	rjmp	.+866    	; 0x1336 <DIO_SetPinDirection+0x38c>
	{
		switch(Port)
     fd4:	89 81       	ldd	r24, Y+1	; 0x01
     fd6:	28 2f       	mov	r18, r24
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	3d 87       	std	Y+13, r19	; 0x0d
     fdc:	2c 87       	std	Y+12, r18	; 0x0c
     fde:	8c 85       	ldd	r24, Y+12	; 0x0c
     fe0:	9d 85       	ldd	r25, Y+13	; 0x0d
     fe2:	81 30       	cpi	r24, 0x01	; 1
     fe4:	91 05       	cpc	r25, r1
     fe6:	09 f4       	brne	.+2      	; 0xfea <DIO_SetPinDirection+0x40>
     fe8:	7b c0       	rjmp	.+246    	; 0x10e0 <DIO_SetPinDirection+0x136>
     fea:	2c 85       	ldd	r18, Y+12	; 0x0c
     fec:	3d 85       	ldd	r19, Y+13	; 0x0d
     fee:	22 30       	cpi	r18, 0x02	; 2
     ff0:	31 05       	cpc	r19, r1
     ff2:	2c f4       	brge	.+10     	; 0xffe <DIO_SetPinDirection+0x54>
     ff4:	8c 85       	ldd	r24, Y+12	; 0x0c
     ff6:	9d 85       	ldd	r25, Y+13	; 0x0d
     ff8:	00 97       	sbiw	r24, 0x00	; 0
     ffa:	71 f0       	breq	.+28     	; 0x1018 <DIO_SetPinDirection+0x6e>
     ffc:	9c c1       	rjmp	.+824    	; 0x1336 <DIO_SetPinDirection+0x38c>
     ffe:	2c 85       	ldd	r18, Y+12	; 0x0c
    1000:	3d 85       	ldd	r19, Y+13	; 0x0d
    1002:	22 30       	cpi	r18, 0x02	; 2
    1004:	31 05       	cpc	r19, r1
    1006:	09 f4       	brne	.+2      	; 0x100a <DIO_SetPinDirection+0x60>
    1008:	cf c0       	rjmp	.+414    	; 0x11a8 <DIO_SetPinDirection+0x1fe>
    100a:	8c 85       	ldd	r24, Y+12	; 0x0c
    100c:	9d 85       	ldd	r25, Y+13	; 0x0d
    100e:	83 30       	cpi	r24, 0x03	; 3
    1010:	91 05       	cpc	r25, r1
    1012:	09 f4       	brne	.+2      	; 0x1016 <DIO_SetPinDirection+0x6c>
    1014:	2d c1       	rjmp	.+602    	; 0x1270 <DIO_SetPinDirection+0x2c6>
    1016:	8f c1       	rjmp	.+798    	; 0x1336 <DIO_SetPinDirection+0x38c>
		{
		case PA:
			switch(direction)
    1018:	8b 81       	ldd	r24, Y+3	; 0x03
    101a:	28 2f       	mov	r18, r24
    101c:	30 e0       	ldi	r19, 0x00	; 0
    101e:	3b 87       	std	Y+11, r19	; 0x0b
    1020:	2a 87       	std	Y+10, r18	; 0x0a
    1022:	8a 85       	ldd	r24, Y+10	; 0x0a
    1024:	9b 85       	ldd	r25, Y+11	; 0x0b
    1026:	81 30       	cpi	r24, 0x01	; 1
    1028:	91 05       	cpc	r25, r1
    102a:	99 f1       	breq	.+102    	; 0x1092 <DIO_SetPinDirection+0xe8>
    102c:	2a 85       	ldd	r18, Y+10	; 0x0a
    102e:	3b 85       	ldd	r19, Y+11	; 0x0b
    1030:	22 30       	cpi	r18, 0x02	; 2
    1032:	31 05       	cpc	r19, r1
    1034:	29 f0       	breq	.+10     	; 0x1040 <DIO_SetPinDirection+0x96>
    1036:	8a 85       	ldd	r24, Y+10	; 0x0a
    1038:	9b 85       	ldd	r25, Y+11	; 0x0b
    103a:	00 97       	sbiw	r24, 0x00	; 0
    103c:	a9 f0       	breq	.+42     	; 0x1068 <DIO_SetPinDirection+0xbe>
    103e:	7b c1       	rjmp	.+758    	; 0x1336 <DIO_SetPinDirection+0x38c>
			{
			case OUT:
				SET_BIT(DDRA,Pin);
    1040:	aa e3       	ldi	r26, 0x3A	; 58
    1042:	b0 e0       	ldi	r27, 0x00	; 0
    1044:	ea e3       	ldi	r30, 0x3A	; 58
    1046:	f0 e0       	ldi	r31, 0x00	; 0
    1048:	80 81       	ld	r24, Z
    104a:	48 2f       	mov	r20, r24
    104c:	8a 81       	ldd	r24, Y+2	; 0x02
    104e:	28 2f       	mov	r18, r24
    1050:	30 e0       	ldi	r19, 0x00	; 0
    1052:	81 e0       	ldi	r24, 0x01	; 1
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	02 2e       	mov	r0, r18
    1058:	02 c0       	rjmp	.+4      	; 0x105e <DIO_SetPinDirection+0xb4>
    105a:	88 0f       	add	r24, r24
    105c:	99 1f       	adc	r25, r25
    105e:	0a 94       	dec	r0
    1060:	e2 f7       	brpl	.-8      	; 0x105a <DIO_SetPinDirection+0xb0>
    1062:	84 2b       	or	r24, r20
    1064:	8c 93       	st	X, r24
    1066:	67 c1       	rjmp	.+718    	; 0x1336 <DIO_SetPinDirection+0x38c>
				break;
			case INFREE:
				CLR_BIT(DDRA,Pin);
    1068:	aa e3       	ldi	r26, 0x3A	; 58
    106a:	b0 e0       	ldi	r27, 0x00	; 0
    106c:	ea e3       	ldi	r30, 0x3A	; 58
    106e:	f0 e0       	ldi	r31, 0x00	; 0
    1070:	80 81       	ld	r24, Z
    1072:	48 2f       	mov	r20, r24
    1074:	8a 81       	ldd	r24, Y+2	; 0x02
    1076:	28 2f       	mov	r18, r24
    1078:	30 e0       	ldi	r19, 0x00	; 0
    107a:	81 e0       	ldi	r24, 0x01	; 1
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	02 2e       	mov	r0, r18
    1080:	02 c0       	rjmp	.+4      	; 0x1086 <DIO_SetPinDirection+0xdc>
    1082:	88 0f       	add	r24, r24
    1084:	99 1f       	adc	r25, r25
    1086:	0a 94       	dec	r0
    1088:	e2 f7       	brpl	.-8      	; 0x1082 <DIO_SetPinDirection+0xd8>
    108a:	80 95       	com	r24
    108c:	84 23       	and	r24, r20
    108e:	8c 93       	st	X, r24
    1090:	52 c1       	rjmp	.+676    	; 0x1336 <DIO_SetPinDirection+0x38c>
				break;
			case INPULLUP:
				CLR_BIT(DDRA,Pin);
    1092:	aa e3       	ldi	r26, 0x3A	; 58
    1094:	b0 e0       	ldi	r27, 0x00	; 0
    1096:	ea e3       	ldi	r30, 0x3A	; 58
    1098:	f0 e0       	ldi	r31, 0x00	; 0
    109a:	80 81       	ld	r24, Z
    109c:	48 2f       	mov	r20, r24
    109e:	8a 81       	ldd	r24, Y+2	; 0x02
    10a0:	28 2f       	mov	r18, r24
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	81 e0       	ldi	r24, 0x01	; 1
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	02 c0       	rjmp	.+4      	; 0x10ae <DIO_SetPinDirection+0x104>
    10aa:	88 0f       	add	r24, r24
    10ac:	99 1f       	adc	r25, r25
    10ae:	2a 95       	dec	r18
    10b0:	e2 f7       	brpl	.-8      	; 0x10aa <DIO_SetPinDirection+0x100>
    10b2:	80 95       	com	r24
    10b4:	84 23       	and	r24, r20
    10b6:	8c 93       	st	X, r24
				SET_BIT(PORTA,Pin);
    10b8:	ab e3       	ldi	r26, 0x3B	; 59
    10ba:	b0 e0       	ldi	r27, 0x00	; 0
    10bc:	eb e3       	ldi	r30, 0x3B	; 59
    10be:	f0 e0       	ldi	r31, 0x00	; 0
    10c0:	80 81       	ld	r24, Z
    10c2:	48 2f       	mov	r20, r24
    10c4:	8a 81       	ldd	r24, Y+2	; 0x02
    10c6:	28 2f       	mov	r18, r24
    10c8:	30 e0       	ldi	r19, 0x00	; 0
    10ca:	81 e0       	ldi	r24, 0x01	; 1
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	02 2e       	mov	r0, r18
    10d0:	02 c0       	rjmp	.+4      	; 0x10d6 <DIO_SetPinDirection+0x12c>
    10d2:	88 0f       	add	r24, r24
    10d4:	99 1f       	adc	r25, r25
    10d6:	0a 94       	dec	r0
    10d8:	e2 f7       	brpl	.-8      	; 0x10d2 <DIO_SetPinDirection+0x128>
    10da:	84 2b       	or	r24, r20
    10dc:	8c 93       	st	X, r24
    10de:	2b c1       	rjmp	.+598    	; 0x1336 <DIO_SetPinDirection+0x38c>
				break;
			}
			break;
		case PB:
			switch(direction)
    10e0:	8b 81       	ldd	r24, Y+3	; 0x03
    10e2:	28 2f       	mov	r18, r24
    10e4:	30 e0       	ldi	r19, 0x00	; 0
    10e6:	39 87       	std	Y+9, r19	; 0x09
    10e8:	28 87       	std	Y+8, r18	; 0x08
    10ea:	88 85       	ldd	r24, Y+8	; 0x08
    10ec:	99 85       	ldd	r25, Y+9	; 0x09
    10ee:	81 30       	cpi	r24, 0x01	; 1
    10f0:	91 05       	cpc	r25, r1
    10f2:	99 f1       	breq	.+102    	; 0x115a <DIO_SetPinDirection+0x1b0>
    10f4:	28 85       	ldd	r18, Y+8	; 0x08
    10f6:	39 85       	ldd	r19, Y+9	; 0x09
    10f8:	22 30       	cpi	r18, 0x02	; 2
    10fa:	31 05       	cpc	r19, r1
    10fc:	29 f0       	breq	.+10     	; 0x1108 <DIO_SetPinDirection+0x15e>
    10fe:	88 85       	ldd	r24, Y+8	; 0x08
    1100:	99 85       	ldd	r25, Y+9	; 0x09
    1102:	00 97       	sbiw	r24, 0x00	; 0
    1104:	a9 f0       	breq	.+42     	; 0x1130 <DIO_SetPinDirection+0x186>
    1106:	17 c1       	rjmp	.+558    	; 0x1336 <DIO_SetPinDirection+0x38c>
			{
			case OUT:
				SET_BIT(DDRB,Pin);
    1108:	a7 e3       	ldi	r26, 0x37	; 55
    110a:	b0 e0       	ldi	r27, 0x00	; 0
    110c:	e7 e3       	ldi	r30, 0x37	; 55
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	80 81       	ld	r24, Z
    1112:	48 2f       	mov	r20, r24
    1114:	8a 81       	ldd	r24, Y+2	; 0x02
    1116:	28 2f       	mov	r18, r24
    1118:	30 e0       	ldi	r19, 0x00	; 0
    111a:	81 e0       	ldi	r24, 0x01	; 1
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	02 2e       	mov	r0, r18
    1120:	02 c0       	rjmp	.+4      	; 0x1126 <DIO_SetPinDirection+0x17c>
    1122:	88 0f       	add	r24, r24
    1124:	99 1f       	adc	r25, r25
    1126:	0a 94       	dec	r0
    1128:	e2 f7       	brpl	.-8      	; 0x1122 <DIO_SetPinDirection+0x178>
    112a:	84 2b       	or	r24, r20
    112c:	8c 93       	st	X, r24
    112e:	03 c1       	rjmp	.+518    	; 0x1336 <DIO_SetPinDirection+0x38c>
				break;
			case INFREE:
				CLR_BIT(DDRB,Pin);
    1130:	a7 e3       	ldi	r26, 0x37	; 55
    1132:	b0 e0       	ldi	r27, 0x00	; 0
    1134:	e7 e3       	ldi	r30, 0x37	; 55
    1136:	f0 e0       	ldi	r31, 0x00	; 0
    1138:	80 81       	ld	r24, Z
    113a:	48 2f       	mov	r20, r24
    113c:	8a 81       	ldd	r24, Y+2	; 0x02
    113e:	28 2f       	mov	r18, r24
    1140:	30 e0       	ldi	r19, 0x00	; 0
    1142:	81 e0       	ldi	r24, 0x01	; 1
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	02 2e       	mov	r0, r18
    1148:	02 c0       	rjmp	.+4      	; 0x114e <DIO_SetPinDirection+0x1a4>
    114a:	88 0f       	add	r24, r24
    114c:	99 1f       	adc	r25, r25
    114e:	0a 94       	dec	r0
    1150:	e2 f7       	brpl	.-8      	; 0x114a <DIO_SetPinDirection+0x1a0>
    1152:	80 95       	com	r24
    1154:	84 23       	and	r24, r20
    1156:	8c 93       	st	X, r24
    1158:	ee c0       	rjmp	.+476    	; 0x1336 <DIO_SetPinDirection+0x38c>
				break;
			case INPULLUP:
				CLR_BIT(DDRB,Pin);
    115a:	a7 e3       	ldi	r26, 0x37	; 55
    115c:	b0 e0       	ldi	r27, 0x00	; 0
    115e:	e7 e3       	ldi	r30, 0x37	; 55
    1160:	f0 e0       	ldi	r31, 0x00	; 0
    1162:	80 81       	ld	r24, Z
    1164:	48 2f       	mov	r20, r24
    1166:	8a 81       	ldd	r24, Y+2	; 0x02
    1168:	28 2f       	mov	r18, r24
    116a:	30 e0       	ldi	r19, 0x00	; 0
    116c:	81 e0       	ldi	r24, 0x01	; 1
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	02 c0       	rjmp	.+4      	; 0x1176 <DIO_SetPinDirection+0x1cc>
    1172:	88 0f       	add	r24, r24
    1174:	99 1f       	adc	r25, r25
    1176:	2a 95       	dec	r18
    1178:	e2 f7       	brpl	.-8      	; 0x1172 <DIO_SetPinDirection+0x1c8>
    117a:	80 95       	com	r24
    117c:	84 23       	and	r24, r20
    117e:	8c 93       	st	X, r24
				SET_BIT(PORTB,Pin);
    1180:	a8 e3       	ldi	r26, 0x38	; 56
    1182:	b0 e0       	ldi	r27, 0x00	; 0
    1184:	e8 e3       	ldi	r30, 0x38	; 56
    1186:	f0 e0       	ldi	r31, 0x00	; 0
    1188:	80 81       	ld	r24, Z
    118a:	48 2f       	mov	r20, r24
    118c:	8a 81       	ldd	r24, Y+2	; 0x02
    118e:	28 2f       	mov	r18, r24
    1190:	30 e0       	ldi	r19, 0x00	; 0
    1192:	81 e0       	ldi	r24, 0x01	; 1
    1194:	90 e0       	ldi	r25, 0x00	; 0
    1196:	02 2e       	mov	r0, r18
    1198:	02 c0       	rjmp	.+4      	; 0x119e <DIO_SetPinDirection+0x1f4>
    119a:	88 0f       	add	r24, r24
    119c:	99 1f       	adc	r25, r25
    119e:	0a 94       	dec	r0
    11a0:	e2 f7       	brpl	.-8      	; 0x119a <DIO_SetPinDirection+0x1f0>
    11a2:	84 2b       	or	r24, r20
    11a4:	8c 93       	st	X, r24
    11a6:	c7 c0       	rjmp	.+398    	; 0x1336 <DIO_SetPinDirection+0x38c>
				break;
			}
			break;
		case PC:
			switch(direction)
    11a8:	8b 81       	ldd	r24, Y+3	; 0x03
    11aa:	28 2f       	mov	r18, r24
    11ac:	30 e0       	ldi	r19, 0x00	; 0
    11ae:	3f 83       	std	Y+7, r19	; 0x07
    11b0:	2e 83       	std	Y+6, r18	; 0x06
    11b2:	8e 81       	ldd	r24, Y+6	; 0x06
    11b4:	9f 81       	ldd	r25, Y+7	; 0x07
    11b6:	81 30       	cpi	r24, 0x01	; 1
    11b8:	91 05       	cpc	r25, r1
    11ba:	99 f1       	breq	.+102    	; 0x1222 <DIO_SetPinDirection+0x278>
    11bc:	2e 81       	ldd	r18, Y+6	; 0x06
    11be:	3f 81       	ldd	r19, Y+7	; 0x07
    11c0:	22 30       	cpi	r18, 0x02	; 2
    11c2:	31 05       	cpc	r19, r1
    11c4:	29 f0       	breq	.+10     	; 0x11d0 <DIO_SetPinDirection+0x226>
    11c6:	8e 81       	ldd	r24, Y+6	; 0x06
    11c8:	9f 81       	ldd	r25, Y+7	; 0x07
    11ca:	00 97       	sbiw	r24, 0x00	; 0
    11cc:	a9 f0       	breq	.+42     	; 0x11f8 <DIO_SetPinDirection+0x24e>
    11ce:	b3 c0       	rjmp	.+358    	; 0x1336 <DIO_SetPinDirection+0x38c>
			{
			case OUT:
				SET_BIT(DDRC,Pin);
    11d0:	a4 e3       	ldi	r26, 0x34	; 52
    11d2:	b0 e0       	ldi	r27, 0x00	; 0
    11d4:	e4 e3       	ldi	r30, 0x34	; 52
    11d6:	f0 e0       	ldi	r31, 0x00	; 0
    11d8:	80 81       	ld	r24, Z
    11da:	48 2f       	mov	r20, r24
    11dc:	8a 81       	ldd	r24, Y+2	; 0x02
    11de:	28 2f       	mov	r18, r24
    11e0:	30 e0       	ldi	r19, 0x00	; 0
    11e2:	81 e0       	ldi	r24, 0x01	; 1
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	02 2e       	mov	r0, r18
    11e8:	02 c0       	rjmp	.+4      	; 0x11ee <DIO_SetPinDirection+0x244>
    11ea:	88 0f       	add	r24, r24
    11ec:	99 1f       	adc	r25, r25
    11ee:	0a 94       	dec	r0
    11f0:	e2 f7       	brpl	.-8      	; 0x11ea <DIO_SetPinDirection+0x240>
    11f2:	84 2b       	or	r24, r20
    11f4:	8c 93       	st	X, r24
    11f6:	9f c0       	rjmp	.+318    	; 0x1336 <DIO_SetPinDirection+0x38c>
				break;
			case INFREE:
				CLR_BIT(DDRC,Pin);
    11f8:	a4 e3       	ldi	r26, 0x34	; 52
    11fa:	b0 e0       	ldi	r27, 0x00	; 0
    11fc:	e4 e3       	ldi	r30, 0x34	; 52
    11fe:	f0 e0       	ldi	r31, 0x00	; 0
    1200:	80 81       	ld	r24, Z
    1202:	48 2f       	mov	r20, r24
    1204:	8a 81       	ldd	r24, Y+2	; 0x02
    1206:	28 2f       	mov	r18, r24
    1208:	30 e0       	ldi	r19, 0x00	; 0
    120a:	81 e0       	ldi	r24, 0x01	; 1
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	02 2e       	mov	r0, r18
    1210:	02 c0       	rjmp	.+4      	; 0x1216 <DIO_SetPinDirection+0x26c>
    1212:	88 0f       	add	r24, r24
    1214:	99 1f       	adc	r25, r25
    1216:	0a 94       	dec	r0
    1218:	e2 f7       	brpl	.-8      	; 0x1212 <DIO_SetPinDirection+0x268>
    121a:	80 95       	com	r24
    121c:	84 23       	and	r24, r20
    121e:	8c 93       	st	X, r24
    1220:	8a c0       	rjmp	.+276    	; 0x1336 <DIO_SetPinDirection+0x38c>
				break;
			case INPULLUP:
				CLR_BIT(DDRC,Pin);
    1222:	a4 e3       	ldi	r26, 0x34	; 52
    1224:	b0 e0       	ldi	r27, 0x00	; 0
    1226:	e4 e3       	ldi	r30, 0x34	; 52
    1228:	f0 e0       	ldi	r31, 0x00	; 0
    122a:	80 81       	ld	r24, Z
    122c:	48 2f       	mov	r20, r24
    122e:	8a 81       	ldd	r24, Y+2	; 0x02
    1230:	28 2f       	mov	r18, r24
    1232:	30 e0       	ldi	r19, 0x00	; 0
    1234:	81 e0       	ldi	r24, 0x01	; 1
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	02 c0       	rjmp	.+4      	; 0x123e <DIO_SetPinDirection+0x294>
    123a:	88 0f       	add	r24, r24
    123c:	99 1f       	adc	r25, r25
    123e:	2a 95       	dec	r18
    1240:	e2 f7       	brpl	.-8      	; 0x123a <DIO_SetPinDirection+0x290>
    1242:	80 95       	com	r24
    1244:	84 23       	and	r24, r20
    1246:	8c 93       	st	X, r24
				SET_BIT(PORTC,Pin);
    1248:	a5 e3       	ldi	r26, 0x35	; 53
    124a:	b0 e0       	ldi	r27, 0x00	; 0
    124c:	e5 e3       	ldi	r30, 0x35	; 53
    124e:	f0 e0       	ldi	r31, 0x00	; 0
    1250:	80 81       	ld	r24, Z
    1252:	48 2f       	mov	r20, r24
    1254:	8a 81       	ldd	r24, Y+2	; 0x02
    1256:	28 2f       	mov	r18, r24
    1258:	30 e0       	ldi	r19, 0x00	; 0
    125a:	81 e0       	ldi	r24, 0x01	; 1
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	02 2e       	mov	r0, r18
    1260:	02 c0       	rjmp	.+4      	; 0x1266 <DIO_SetPinDirection+0x2bc>
    1262:	88 0f       	add	r24, r24
    1264:	99 1f       	adc	r25, r25
    1266:	0a 94       	dec	r0
    1268:	e2 f7       	brpl	.-8      	; 0x1262 <DIO_SetPinDirection+0x2b8>
    126a:	84 2b       	or	r24, r20
    126c:	8c 93       	st	X, r24
    126e:	63 c0       	rjmp	.+198    	; 0x1336 <DIO_SetPinDirection+0x38c>
				break;
			}
			break;
		case PD:
			switch(direction)
    1270:	8b 81       	ldd	r24, Y+3	; 0x03
    1272:	28 2f       	mov	r18, r24
    1274:	30 e0       	ldi	r19, 0x00	; 0
    1276:	3d 83       	std	Y+5, r19	; 0x05
    1278:	2c 83       	std	Y+4, r18	; 0x04
    127a:	8c 81       	ldd	r24, Y+4	; 0x04
    127c:	9d 81       	ldd	r25, Y+5	; 0x05
    127e:	81 30       	cpi	r24, 0x01	; 1
    1280:	91 05       	cpc	r25, r1
    1282:	99 f1       	breq	.+102    	; 0x12ea <DIO_SetPinDirection+0x340>
    1284:	2c 81       	ldd	r18, Y+4	; 0x04
    1286:	3d 81       	ldd	r19, Y+5	; 0x05
    1288:	22 30       	cpi	r18, 0x02	; 2
    128a:	31 05       	cpc	r19, r1
    128c:	29 f0       	breq	.+10     	; 0x1298 <DIO_SetPinDirection+0x2ee>
    128e:	8c 81       	ldd	r24, Y+4	; 0x04
    1290:	9d 81       	ldd	r25, Y+5	; 0x05
    1292:	00 97       	sbiw	r24, 0x00	; 0
    1294:	a9 f0       	breq	.+42     	; 0x12c0 <DIO_SetPinDirection+0x316>
    1296:	4f c0       	rjmp	.+158    	; 0x1336 <DIO_SetPinDirection+0x38c>
			{
			case OUT:
				SET_BIT(DDRD,Pin);
    1298:	a1 e3       	ldi	r26, 0x31	; 49
    129a:	b0 e0       	ldi	r27, 0x00	; 0
    129c:	e1 e3       	ldi	r30, 0x31	; 49
    129e:	f0 e0       	ldi	r31, 0x00	; 0
    12a0:	80 81       	ld	r24, Z
    12a2:	48 2f       	mov	r20, r24
    12a4:	8a 81       	ldd	r24, Y+2	; 0x02
    12a6:	28 2f       	mov	r18, r24
    12a8:	30 e0       	ldi	r19, 0x00	; 0
    12aa:	81 e0       	ldi	r24, 0x01	; 1
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	02 2e       	mov	r0, r18
    12b0:	02 c0       	rjmp	.+4      	; 0x12b6 <DIO_SetPinDirection+0x30c>
    12b2:	88 0f       	add	r24, r24
    12b4:	99 1f       	adc	r25, r25
    12b6:	0a 94       	dec	r0
    12b8:	e2 f7       	brpl	.-8      	; 0x12b2 <DIO_SetPinDirection+0x308>
    12ba:	84 2b       	or	r24, r20
    12bc:	8c 93       	st	X, r24
    12be:	3b c0       	rjmp	.+118    	; 0x1336 <DIO_SetPinDirection+0x38c>
				break;
			case INFREE:
				CLR_BIT(DDRD,Pin);
    12c0:	a1 e3       	ldi	r26, 0x31	; 49
    12c2:	b0 e0       	ldi	r27, 0x00	; 0
    12c4:	e1 e3       	ldi	r30, 0x31	; 49
    12c6:	f0 e0       	ldi	r31, 0x00	; 0
    12c8:	80 81       	ld	r24, Z
    12ca:	48 2f       	mov	r20, r24
    12cc:	8a 81       	ldd	r24, Y+2	; 0x02
    12ce:	28 2f       	mov	r18, r24
    12d0:	30 e0       	ldi	r19, 0x00	; 0
    12d2:	81 e0       	ldi	r24, 0x01	; 1
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	02 2e       	mov	r0, r18
    12d8:	02 c0       	rjmp	.+4      	; 0x12de <DIO_SetPinDirection+0x334>
    12da:	88 0f       	add	r24, r24
    12dc:	99 1f       	adc	r25, r25
    12de:	0a 94       	dec	r0
    12e0:	e2 f7       	brpl	.-8      	; 0x12da <DIO_SetPinDirection+0x330>
    12e2:	80 95       	com	r24
    12e4:	84 23       	and	r24, r20
    12e6:	8c 93       	st	X, r24
    12e8:	26 c0       	rjmp	.+76     	; 0x1336 <DIO_SetPinDirection+0x38c>
				break;
			case INPULLUP:
				CLR_BIT(DDRD,Pin);
    12ea:	a1 e3       	ldi	r26, 0x31	; 49
    12ec:	b0 e0       	ldi	r27, 0x00	; 0
    12ee:	e1 e3       	ldi	r30, 0x31	; 49
    12f0:	f0 e0       	ldi	r31, 0x00	; 0
    12f2:	80 81       	ld	r24, Z
    12f4:	48 2f       	mov	r20, r24
    12f6:	8a 81       	ldd	r24, Y+2	; 0x02
    12f8:	28 2f       	mov	r18, r24
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	02 c0       	rjmp	.+4      	; 0x1306 <DIO_SetPinDirection+0x35c>
    1302:	88 0f       	add	r24, r24
    1304:	99 1f       	adc	r25, r25
    1306:	2a 95       	dec	r18
    1308:	e2 f7       	brpl	.-8      	; 0x1302 <DIO_SetPinDirection+0x358>
    130a:	80 95       	com	r24
    130c:	84 23       	and	r24, r20
    130e:	8c 93       	st	X, r24
				SET_BIT(PORTD,Pin);
    1310:	a2 e3       	ldi	r26, 0x32	; 50
    1312:	b0 e0       	ldi	r27, 0x00	; 0
    1314:	e2 e3       	ldi	r30, 0x32	; 50
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	80 81       	ld	r24, Z
    131a:	48 2f       	mov	r20, r24
    131c:	8a 81       	ldd	r24, Y+2	; 0x02
    131e:	28 2f       	mov	r18, r24
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	81 e0       	ldi	r24, 0x01	; 1
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	02 2e       	mov	r0, r18
    1328:	02 c0       	rjmp	.+4      	; 0x132e <DIO_SetPinDirection+0x384>
    132a:	88 0f       	add	r24, r24
    132c:	99 1f       	adc	r25, r25
    132e:	0a 94       	dec	r0
    1330:	e2 f7       	brpl	.-8      	; 0x132a <DIO_SetPinDirection+0x380>
    1332:	84 2b       	or	r24, r20
    1334:	8c 93       	st	X, r24
		}
	}
	else{

	}
}
    1336:	2d 96       	adiw	r28, 0x0d	; 13
    1338:	0f b6       	in	r0, 0x3f	; 63
    133a:	f8 94       	cli
    133c:	de bf       	out	0x3e, r29	; 62
    133e:	0f be       	out	0x3f, r0	; 63
    1340:	cd bf       	out	0x3d, r28	; 61
    1342:	cf 91       	pop	r28
    1344:	df 91       	pop	r29
    1346:	08 95       	ret

00001348 <DIO_SetPortDirection>:


extern void DIO_SetPortDirection(PortID_t Port, uint8 direction)
{
    1348:	df 93       	push	r29
    134a:	cf 93       	push	r28
    134c:	00 d0       	rcall	.+0      	; 0x134e <DIO_SetPortDirection+0x6>
    134e:	00 d0       	rcall	.+0      	; 0x1350 <DIO_SetPortDirection+0x8>
    1350:	cd b7       	in	r28, 0x3d	; 61
    1352:	de b7       	in	r29, 0x3e	; 62
    1354:	89 83       	std	Y+1, r24	; 0x01
    1356:	6a 83       	std	Y+2, r22	; 0x02
	if(Port <= PD)
    1358:	89 81       	ldd	r24, Y+1	; 0x01
    135a:	84 30       	cpi	r24, 0x04	; 4
    135c:	90 f5       	brcc	.+100    	; 0x13c2 <DIO_SetPortDirection+0x7a>
	{
		switch(Port)
    135e:	89 81       	ldd	r24, Y+1	; 0x01
    1360:	28 2f       	mov	r18, r24
    1362:	30 e0       	ldi	r19, 0x00	; 0
    1364:	3c 83       	std	Y+4, r19	; 0x04
    1366:	2b 83       	std	Y+3, r18	; 0x03
    1368:	8b 81       	ldd	r24, Y+3	; 0x03
    136a:	9c 81       	ldd	r25, Y+4	; 0x04
    136c:	81 30       	cpi	r24, 0x01	; 1
    136e:	91 05       	cpc	r25, r1
    1370:	d1 f0       	breq	.+52     	; 0x13a6 <DIO_SetPortDirection+0x5e>
    1372:	2b 81       	ldd	r18, Y+3	; 0x03
    1374:	3c 81       	ldd	r19, Y+4	; 0x04
    1376:	22 30       	cpi	r18, 0x02	; 2
    1378:	31 05       	cpc	r19, r1
    137a:	2c f4       	brge	.+10     	; 0x1386 <DIO_SetPortDirection+0x3e>
    137c:	8b 81       	ldd	r24, Y+3	; 0x03
    137e:	9c 81       	ldd	r25, Y+4	; 0x04
    1380:	00 97       	sbiw	r24, 0x00	; 0
    1382:	61 f0       	breq	.+24     	; 0x139c <DIO_SetPortDirection+0x54>
    1384:	1e c0       	rjmp	.+60     	; 0x13c2 <DIO_SetPortDirection+0x7a>
    1386:	2b 81       	ldd	r18, Y+3	; 0x03
    1388:	3c 81       	ldd	r19, Y+4	; 0x04
    138a:	22 30       	cpi	r18, 0x02	; 2
    138c:	31 05       	cpc	r19, r1
    138e:	81 f0       	breq	.+32     	; 0x13b0 <DIO_SetPortDirection+0x68>
    1390:	8b 81       	ldd	r24, Y+3	; 0x03
    1392:	9c 81       	ldd	r25, Y+4	; 0x04
    1394:	83 30       	cpi	r24, 0x03	; 3
    1396:	91 05       	cpc	r25, r1
    1398:	81 f0       	breq	.+32     	; 0x13ba <DIO_SetPortDirection+0x72>
    139a:	13 c0       	rjmp	.+38     	; 0x13c2 <DIO_SetPortDirection+0x7a>
		{
		case PA:
			DDRA=direction;
    139c:	ea e3       	ldi	r30, 0x3A	; 58
    139e:	f0 e0       	ldi	r31, 0x00	; 0
    13a0:	8a 81       	ldd	r24, Y+2	; 0x02
    13a2:	80 83       	st	Z, r24
    13a4:	0e c0       	rjmp	.+28     	; 0x13c2 <DIO_SetPortDirection+0x7a>
			break;
		case PB:
			DDRB=direction;
    13a6:	e7 e3       	ldi	r30, 0x37	; 55
    13a8:	f0 e0       	ldi	r31, 0x00	; 0
    13aa:	8a 81       	ldd	r24, Y+2	; 0x02
    13ac:	80 83       	st	Z, r24
    13ae:	09 c0       	rjmp	.+18     	; 0x13c2 <DIO_SetPortDirection+0x7a>
			break;
		case PC:
			DDRC=direction;
    13b0:	e4 e3       	ldi	r30, 0x34	; 52
    13b2:	f0 e0       	ldi	r31, 0x00	; 0
    13b4:	8a 81       	ldd	r24, Y+2	; 0x02
    13b6:	80 83       	st	Z, r24
    13b8:	04 c0       	rjmp	.+8      	; 0x13c2 <DIO_SetPortDirection+0x7a>
			break;
		case PD:
			DDRD=direction;
    13ba:	e1 e3       	ldi	r30, 0x31	; 49
    13bc:	f0 e0       	ldi	r31, 0x00	; 0
    13be:	8a 81       	ldd	r24, Y+2	; 0x02
    13c0:	80 83       	st	Z, r24
		}
	}
	else{

	}
}
    13c2:	0f 90       	pop	r0
    13c4:	0f 90       	pop	r0
    13c6:	0f 90       	pop	r0
    13c8:	0f 90       	pop	r0
    13ca:	cf 91       	pop	r28
    13cc:	df 91       	pop	r29
    13ce:	08 95       	ret

000013d0 <DIO_WriteOnPin>:


extern void DIO_WriteOnPin(PortID_t Port, PinID_t Pin, uint8 value)
{
    13d0:	df 93       	push	r29
    13d2:	cf 93       	push	r28
    13d4:	00 d0       	rcall	.+0      	; 0x13d6 <DIO_WriteOnPin+0x6>
    13d6:	00 d0       	rcall	.+0      	; 0x13d8 <DIO_WriteOnPin+0x8>
    13d8:	0f 92       	push	r0
    13da:	cd b7       	in	r28, 0x3d	; 61
    13dc:	de b7       	in	r29, 0x3e	; 62
    13de:	89 83       	std	Y+1, r24	; 0x01
    13e0:	6a 83       	std	Y+2, r22	; 0x02
    13e2:	4b 83       	std	Y+3, r20	; 0x03
	if((Port <= PD) && (Pin <= PIN7))
    13e4:	89 81       	ldd	r24, Y+1	; 0x01
    13e6:	84 30       	cpi	r24, 0x04	; 4
    13e8:	08 f0       	brcs	.+2      	; 0x13ec <DIO_WriteOnPin+0x1c>
    13ea:	d5 c0       	rjmp	.+426    	; 0x1596 <DIO_WriteOnPin+0x1c6>
    13ec:	8a 81       	ldd	r24, Y+2	; 0x02
    13ee:	88 30       	cpi	r24, 0x08	; 8
    13f0:	08 f0       	brcs	.+2      	; 0x13f4 <DIO_WriteOnPin+0x24>
    13f2:	d1 c0       	rjmp	.+418    	; 0x1596 <DIO_WriteOnPin+0x1c6>
	{
		switch(Port)
    13f4:	89 81       	ldd	r24, Y+1	; 0x01
    13f6:	28 2f       	mov	r18, r24
    13f8:	30 e0       	ldi	r19, 0x00	; 0
    13fa:	3d 83       	std	Y+5, r19	; 0x05
    13fc:	2c 83       	std	Y+4, r18	; 0x04
    13fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1400:	9d 81       	ldd	r25, Y+5	; 0x05
    1402:	81 30       	cpi	r24, 0x01	; 1
    1404:	91 05       	cpc	r25, r1
    1406:	09 f4       	brne	.+2      	; 0x140a <DIO_WriteOnPin+0x3a>
    1408:	43 c0       	rjmp	.+134    	; 0x1490 <DIO_WriteOnPin+0xc0>
    140a:	2c 81       	ldd	r18, Y+4	; 0x04
    140c:	3d 81       	ldd	r19, Y+5	; 0x05
    140e:	22 30       	cpi	r18, 0x02	; 2
    1410:	31 05       	cpc	r19, r1
    1412:	2c f4       	brge	.+10     	; 0x141e <DIO_WriteOnPin+0x4e>
    1414:	8c 81       	ldd	r24, Y+4	; 0x04
    1416:	9d 81       	ldd	r25, Y+5	; 0x05
    1418:	00 97       	sbiw	r24, 0x00	; 0
    141a:	71 f0       	breq	.+28     	; 0x1438 <DIO_WriteOnPin+0x68>
    141c:	bc c0       	rjmp	.+376    	; 0x1596 <DIO_WriteOnPin+0x1c6>
    141e:	2c 81       	ldd	r18, Y+4	; 0x04
    1420:	3d 81       	ldd	r19, Y+5	; 0x05
    1422:	22 30       	cpi	r18, 0x02	; 2
    1424:	31 05       	cpc	r19, r1
    1426:	09 f4       	brne	.+2      	; 0x142a <DIO_WriteOnPin+0x5a>
    1428:	5f c0       	rjmp	.+190    	; 0x14e8 <DIO_WriteOnPin+0x118>
    142a:	8c 81       	ldd	r24, Y+4	; 0x04
    142c:	9d 81       	ldd	r25, Y+5	; 0x05
    142e:	83 30       	cpi	r24, 0x03	; 3
    1430:	91 05       	cpc	r25, r1
    1432:	09 f4       	brne	.+2      	; 0x1436 <DIO_WriteOnPin+0x66>
    1434:	85 c0       	rjmp	.+266    	; 0x1540 <DIO_WriteOnPin+0x170>
    1436:	af c0       	rjmp	.+350    	; 0x1596 <DIO_WriteOnPin+0x1c6>
		{
		case PA:
			if(value == HIGHV)
    1438:	8b 81       	ldd	r24, Y+3	; 0x03
    143a:	81 30       	cpi	r24, 0x01	; 1
    143c:	a1 f4       	brne	.+40     	; 0x1466 <DIO_WriteOnPin+0x96>
			{
				SET_BIT(PORTA,Pin);
    143e:	ab e3       	ldi	r26, 0x3B	; 59
    1440:	b0 e0       	ldi	r27, 0x00	; 0
    1442:	eb e3       	ldi	r30, 0x3B	; 59
    1444:	f0 e0       	ldi	r31, 0x00	; 0
    1446:	80 81       	ld	r24, Z
    1448:	48 2f       	mov	r20, r24
    144a:	8a 81       	ldd	r24, Y+2	; 0x02
    144c:	28 2f       	mov	r18, r24
    144e:	30 e0       	ldi	r19, 0x00	; 0
    1450:	81 e0       	ldi	r24, 0x01	; 1
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	02 2e       	mov	r0, r18
    1456:	02 c0       	rjmp	.+4      	; 0x145c <DIO_WriteOnPin+0x8c>
    1458:	88 0f       	add	r24, r24
    145a:	99 1f       	adc	r25, r25
    145c:	0a 94       	dec	r0
    145e:	e2 f7       	brpl	.-8      	; 0x1458 <DIO_WriteOnPin+0x88>
    1460:	84 2b       	or	r24, r20
    1462:	8c 93       	st	X, r24
    1464:	98 c0       	rjmp	.+304    	; 0x1596 <DIO_WriteOnPin+0x1c6>
			}
			else
			{
				CLR_BIT(PORTA,Pin);
    1466:	ab e3       	ldi	r26, 0x3B	; 59
    1468:	b0 e0       	ldi	r27, 0x00	; 0
    146a:	eb e3       	ldi	r30, 0x3B	; 59
    146c:	f0 e0       	ldi	r31, 0x00	; 0
    146e:	80 81       	ld	r24, Z
    1470:	48 2f       	mov	r20, r24
    1472:	8a 81       	ldd	r24, Y+2	; 0x02
    1474:	28 2f       	mov	r18, r24
    1476:	30 e0       	ldi	r19, 0x00	; 0
    1478:	81 e0       	ldi	r24, 0x01	; 1
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	02 2e       	mov	r0, r18
    147e:	02 c0       	rjmp	.+4      	; 0x1484 <DIO_WriteOnPin+0xb4>
    1480:	88 0f       	add	r24, r24
    1482:	99 1f       	adc	r25, r25
    1484:	0a 94       	dec	r0
    1486:	e2 f7       	brpl	.-8      	; 0x1480 <DIO_WriteOnPin+0xb0>
    1488:	80 95       	com	r24
    148a:	84 23       	and	r24, r20
    148c:	8c 93       	st	X, r24
    148e:	83 c0       	rjmp	.+262    	; 0x1596 <DIO_WriteOnPin+0x1c6>
			}
			break;

		case PB:
			if(value == HIGHV)
    1490:	8b 81       	ldd	r24, Y+3	; 0x03
    1492:	81 30       	cpi	r24, 0x01	; 1
    1494:	a1 f4       	brne	.+40     	; 0x14be <DIO_WriteOnPin+0xee>
			{
				SET_BIT(PORTB,Pin);
    1496:	a8 e3       	ldi	r26, 0x38	; 56
    1498:	b0 e0       	ldi	r27, 0x00	; 0
    149a:	e8 e3       	ldi	r30, 0x38	; 56
    149c:	f0 e0       	ldi	r31, 0x00	; 0
    149e:	80 81       	ld	r24, Z
    14a0:	48 2f       	mov	r20, r24
    14a2:	8a 81       	ldd	r24, Y+2	; 0x02
    14a4:	28 2f       	mov	r18, r24
    14a6:	30 e0       	ldi	r19, 0x00	; 0
    14a8:	81 e0       	ldi	r24, 0x01	; 1
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	02 2e       	mov	r0, r18
    14ae:	02 c0       	rjmp	.+4      	; 0x14b4 <DIO_WriteOnPin+0xe4>
    14b0:	88 0f       	add	r24, r24
    14b2:	99 1f       	adc	r25, r25
    14b4:	0a 94       	dec	r0
    14b6:	e2 f7       	brpl	.-8      	; 0x14b0 <DIO_WriteOnPin+0xe0>
    14b8:	84 2b       	or	r24, r20
    14ba:	8c 93       	st	X, r24
    14bc:	6c c0       	rjmp	.+216    	; 0x1596 <DIO_WriteOnPin+0x1c6>
			}
			else
			{
				CLR_BIT(PORTB,Pin);
    14be:	a8 e3       	ldi	r26, 0x38	; 56
    14c0:	b0 e0       	ldi	r27, 0x00	; 0
    14c2:	e8 e3       	ldi	r30, 0x38	; 56
    14c4:	f0 e0       	ldi	r31, 0x00	; 0
    14c6:	80 81       	ld	r24, Z
    14c8:	48 2f       	mov	r20, r24
    14ca:	8a 81       	ldd	r24, Y+2	; 0x02
    14cc:	28 2f       	mov	r18, r24
    14ce:	30 e0       	ldi	r19, 0x00	; 0
    14d0:	81 e0       	ldi	r24, 0x01	; 1
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	02 2e       	mov	r0, r18
    14d6:	02 c0       	rjmp	.+4      	; 0x14dc <DIO_WriteOnPin+0x10c>
    14d8:	88 0f       	add	r24, r24
    14da:	99 1f       	adc	r25, r25
    14dc:	0a 94       	dec	r0
    14de:	e2 f7       	brpl	.-8      	; 0x14d8 <DIO_WriteOnPin+0x108>
    14e0:	80 95       	com	r24
    14e2:	84 23       	and	r24, r20
    14e4:	8c 93       	st	X, r24
    14e6:	57 c0       	rjmp	.+174    	; 0x1596 <DIO_WriteOnPin+0x1c6>
			}
			break;

		case PC:
			if(value == HIGHV)
    14e8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ea:	81 30       	cpi	r24, 0x01	; 1
    14ec:	a1 f4       	brne	.+40     	; 0x1516 <DIO_WriteOnPin+0x146>
			{
				SET_BIT(PORTC,Pin);
    14ee:	a5 e3       	ldi	r26, 0x35	; 53
    14f0:	b0 e0       	ldi	r27, 0x00	; 0
    14f2:	e5 e3       	ldi	r30, 0x35	; 53
    14f4:	f0 e0       	ldi	r31, 0x00	; 0
    14f6:	80 81       	ld	r24, Z
    14f8:	48 2f       	mov	r20, r24
    14fa:	8a 81       	ldd	r24, Y+2	; 0x02
    14fc:	28 2f       	mov	r18, r24
    14fe:	30 e0       	ldi	r19, 0x00	; 0
    1500:	81 e0       	ldi	r24, 0x01	; 1
    1502:	90 e0       	ldi	r25, 0x00	; 0
    1504:	02 2e       	mov	r0, r18
    1506:	02 c0       	rjmp	.+4      	; 0x150c <DIO_WriteOnPin+0x13c>
    1508:	88 0f       	add	r24, r24
    150a:	99 1f       	adc	r25, r25
    150c:	0a 94       	dec	r0
    150e:	e2 f7       	brpl	.-8      	; 0x1508 <DIO_WriteOnPin+0x138>
    1510:	84 2b       	or	r24, r20
    1512:	8c 93       	st	X, r24
    1514:	40 c0       	rjmp	.+128    	; 0x1596 <DIO_WriteOnPin+0x1c6>
			}
			else
			{
				CLR_BIT(PORTC,Pin);
    1516:	a5 e3       	ldi	r26, 0x35	; 53
    1518:	b0 e0       	ldi	r27, 0x00	; 0
    151a:	e5 e3       	ldi	r30, 0x35	; 53
    151c:	f0 e0       	ldi	r31, 0x00	; 0
    151e:	80 81       	ld	r24, Z
    1520:	48 2f       	mov	r20, r24
    1522:	8a 81       	ldd	r24, Y+2	; 0x02
    1524:	28 2f       	mov	r18, r24
    1526:	30 e0       	ldi	r19, 0x00	; 0
    1528:	81 e0       	ldi	r24, 0x01	; 1
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	02 2e       	mov	r0, r18
    152e:	02 c0       	rjmp	.+4      	; 0x1534 <DIO_WriteOnPin+0x164>
    1530:	88 0f       	add	r24, r24
    1532:	99 1f       	adc	r25, r25
    1534:	0a 94       	dec	r0
    1536:	e2 f7       	brpl	.-8      	; 0x1530 <DIO_WriteOnPin+0x160>
    1538:	80 95       	com	r24
    153a:	84 23       	and	r24, r20
    153c:	8c 93       	st	X, r24
    153e:	2b c0       	rjmp	.+86     	; 0x1596 <DIO_WriteOnPin+0x1c6>
			}
			break;

		case PD:
			if(value == HIGHV)
    1540:	8b 81       	ldd	r24, Y+3	; 0x03
    1542:	81 30       	cpi	r24, 0x01	; 1
    1544:	a1 f4       	brne	.+40     	; 0x156e <DIO_WriteOnPin+0x19e>
			{
				SET_BIT(PORTD,Pin);
    1546:	a2 e3       	ldi	r26, 0x32	; 50
    1548:	b0 e0       	ldi	r27, 0x00	; 0
    154a:	e2 e3       	ldi	r30, 0x32	; 50
    154c:	f0 e0       	ldi	r31, 0x00	; 0
    154e:	80 81       	ld	r24, Z
    1550:	48 2f       	mov	r20, r24
    1552:	8a 81       	ldd	r24, Y+2	; 0x02
    1554:	28 2f       	mov	r18, r24
    1556:	30 e0       	ldi	r19, 0x00	; 0
    1558:	81 e0       	ldi	r24, 0x01	; 1
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	02 2e       	mov	r0, r18
    155e:	02 c0       	rjmp	.+4      	; 0x1564 <DIO_WriteOnPin+0x194>
    1560:	88 0f       	add	r24, r24
    1562:	99 1f       	adc	r25, r25
    1564:	0a 94       	dec	r0
    1566:	e2 f7       	brpl	.-8      	; 0x1560 <DIO_WriteOnPin+0x190>
    1568:	84 2b       	or	r24, r20
    156a:	8c 93       	st	X, r24
    156c:	14 c0       	rjmp	.+40     	; 0x1596 <DIO_WriteOnPin+0x1c6>
			}
			else
			{
				CLR_BIT(PORTD,Pin);
    156e:	a2 e3       	ldi	r26, 0x32	; 50
    1570:	b0 e0       	ldi	r27, 0x00	; 0
    1572:	e2 e3       	ldi	r30, 0x32	; 50
    1574:	f0 e0       	ldi	r31, 0x00	; 0
    1576:	80 81       	ld	r24, Z
    1578:	48 2f       	mov	r20, r24
    157a:	8a 81       	ldd	r24, Y+2	; 0x02
    157c:	28 2f       	mov	r18, r24
    157e:	30 e0       	ldi	r19, 0x00	; 0
    1580:	81 e0       	ldi	r24, 0x01	; 1
    1582:	90 e0       	ldi	r25, 0x00	; 0
    1584:	02 2e       	mov	r0, r18
    1586:	02 c0       	rjmp	.+4      	; 0x158c <DIO_WriteOnPin+0x1bc>
    1588:	88 0f       	add	r24, r24
    158a:	99 1f       	adc	r25, r25
    158c:	0a 94       	dec	r0
    158e:	e2 f7       	brpl	.-8      	; 0x1588 <DIO_WriteOnPin+0x1b8>
    1590:	80 95       	com	r24
    1592:	84 23       	and	r24, r20
    1594:	8c 93       	st	X, r24
		}
	}
	else{

	}
}
    1596:	0f 90       	pop	r0
    1598:	0f 90       	pop	r0
    159a:	0f 90       	pop	r0
    159c:	0f 90       	pop	r0
    159e:	0f 90       	pop	r0
    15a0:	cf 91       	pop	r28
    15a2:	df 91       	pop	r29
    15a4:	08 95       	ret

000015a6 <DIO_WriteOnPort>:


extern void DIO_WriteOnPort(PortID_t Port, uint8 value)
{
    15a6:	df 93       	push	r29
    15a8:	cf 93       	push	r28
    15aa:	00 d0       	rcall	.+0      	; 0x15ac <DIO_WriteOnPort+0x6>
    15ac:	00 d0       	rcall	.+0      	; 0x15ae <DIO_WriteOnPort+0x8>
    15ae:	cd b7       	in	r28, 0x3d	; 61
    15b0:	de b7       	in	r29, 0x3e	; 62
    15b2:	89 83       	std	Y+1, r24	; 0x01
    15b4:	6a 83       	std	Y+2, r22	; 0x02
	if(Port <= PD)
    15b6:	89 81       	ldd	r24, Y+1	; 0x01
    15b8:	84 30       	cpi	r24, 0x04	; 4
    15ba:	90 f5       	brcc	.+100    	; 0x1620 <DIO_WriteOnPort+0x7a>
	{
		switch(Port)
    15bc:	89 81       	ldd	r24, Y+1	; 0x01
    15be:	28 2f       	mov	r18, r24
    15c0:	30 e0       	ldi	r19, 0x00	; 0
    15c2:	3c 83       	std	Y+4, r19	; 0x04
    15c4:	2b 83       	std	Y+3, r18	; 0x03
    15c6:	8b 81       	ldd	r24, Y+3	; 0x03
    15c8:	9c 81       	ldd	r25, Y+4	; 0x04
    15ca:	81 30       	cpi	r24, 0x01	; 1
    15cc:	91 05       	cpc	r25, r1
    15ce:	d1 f0       	breq	.+52     	; 0x1604 <DIO_WriteOnPort+0x5e>
    15d0:	2b 81       	ldd	r18, Y+3	; 0x03
    15d2:	3c 81       	ldd	r19, Y+4	; 0x04
    15d4:	22 30       	cpi	r18, 0x02	; 2
    15d6:	31 05       	cpc	r19, r1
    15d8:	2c f4       	brge	.+10     	; 0x15e4 <DIO_WriteOnPort+0x3e>
    15da:	8b 81       	ldd	r24, Y+3	; 0x03
    15dc:	9c 81       	ldd	r25, Y+4	; 0x04
    15de:	00 97       	sbiw	r24, 0x00	; 0
    15e0:	61 f0       	breq	.+24     	; 0x15fa <DIO_WriteOnPort+0x54>
    15e2:	1e c0       	rjmp	.+60     	; 0x1620 <DIO_WriteOnPort+0x7a>
    15e4:	2b 81       	ldd	r18, Y+3	; 0x03
    15e6:	3c 81       	ldd	r19, Y+4	; 0x04
    15e8:	22 30       	cpi	r18, 0x02	; 2
    15ea:	31 05       	cpc	r19, r1
    15ec:	81 f0       	breq	.+32     	; 0x160e <DIO_WriteOnPort+0x68>
    15ee:	8b 81       	ldd	r24, Y+3	; 0x03
    15f0:	9c 81       	ldd	r25, Y+4	; 0x04
    15f2:	83 30       	cpi	r24, 0x03	; 3
    15f4:	91 05       	cpc	r25, r1
    15f6:	81 f0       	breq	.+32     	; 0x1618 <DIO_WriteOnPort+0x72>
    15f8:	13 c0       	rjmp	.+38     	; 0x1620 <DIO_WriteOnPort+0x7a>
		{
		case PA:
			PORTA=value;
    15fa:	eb e3       	ldi	r30, 0x3B	; 59
    15fc:	f0 e0       	ldi	r31, 0x00	; 0
    15fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1600:	80 83       	st	Z, r24
    1602:	0e c0       	rjmp	.+28     	; 0x1620 <DIO_WriteOnPort+0x7a>
			break;

		case PB:
			PORTB=value;
    1604:	e8 e3       	ldi	r30, 0x38	; 56
    1606:	f0 e0       	ldi	r31, 0x00	; 0
    1608:	8a 81       	ldd	r24, Y+2	; 0x02
    160a:	80 83       	st	Z, r24
    160c:	09 c0       	rjmp	.+18     	; 0x1620 <DIO_WriteOnPort+0x7a>
			break;

		case PC:
			PORTC=value;
    160e:	e5 e3       	ldi	r30, 0x35	; 53
    1610:	f0 e0       	ldi	r31, 0x00	; 0
    1612:	8a 81       	ldd	r24, Y+2	; 0x02
    1614:	80 83       	st	Z, r24
    1616:	04 c0       	rjmp	.+8      	; 0x1620 <DIO_WriteOnPort+0x7a>
			break;

		case PD:
			PORTD=value;
    1618:	e2 e3       	ldi	r30, 0x32	; 50
    161a:	f0 e0       	ldi	r31, 0x00	; 0
    161c:	8a 81       	ldd	r24, Y+2	; 0x02
    161e:	80 83       	st	Z, r24
		}
	}
	else{

	}
}
    1620:	0f 90       	pop	r0
    1622:	0f 90       	pop	r0
    1624:	0f 90       	pop	r0
    1626:	0f 90       	pop	r0
    1628:	cf 91       	pop	r28
    162a:	df 91       	pop	r29
    162c:	08 95       	ret

0000162e <DIO_ReadFromPin>:


extern uint8 DIO_ReadFromPin(PortID_t Port, PinID_t Pin)
{
    162e:	df 93       	push	r29
    1630:	cf 93       	push	r28
    1632:	00 d0       	rcall	.+0      	; 0x1634 <DIO_ReadFromPin+0x6>
    1634:	00 d0       	rcall	.+0      	; 0x1636 <DIO_ReadFromPin+0x8>
    1636:	0f 92       	push	r0
    1638:	cd b7       	in	r28, 0x3d	; 61
    163a:	de b7       	in	r29, 0x3e	; 62
    163c:	8a 83       	std	Y+2, r24	; 0x02
    163e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 result = 0;
    1640:	19 82       	std	Y+1, r1	; 0x01

	if((Port <= PD) && (Pin <= PIN7))
    1642:	8a 81       	ldd	r24, Y+2	; 0x02
    1644:	84 30       	cpi	r24, 0x04	; 4
    1646:	08 f0       	brcs	.+2      	; 0x164a <DIO_ReadFromPin+0x1c>
    1648:	9d c0       	rjmp	.+314    	; 0x1784 <DIO_ReadFromPin+0x156>
    164a:	8b 81       	ldd	r24, Y+3	; 0x03
    164c:	88 30       	cpi	r24, 0x08	; 8
    164e:	08 f0       	brcs	.+2      	; 0x1652 <DIO_ReadFromPin+0x24>
    1650:	99 c0       	rjmp	.+306    	; 0x1784 <DIO_ReadFromPin+0x156>
	{
		switch(Port)
    1652:	8a 81       	ldd	r24, Y+2	; 0x02
    1654:	28 2f       	mov	r18, r24
    1656:	30 e0       	ldi	r19, 0x00	; 0
    1658:	3d 83       	std	Y+5, r19	; 0x05
    165a:	2c 83       	std	Y+4, r18	; 0x04
    165c:	4c 81       	ldd	r20, Y+4	; 0x04
    165e:	5d 81       	ldd	r21, Y+5	; 0x05
    1660:	41 30       	cpi	r20, 0x01	; 1
    1662:	51 05       	cpc	r21, r1
    1664:	b1 f1       	breq	.+108    	; 0x16d2 <DIO_ReadFromPin+0xa4>
    1666:	8c 81       	ldd	r24, Y+4	; 0x04
    1668:	9d 81       	ldd	r25, Y+5	; 0x05
    166a:	82 30       	cpi	r24, 0x02	; 2
    166c:	91 05       	cpc	r25, r1
    166e:	34 f4       	brge	.+12     	; 0x167c <DIO_ReadFromPin+0x4e>
    1670:	2c 81       	ldd	r18, Y+4	; 0x04
    1672:	3d 81       	ldd	r19, Y+5	; 0x05
    1674:	21 15       	cp	r18, r1
    1676:	31 05       	cpc	r19, r1
    1678:	71 f0       	breq	.+28     	; 0x1696 <DIO_ReadFromPin+0x68>
    167a:	84 c0       	rjmp	.+264    	; 0x1784 <DIO_ReadFromPin+0x156>
    167c:	4c 81       	ldd	r20, Y+4	; 0x04
    167e:	5d 81       	ldd	r21, Y+5	; 0x05
    1680:	42 30       	cpi	r20, 0x02	; 2
    1682:	51 05       	cpc	r21, r1
    1684:	09 f4       	brne	.+2      	; 0x1688 <DIO_ReadFromPin+0x5a>
    1686:	43 c0       	rjmp	.+134    	; 0x170e <DIO_ReadFromPin+0xe0>
    1688:	8c 81       	ldd	r24, Y+4	; 0x04
    168a:	9d 81       	ldd	r25, Y+5	; 0x05
    168c:	83 30       	cpi	r24, 0x03	; 3
    168e:	91 05       	cpc	r25, r1
    1690:	09 f4       	brne	.+2      	; 0x1694 <DIO_ReadFromPin+0x66>
    1692:	5b c0       	rjmp	.+182    	; 0x174a <DIO_ReadFromPin+0x11c>
    1694:	77 c0       	rjmp	.+238    	; 0x1784 <DIO_ReadFromPin+0x156>
		{
		case PA:
			result = GET_BIT(PINA,Pin);
    1696:	e9 e3       	ldi	r30, 0x39	; 57
    1698:	f0 e0       	ldi	r31, 0x00	; 0
    169a:	80 81       	ld	r24, Z
    169c:	48 2f       	mov	r20, r24
    169e:	50 e0       	ldi	r21, 0x00	; 0
    16a0:	8b 81       	ldd	r24, Y+3	; 0x03
    16a2:	28 2f       	mov	r18, r24
    16a4:	30 e0       	ldi	r19, 0x00	; 0
    16a6:	81 e0       	ldi	r24, 0x01	; 1
    16a8:	90 e0       	ldi	r25, 0x00	; 0
    16aa:	02 c0       	rjmp	.+4      	; 0x16b0 <DIO_ReadFromPin+0x82>
    16ac:	88 0f       	add	r24, r24
    16ae:	99 1f       	adc	r25, r25
    16b0:	2a 95       	dec	r18
    16b2:	e2 f7       	brpl	.-8      	; 0x16ac <DIO_ReadFromPin+0x7e>
    16b4:	9a 01       	movw	r18, r20
    16b6:	28 23       	and	r18, r24
    16b8:	39 23       	and	r19, r25
    16ba:	8b 81       	ldd	r24, Y+3	; 0x03
    16bc:	88 2f       	mov	r24, r24
    16be:	90 e0       	ldi	r25, 0x00	; 0
    16c0:	a9 01       	movw	r20, r18
    16c2:	02 c0       	rjmp	.+4      	; 0x16c8 <DIO_ReadFromPin+0x9a>
    16c4:	55 95       	asr	r21
    16c6:	47 95       	ror	r20
    16c8:	8a 95       	dec	r24
    16ca:	e2 f7       	brpl	.-8      	; 0x16c4 <DIO_ReadFromPin+0x96>
    16cc:	ca 01       	movw	r24, r20
    16ce:	89 83       	std	Y+1, r24	; 0x01
    16d0:	59 c0       	rjmp	.+178    	; 0x1784 <DIO_ReadFromPin+0x156>
			break;

		case PB:
			result = GET_BIT(PINB,Pin);
    16d2:	e6 e3       	ldi	r30, 0x36	; 54
    16d4:	f0 e0       	ldi	r31, 0x00	; 0
    16d6:	80 81       	ld	r24, Z
    16d8:	48 2f       	mov	r20, r24
    16da:	50 e0       	ldi	r21, 0x00	; 0
    16dc:	8b 81       	ldd	r24, Y+3	; 0x03
    16de:	28 2f       	mov	r18, r24
    16e0:	30 e0       	ldi	r19, 0x00	; 0
    16e2:	81 e0       	ldi	r24, 0x01	; 1
    16e4:	90 e0       	ldi	r25, 0x00	; 0
    16e6:	02 c0       	rjmp	.+4      	; 0x16ec <DIO_ReadFromPin+0xbe>
    16e8:	88 0f       	add	r24, r24
    16ea:	99 1f       	adc	r25, r25
    16ec:	2a 95       	dec	r18
    16ee:	e2 f7       	brpl	.-8      	; 0x16e8 <DIO_ReadFromPin+0xba>
    16f0:	9a 01       	movw	r18, r20
    16f2:	28 23       	and	r18, r24
    16f4:	39 23       	and	r19, r25
    16f6:	8b 81       	ldd	r24, Y+3	; 0x03
    16f8:	88 2f       	mov	r24, r24
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	a9 01       	movw	r20, r18
    16fe:	02 c0       	rjmp	.+4      	; 0x1704 <DIO_ReadFromPin+0xd6>
    1700:	55 95       	asr	r21
    1702:	47 95       	ror	r20
    1704:	8a 95       	dec	r24
    1706:	e2 f7       	brpl	.-8      	; 0x1700 <DIO_ReadFromPin+0xd2>
    1708:	ca 01       	movw	r24, r20
    170a:	89 83       	std	Y+1, r24	; 0x01
    170c:	3b c0       	rjmp	.+118    	; 0x1784 <DIO_ReadFromPin+0x156>
			break;

		case PC:
			result = GET_BIT(PINC,Pin);
    170e:	e3 e3       	ldi	r30, 0x33	; 51
    1710:	f0 e0       	ldi	r31, 0x00	; 0
    1712:	80 81       	ld	r24, Z
    1714:	48 2f       	mov	r20, r24
    1716:	50 e0       	ldi	r21, 0x00	; 0
    1718:	8b 81       	ldd	r24, Y+3	; 0x03
    171a:	28 2f       	mov	r18, r24
    171c:	30 e0       	ldi	r19, 0x00	; 0
    171e:	81 e0       	ldi	r24, 0x01	; 1
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	02 c0       	rjmp	.+4      	; 0x1728 <DIO_ReadFromPin+0xfa>
    1724:	88 0f       	add	r24, r24
    1726:	99 1f       	adc	r25, r25
    1728:	2a 95       	dec	r18
    172a:	e2 f7       	brpl	.-8      	; 0x1724 <DIO_ReadFromPin+0xf6>
    172c:	9a 01       	movw	r18, r20
    172e:	28 23       	and	r18, r24
    1730:	39 23       	and	r19, r25
    1732:	8b 81       	ldd	r24, Y+3	; 0x03
    1734:	88 2f       	mov	r24, r24
    1736:	90 e0       	ldi	r25, 0x00	; 0
    1738:	a9 01       	movw	r20, r18
    173a:	02 c0       	rjmp	.+4      	; 0x1740 <DIO_ReadFromPin+0x112>
    173c:	55 95       	asr	r21
    173e:	47 95       	ror	r20
    1740:	8a 95       	dec	r24
    1742:	e2 f7       	brpl	.-8      	; 0x173c <DIO_ReadFromPin+0x10e>
    1744:	ca 01       	movw	r24, r20
    1746:	89 83       	std	Y+1, r24	; 0x01
    1748:	1d c0       	rjmp	.+58     	; 0x1784 <DIO_ReadFromPin+0x156>
			break;

		case PD:
			result = GET_BIT(PIND,Pin);
    174a:	e0 e3       	ldi	r30, 0x30	; 48
    174c:	f0 e0       	ldi	r31, 0x00	; 0
    174e:	80 81       	ld	r24, Z
    1750:	48 2f       	mov	r20, r24
    1752:	50 e0       	ldi	r21, 0x00	; 0
    1754:	8b 81       	ldd	r24, Y+3	; 0x03
    1756:	28 2f       	mov	r18, r24
    1758:	30 e0       	ldi	r19, 0x00	; 0
    175a:	81 e0       	ldi	r24, 0x01	; 1
    175c:	90 e0       	ldi	r25, 0x00	; 0
    175e:	02 c0       	rjmp	.+4      	; 0x1764 <DIO_ReadFromPin+0x136>
    1760:	88 0f       	add	r24, r24
    1762:	99 1f       	adc	r25, r25
    1764:	2a 95       	dec	r18
    1766:	e2 f7       	brpl	.-8      	; 0x1760 <DIO_ReadFromPin+0x132>
    1768:	9a 01       	movw	r18, r20
    176a:	28 23       	and	r18, r24
    176c:	39 23       	and	r19, r25
    176e:	8b 81       	ldd	r24, Y+3	; 0x03
    1770:	88 2f       	mov	r24, r24
    1772:	90 e0       	ldi	r25, 0x00	; 0
    1774:	a9 01       	movw	r20, r18
    1776:	02 c0       	rjmp	.+4      	; 0x177c <DIO_ReadFromPin+0x14e>
    1778:	55 95       	asr	r21
    177a:	47 95       	ror	r20
    177c:	8a 95       	dec	r24
    177e:	e2 f7       	brpl	.-8      	; 0x1778 <DIO_ReadFromPin+0x14a>
    1780:	ca 01       	movw	r24, r20
    1782:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	else{

	}
	return result;
    1784:	89 81       	ldd	r24, Y+1	; 0x01
}
    1786:	0f 90       	pop	r0
    1788:	0f 90       	pop	r0
    178a:	0f 90       	pop	r0
    178c:	0f 90       	pop	r0
    178e:	0f 90       	pop	r0
    1790:	cf 91       	pop	r28
    1792:	df 91       	pop	r29
    1794:	08 95       	ret

00001796 <DIO_ReadFromPort>:


extern uint8 DIO_ReadFromPort(PortID_t Port)
{
    1796:	df 93       	push	r29
    1798:	cf 93       	push	r28
    179a:	00 d0       	rcall	.+0      	; 0x179c <DIO_ReadFromPort+0x6>
    179c:	00 d0       	rcall	.+0      	; 0x179e <DIO_ReadFromPort+0x8>
    179e:	cd b7       	in	r28, 0x3d	; 61
    17a0:	de b7       	in	r29, 0x3e	; 62
    17a2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 result = 0;
    17a4:	19 82       	std	Y+1, r1	; 0x01

	if(Port <= PD)
    17a6:	8a 81       	ldd	r24, Y+2	; 0x02
    17a8:	84 30       	cpi	r24, 0x04	; 4
    17aa:	90 f5       	brcc	.+100    	; 0x1810 <DIO_ReadFromPort+0x7a>
	{
		switch(Port)
    17ac:	8a 81       	ldd	r24, Y+2	; 0x02
    17ae:	28 2f       	mov	r18, r24
    17b0:	30 e0       	ldi	r19, 0x00	; 0
    17b2:	3c 83       	std	Y+4, r19	; 0x04
    17b4:	2b 83       	std	Y+3, r18	; 0x03
    17b6:	8b 81       	ldd	r24, Y+3	; 0x03
    17b8:	9c 81       	ldd	r25, Y+4	; 0x04
    17ba:	81 30       	cpi	r24, 0x01	; 1
    17bc:	91 05       	cpc	r25, r1
    17be:	d1 f0       	breq	.+52     	; 0x17f4 <DIO_ReadFromPort+0x5e>
    17c0:	2b 81       	ldd	r18, Y+3	; 0x03
    17c2:	3c 81       	ldd	r19, Y+4	; 0x04
    17c4:	22 30       	cpi	r18, 0x02	; 2
    17c6:	31 05       	cpc	r19, r1
    17c8:	2c f4       	brge	.+10     	; 0x17d4 <DIO_ReadFromPort+0x3e>
    17ca:	8b 81       	ldd	r24, Y+3	; 0x03
    17cc:	9c 81       	ldd	r25, Y+4	; 0x04
    17ce:	00 97       	sbiw	r24, 0x00	; 0
    17d0:	61 f0       	breq	.+24     	; 0x17ea <DIO_ReadFromPort+0x54>
    17d2:	1e c0       	rjmp	.+60     	; 0x1810 <DIO_ReadFromPort+0x7a>
    17d4:	2b 81       	ldd	r18, Y+3	; 0x03
    17d6:	3c 81       	ldd	r19, Y+4	; 0x04
    17d8:	22 30       	cpi	r18, 0x02	; 2
    17da:	31 05       	cpc	r19, r1
    17dc:	81 f0       	breq	.+32     	; 0x17fe <DIO_ReadFromPort+0x68>
    17de:	8b 81       	ldd	r24, Y+3	; 0x03
    17e0:	9c 81       	ldd	r25, Y+4	; 0x04
    17e2:	83 30       	cpi	r24, 0x03	; 3
    17e4:	91 05       	cpc	r25, r1
    17e6:	81 f0       	breq	.+32     	; 0x1808 <DIO_ReadFromPort+0x72>
    17e8:	13 c0       	rjmp	.+38     	; 0x1810 <DIO_ReadFromPort+0x7a>
		{
		case PA:
			result = PINA;
    17ea:	e9 e3       	ldi	r30, 0x39	; 57
    17ec:	f0 e0       	ldi	r31, 0x00	; 0
    17ee:	80 81       	ld	r24, Z
    17f0:	89 83       	std	Y+1, r24	; 0x01
    17f2:	0e c0       	rjmp	.+28     	; 0x1810 <DIO_ReadFromPort+0x7a>
			break;

		case PB:
			result = PINB;
    17f4:	e6 e3       	ldi	r30, 0x36	; 54
    17f6:	f0 e0       	ldi	r31, 0x00	; 0
    17f8:	80 81       	ld	r24, Z
    17fa:	89 83       	std	Y+1, r24	; 0x01
    17fc:	09 c0       	rjmp	.+18     	; 0x1810 <DIO_ReadFromPort+0x7a>
			break;

		case PC:
			result = PINC;
    17fe:	e3 e3       	ldi	r30, 0x33	; 51
    1800:	f0 e0       	ldi	r31, 0x00	; 0
    1802:	80 81       	ld	r24, Z
    1804:	89 83       	std	Y+1, r24	; 0x01
    1806:	04 c0       	rjmp	.+8      	; 0x1810 <DIO_ReadFromPort+0x7a>
			break;

		case PD:
			result = PIND;
    1808:	e0 e3       	ldi	r30, 0x30	; 48
    180a:	f0 e0       	ldi	r31, 0x00	; 0
    180c:	80 81       	ld	r24, Z
    180e:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	else{

	}
	return result;
    1810:	89 81       	ldd	r24, Y+1	; 0x01
}
    1812:	0f 90       	pop	r0
    1814:	0f 90       	pop	r0
    1816:	0f 90       	pop	r0
    1818:	0f 90       	pop	r0
    181a:	cf 91       	pop	r28
    181c:	df 91       	pop	r29
    181e:	08 95       	ret

00001820 <KEYPAD_GetKey>:
#include "StdTypes.h"
#include "DIO.h"
#include "KEYPAD.h"

KEYPAD_t KEYPAD_GetKey(void)
{
    1820:	df 93       	push	r29
    1822:	cf 93       	push	r28
    1824:	0f 92       	push	r0
    1826:	cd b7       	in	r28, 0x3d	; 61
    1828:	de b7       	in	r29, 0x3e	; 62
	//ROWS
	DIO_WriteOnPin(PA,PIN0,LOWV);
    182a:	80 e0       	ldi	r24, 0x00	; 0
    182c:	60 e0       	ldi	r22, 0x00	; 0
    182e:	40 e0       	ldi	r20, 0x00	; 0
    1830:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <DIO_WriteOnPin>
	DIO_WriteOnPin(PA,PIN1,HIGHV);
    1834:	80 e0       	ldi	r24, 0x00	; 0
    1836:	61 e0       	ldi	r22, 0x01	; 1
    1838:	41 e0       	ldi	r20, 0x01	; 1
    183a:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <DIO_WriteOnPin>
	DIO_WriteOnPin(PA,PIN2,HIGHV);
    183e:	80 e0       	ldi	r24, 0x00	; 0
    1840:	62 e0       	ldi	r22, 0x02	; 2
    1842:	41 e0       	ldi	r20, 0x01	; 1
    1844:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <DIO_WriteOnPin>
	DIO_WriteOnPin(PA,PIN3,HIGHV);
    1848:	80 e0       	ldi	r24, 0x00	; 0
    184a:	63 e0       	ldi	r22, 0x03	; 3
    184c:	41 e0       	ldi	r20, 0x01	; 1
    184e:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <DIO_WriteOnPin>

	if(DIO_ReadFromPin(PA,PIN4)==LOWV)
    1852:	80 e0       	ldi	r24, 0x00	; 0
    1854:	64 e0       	ldi	r22, 0x04	; 4
    1856:	0e 94 17 0b 	call	0x162e	; 0x162e <DIO_ReadFromPin>
    185a:	88 23       	and	r24, r24
    185c:	19 f4       	brne	.+6      	; 0x1864 <KEYPAD_GetKey+0x44>
	{
		return KEYONE;
    185e:	81 e0       	ldi	r24, 0x01	; 1
    1860:	89 83       	std	Y+1, r24	; 0x01
    1862:	c4 c0       	rjmp	.+392    	; 0x19ec <KEYPAD_GetKey+0x1cc>
	}
	else if(DIO_ReadFromPin(PA,PIN5)==LOWV)
    1864:	80 e0       	ldi	r24, 0x00	; 0
    1866:	65 e0       	ldi	r22, 0x05	; 5
    1868:	0e 94 17 0b 	call	0x162e	; 0x162e <DIO_ReadFromPin>
    186c:	88 23       	and	r24, r24
    186e:	19 f4       	brne	.+6      	; 0x1876 <KEYPAD_GetKey+0x56>
	{
		return KEYTWO;
    1870:	82 e0       	ldi	r24, 0x02	; 2
    1872:	89 83       	std	Y+1, r24	; 0x01
    1874:	bb c0       	rjmp	.+374    	; 0x19ec <KEYPAD_GetKey+0x1cc>
	}
	else if(DIO_ReadFromPin(PA,PIN6)==LOWV)
    1876:	80 e0       	ldi	r24, 0x00	; 0
    1878:	66 e0       	ldi	r22, 0x06	; 6
    187a:	0e 94 17 0b 	call	0x162e	; 0x162e <DIO_ReadFromPin>
    187e:	88 23       	and	r24, r24
    1880:	19 f4       	brne	.+6      	; 0x1888 <KEYPAD_GetKey+0x68>
	{
		return KEYTHREE;
    1882:	83 e0       	ldi	r24, 0x03	; 3
    1884:	89 83       	std	Y+1, r24	; 0x01
    1886:	b2 c0       	rjmp	.+356    	; 0x19ec <KEYPAD_GetKey+0x1cc>
	}
	else if(DIO_ReadFromPin(PA,PIN7)==LOWV)
    1888:	80 e0       	ldi	r24, 0x00	; 0
    188a:	67 e0       	ldi	r22, 0x07	; 7
    188c:	0e 94 17 0b 	call	0x162e	; 0x162e <DIO_ReadFromPin>
    1890:	88 23       	and	r24, r24
    1892:	19 f4       	brne	.+6      	; 0x189a <KEYPAD_GetKey+0x7a>
	{
		return KEYA;
    1894:	8a e0       	ldi	r24, 0x0A	; 10
    1896:	89 83       	std	Y+1, r24	; 0x01
    1898:	a9 c0       	rjmp	.+338    	; 0x19ec <KEYPAD_GetKey+0x1cc>
	}

	DIO_WriteOnPin(PA,PIN0,HIGHV);
    189a:	80 e0       	ldi	r24, 0x00	; 0
    189c:	60 e0       	ldi	r22, 0x00	; 0
    189e:	41 e0       	ldi	r20, 0x01	; 1
    18a0:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <DIO_WriteOnPin>
	DIO_WriteOnPin(PA,PIN1,LOWV);
    18a4:	80 e0       	ldi	r24, 0x00	; 0
    18a6:	61 e0       	ldi	r22, 0x01	; 1
    18a8:	40 e0       	ldi	r20, 0x00	; 0
    18aa:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <DIO_WriteOnPin>
	DIO_WriteOnPin(PA,PIN2,HIGHV);
    18ae:	80 e0       	ldi	r24, 0x00	; 0
    18b0:	62 e0       	ldi	r22, 0x02	; 2
    18b2:	41 e0       	ldi	r20, 0x01	; 1
    18b4:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <DIO_WriteOnPin>
	DIO_WriteOnPin(PA,PIN3,HIGHV);
    18b8:	80 e0       	ldi	r24, 0x00	; 0
    18ba:	63 e0       	ldi	r22, 0x03	; 3
    18bc:	41 e0       	ldi	r20, 0x01	; 1
    18be:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <DIO_WriteOnPin>

	if(DIO_ReadFromPin(PA,PIN4)==LOWV)
    18c2:	80 e0       	ldi	r24, 0x00	; 0
    18c4:	64 e0       	ldi	r22, 0x04	; 4
    18c6:	0e 94 17 0b 	call	0x162e	; 0x162e <DIO_ReadFromPin>
    18ca:	88 23       	and	r24, r24
    18cc:	19 f4       	brne	.+6      	; 0x18d4 <KEYPAD_GetKey+0xb4>
	{
		return KEYFOUR;
    18ce:	84 e0       	ldi	r24, 0x04	; 4
    18d0:	89 83       	std	Y+1, r24	; 0x01
    18d2:	8c c0       	rjmp	.+280    	; 0x19ec <KEYPAD_GetKey+0x1cc>
	}
	else if(DIO_ReadFromPin(PA,PIN5)==LOWV)
    18d4:	80 e0       	ldi	r24, 0x00	; 0
    18d6:	65 e0       	ldi	r22, 0x05	; 5
    18d8:	0e 94 17 0b 	call	0x162e	; 0x162e <DIO_ReadFromPin>
    18dc:	88 23       	and	r24, r24
    18de:	19 f4       	brne	.+6      	; 0x18e6 <KEYPAD_GetKey+0xc6>
	{
		return KEYFIVE;
    18e0:	85 e0       	ldi	r24, 0x05	; 5
    18e2:	89 83       	std	Y+1, r24	; 0x01
    18e4:	83 c0       	rjmp	.+262    	; 0x19ec <KEYPAD_GetKey+0x1cc>
	}
	else if(DIO_ReadFromPin(PA,PIN6)==LOWV)
    18e6:	80 e0       	ldi	r24, 0x00	; 0
    18e8:	66 e0       	ldi	r22, 0x06	; 6
    18ea:	0e 94 17 0b 	call	0x162e	; 0x162e <DIO_ReadFromPin>
    18ee:	88 23       	and	r24, r24
    18f0:	19 f4       	brne	.+6      	; 0x18f8 <KEYPAD_GetKey+0xd8>
	{
		return KEYSIX;
    18f2:	86 e0       	ldi	r24, 0x06	; 6
    18f4:	89 83       	std	Y+1, r24	; 0x01
    18f6:	7a c0       	rjmp	.+244    	; 0x19ec <KEYPAD_GetKey+0x1cc>
	}
	else if(DIO_ReadFromPin(PA,PIN7)==LOWV)
    18f8:	80 e0       	ldi	r24, 0x00	; 0
    18fa:	67 e0       	ldi	r22, 0x07	; 7
    18fc:	0e 94 17 0b 	call	0x162e	; 0x162e <DIO_ReadFromPin>
    1900:	88 23       	and	r24, r24
    1902:	19 f4       	brne	.+6      	; 0x190a <KEYPAD_GetKey+0xea>
	{
		return KEYB;
    1904:	8b e0       	ldi	r24, 0x0B	; 11
    1906:	89 83       	std	Y+1, r24	; 0x01
    1908:	71 c0       	rjmp	.+226    	; 0x19ec <KEYPAD_GetKey+0x1cc>
	}

	DIO_WriteOnPin(PA,PIN0,HIGHV);
    190a:	80 e0       	ldi	r24, 0x00	; 0
    190c:	60 e0       	ldi	r22, 0x00	; 0
    190e:	41 e0       	ldi	r20, 0x01	; 1
    1910:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <DIO_WriteOnPin>
	DIO_WriteOnPin(PA,PIN1,HIGHV);
    1914:	80 e0       	ldi	r24, 0x00	; 0
    1916:	61 e0       	ldi	r22, 0x01	; 1
    1918:	41 e0       	ldi	r20, 0x01	; 1
    191a:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <DIO_WriteOnPin>
	DIO_WriteOnPin(PA,PIN2,LOWV);
    191e:	80 e0       	ldi	r24, 0x00	; 0
    1920:	62 e0       	ldi	r22, 0x02	; 2
    1922:	40 e0       	ldi	r20, 0x00	; 0
    1924:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <DIO_WriteOnPin>
	DIO_WriteOnPin(PA,PIN3,HIGHV);
    1928:	80 e0       	ldi	r24, 0x00	; 0
    192a:	63 e0       	ldi	r22, 0x03	; 3
    192c:	41 e0       	ldi	r20, 0x01	; 1
    192e:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <DIO_WriteOnPin>

	if(DIO_ReadFromPin(PA,PIN4)==LOWV)
    1932:	80 e0       	ldi	r24, 0x00	; 0
    1934:	64 e0       	ldi	r22, 0x04	; 4
    1936:	0e 94 17 0b 	call	0x162e	; 0x162e <DIO_ReadFromPin>
    193a:	88 23       	and	r24, r24
    193c:	19 f4       	brne	.+6      	; 0x1944 <KEYPAD_GetKey+0x124>
	{
		return KEYSEVEN;
    193e:	87 e0       	ldi	r24, 0x07	; 7
    1940:	89 83       	std	Y+1, r24	; 0x01
    1942:	54 c0       	rjmp	.+168    	; 0x19ec <KEYPAD_GetKey+0x1cc>
	}
	else if(DIO_ReadFromPin(PA,PIN5)==LOWV)
    1944:	80 e0       	ldi	r24, 0x00	; 0
    1946:	65 e0       	ldi	r22, 0x05	; 5
    1948:	0e 94 17 0b 	call	0x162e	; 0x162e <DIO_ReadFromPin>
    194c:	88 23       	and	r24, r24
    194e:	19 f4       	brne	.+6      	; 0x1956 <KEYPAD_GetKey+0x136>
	{
		return KEYEIGHT;
    1950:	88 e0       	ldi	r24, 0x08	; 8
    1952:	89 83       	std	Y+1, r24	; 0x01
    1954:	4b c0       	rjmp	.+150    	; 0x19ec <KEYPAD_GetKey+0x1cc>
	}
	else if(DIO_ReadFromPin(PA,PIN6)==LOWV)
    1956:	80 e0       	ldi	r24, 0x00	; 0
    1958:	66 e0       	ldi	r22, 0x06	; 6
    195a:	0e 94 17 0b 	call	0x162e	; 0x162e <DIO_ReadFromPin>
    195e:	88 23       	and	r24, r24
    1960:	19 f4       	brne	.+6      	; 0x1968 <KEYPAD_GetKey+0x148>
	{
		return KEYNINE;
    1962:	89 e0       	ldi	r24, 0x09	; 9
    1964:	89 83       	std	Y+1, r24	; 0x01
    1966:	42 c0       	rjmp	.+132    	; 0x19ec <KEYPAD_GetKey+0x1cc>
	}
	else if(DIO_ReadFromPin(PA,PIN7)==LOWV)
    1968:	80 e0       	ldi	r24, 0x00	; 0
    196a:	67 e0       	ldi	r22, 0x07	; 7
    196c:	0e 94 17 0b 	call	0x162e	; 0x162e <DIO_ReadFromPin>
    1970:	88 23       	and	r24, r24
    1972:	19 f4       	brne	.+6      	; 0x197a <KEYPAD_GetKey+0x15a>
	{
		return KEYC;
    1974:	8c e0       	ldi	r24, 0x0C	; 12
    1976:	89 83       	std	Y+1, r24	; 0x01
    1978:	39 c0       	rjmp	.+114    	; 0x19ec <KEYPAD_GetKey+0x1cc>
	}

	DIO_WriteOnPin(PA,PIN0,HIGHV);
    197a:	80 e0       	ldi	r24, 0x00	; 0
    197c:	60 e0       	ldi	r22, 0x00	; 0
    197e:	41 e0       	ldi	r20, 0x01	; 1
    1980:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <DIO_WriteOnPin>
	DIO_WriteOnPin(PA,PIN1,HIGHV);
    1984:	80 e0       	ldi	r24, 0x00	; 0
    1986:	61 e0       	ldi	r22, 0x01	; 1
    1988:	41 e0       	ldi	r20, 0x01	; 1
    198a:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <DIO_WriteOnPin>
	DIO_WriteOnPin(PA,PIN2,HIGHV);
    198e:	80 e0       	ldi	r24, 0x00	; 0
    1990:	62 e0       	ldi	r22, 0x02	; 2
    1992:	41 e0       	ldi	r20, 0x01	; 1
    1994:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <DIO_WriteOnPin>
	DIO_WriteOnPin(PA,PIN3,LOWV);
    1998:	80 e0       	ldi	r24, 0x00	; 0
    199a:	63 e0       	ldi	r22, 0x03	; 3
    199c:	40 e0       	ldi	r20, 0x00	; 0
    199e:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <DIO_WriteOnPin>

	if(DIO_ReadFromPin(PA,PIN4)==LOWV)
    19a2:	80 e0       	ldi	r24, 0x00	; 0
    19a4:	64 e0       	ldi	r22, 0x04	; 4
    19a6:	0e 94 17 0b 	call	0x162e	; 0x162e <DIO_ReadFromPin>
    19aa:	88 23       	and	r24, r24
    19ac:	19 f4       	brne	.+6      	; 0x19b4 <KEYPAD_GetKey+0x194>
	{
		return KEYSTAR;
    19ae:	8e e0       	ldi	r24, 0x0E	; 14
    19b0:	89 83       	std	Y+1, r24	; 0x01
    19b2:	1c c0       	rjmp	.+56     	; 0x19ec <KEYPAD_GetKey+0x1cc>
	}
	else if(DIO_ReadFromPin(PA,PIN5)==LOWV)
    19b4:	80 e0       	ldi	r24, 0x00	; 0
    19b6:	65 e0       	ldi	r22, 0x05	; 5
    19b8:	0e 94 17 0b 	call	0x162e	; 0x162e <DIO_ReadFromPin>
    19bc:	88 23       	and	r24, r24
    19be:	11 f4       	brne	.+4      	; 0x19c4 <KEYPAD_GetKey+0x1a4>
	{
		return KEYZERO;
    19c0:	19 82       	std	Y+1, r1	; 0x01
    19c2:	14 c0       	rjmp	.+40     	; 0x19ec <KEYPAD_GetKey+0x1cc>
	}
	else if(DIO_ReadFromPin(PA,PIN6)==LOWV)
    19c4:	80 e0       	ldi	r24, 0x00	; 0
    19c6:	66 e0       	ldi	r22, 0x06	; 6
    19c8:	0e 94 17 0b 	call	0x162e	; 0x162e <DIO_ReadFromPin>
    19cc:	88 23       	and	r24, r24
    19ce:	19 f4       	brne	.+6      	; 0x19d6 <KEYPAD_GetKey+0x1b6>
	{
		return KEYHASH;
    19d0:	8f e0       	ldi	r24, 0x0F	; 15
    19d2:	89 83       	std	Y+1, r24	; 0x01
    19d4:	0b c0       	rjmp	.+22     	; 0x19ec <KEYPAD_GetKey+0x1cc>
	}
	else if(DIO_ReadFromPin(PA,PIN7)==LOWV)
    19d6:	80 e0       	ldi	r24, 0x00	; 0
    19d8:	67 e0       	ldi	r22, 0x07	; 7
    19da:	0e 94 17 0b 	call	0x162e	; 0x162e <DIO_ReadFromPin>
    19de:	88 23       	and	r24, r24
    19e0:	19 f4       	brne	.+6      	; 0x19e8 <KEYPAD_GetKey+0x1c8>
	{
		return KEYD;
    19e2:	8d e0       	ldi	r24, 0x0D	; 13
    19e4:	89 83       	std	Y+1, r24	; 0x01
    19e6:	02 c0       	rjmp	.+4      	; 0x19ec <KEYPAD_GetKey+0x1cc>
	}
	return NOKEY;
    19e8:	80 e1       	ldi	r24, 0x10	; 16
    19ea:	89 83       	std	Y+1, r24	; 0x01
    19ec:	89 81       	ldd	r24, Y+1	; 0x01
}
    19ee:	0f 90       	pop	r0
    19f0:	cf 91       	pop	r28
    19f2:	df 91       	pop	r29
    19f4:	08 95       	ret

000019f6 <KEYPAD_GetChar>:



/* An interface to get the pressed key by passing an array of 2 elements and the function saves in it the pressed key value in numeric and character. */

void KEYPAD_GetChar(uint8 * ch){
    19f6:	df 93       	push	r29
    19f8:	cf 93       	push	r28
    19fa:	00 d0       	rcall	.+0      	; 0x19fc <KEYPAD_GetChar+0x6>
    19fc:	cd b7       	in	r28, 0x3d	; 61
    19fe:	de b7       	in	r29, 0x3e	; 62
    1a00:	9a 83       	std	Y+2, r25	; 0x02
    1a02:	89 83       	std	Y+1, r24	; 0x01


	DIO_WriteOnPin(PA,PIN0,LOWV);
    1a04:	80 e0       	ldi	r24, 0x00	; 0
    1a06:	60 e0       	ldi	r22, 0x00	; 0
    1a08:	40 e0       	ldi	r20, 0x00	; 0
    1a0a:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <DIO_WriteOnPin>
	DIO_WriteOnPin(PA,PIN1,HIGHV);
    1a0e:	80 e0       	ldi	r24, 0x00	; 0
    1a10:	61 e0       	ldi	r22, 0x01	; 1
    1a12:	41 e0       	ldi	r20, 0x01	; 1
    1a14:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <DIO_WriteOnPin>
	DIO_WriteOnPin(PA,PIN2,HIGHV);
    1a18:	80 e0       	ldi	r24, 0x00	; 0
    1a1a:	62 e0       	ldi	r22, 0x02	; 2
    1a1c:	41 e0       	ldi	r20, 0x01	; 1
    1a1e:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <DIO_WriteOnPin>
	DIO_WriteOnPin(PA,PIN3,HIGHV);
    1a22:	80 e0       	ldi	r24, 0x00	; 0
    1a24:	63 e0       	ldi	r22, 0x03	; 3
    1a26:	41 e0       	ldi	r20, 0x01	; 1
    1a28:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <DIO_WriteOnPin>

	if(DIO_ReadFromPin(PA,PIN4)==LOWV)
    1a2c:	80 e0       	ldi	r24, 0x00	; 0
    1a2e:	64 e0       	ldi	r22, 0x04	; 4
    1a30:	0e 94 17 0b 	call	0x162e	; 0x162e <DIO_ReadFromPin>
    1a34:	88 23       	and	r24, r24
    1a36:	59 f4       	brne	.+22     	; 0x1a4e <KEYPAD_GetChar+0x58>
	{
		ch[0] = '7';
    1a38:	e9 81       	ldd	r30, Y+1	; 0x01
    1a3a:	fa 81       	ldd	r31, Y+2	; 0x02
    1a3c:	87 e3       	ldi	r24, 0x37	; 55
    1a3e:	80 83       	st	Z, r24
		ch[1] = 7;
    1a40:	89 81       	ldd	r24, Y+1	; 0x01
    1a42:	9a 81       	ldd	r25, Y+2	; 0x02
    1a44:	fc 01       	movw	r30, r24
    1a46:	31 96       	adiw	r30, 0x01	; 1
    1a48:	87 e0       	ldi	r24, 0x07	; 7
    1a4a:	80 83       	st	Z, r24
    1a4c:	32 c0       	rjmp	.+100    	; 0x1ab2 <KEYPAD_GetChar+0xbc>
	}
	else if(DIO_ReadFromPin(PA,PIN5)==LOWV)
    1a4e:	80 e0       	ldi	r24, 0x00	; 0
    1a50:	65 e0       	ldi	r22, 0x05	; 5
    1a52:	0e 94 17 0b 	call	0x162e	; 0x162e <DIO_ReadFromPin>
    1a56:	88 23       	and	r24, r24
    1a58:	59 f4       	brne	.+22     	; 0x1a70 <KEYPAD_GetChar+0x7a>
	{
		ch[0] = '8';
    1a5a:	e9 81       	ldd	r30, Y+1	; 0x01
    1a5c:	fa 81       	ldd	r31, Y+2	; 0x02
    1a5e:	88 e3       	ldi	r24, 0x38	; 56
    1a60:	80 83       	st	Z, r24
		ch[1] = 8;
    1a62:	89 81       	ldd	r24, Y+1	; 0x01
    1a64:	9a 81       	ldd	r25, Y+2	; 0x02
    1a66:	fc 01       	movw	r30, r24
    1a68:	31 96       	adiw	r30, 0x01	; 1
    1a6a:	88 e0       	ldi	r24, 0x08	; 8
    1a6c:	80 83       	st	Z, r24
    1a6e:	21 c0       	rjmp	.+66     	; 0x1ab2 <KEYPAD_GetChar+0xbc>
	}
	else if(DIO_ReadFromPin(PA,PIN6)==LOWV)
    1a70:	80 e0       	ldi	r24, 0x00	; 0
    1a72:	66 e0       	ldi	r22, 0x06	; 6
    1a74:	0e 94 17 0b 	call	0x162e	; 0x162e <DIO_ReadFromPin>
    1a78:	88 23       	and	r24, r24
    1a7a:	59 f4       	brne	.+22     	; 0x1a92 <KEYPAD_GetChar+0x9c>
	{
		ch[0] = '9';
    1a7c:	e9 81       	ldd	r30, Y+1	; 0x01
    1a7e:	fa 81       	ldd	r31, Y+2	; 0x02
    1a80:	89 e3       	ldi	r24, 0x39	; 57
    1a82:	80 83       	st	Z, r24
		ch[1] = 9;
    1a84:	89 81       	ldd	r24, Y+1	; 0x01
    1a86:	9a 81       	ldd	r25, Y+2	; 0x02
    1a88:	fc 01       	movw	r30, r24
    1a8a:	31 96       	adiw	r30, 0x01	; 1
    1a8c:	89 e0       	ldi	r24, 0x09	; 9
    1a8e:	80 83       	st	Z, r24
    1a90:	10 c0       	rjmp	.+32     	; 0x1ab2 <KEYPAD_GetChar+0xbc>
	}
	else if(DIO_ReadFromPin(PA,PIN7)==LOWV)
    1a92:	80 e0       	ldi	r24, 0x00	; 0
    1a94:	67 e0       	ldi	r22, 0x07	; 7
    1a96:	0e 94 17 0b 	call	0x162e	; 0x162e <DIO_ReadFromPin>
    1a9a:	88 23       	and	r24, r24
    1a9c:	51 f4       	brne	.+20     	; 0x1ab2 <KEYPAD_GetChar+0xbc>
	{
		ch[0] = '/';
    1a9e:	e9 81       	ldd	r30, Y+1	; 0x01
    1aa0:	fa 81       	ldd	r31, Y+2	; 0x02
    1aa2:	8f e2       	ldi	r24, 0x2F	; 47
    1aa4:	80 83       	st	Z, r24
		ch[1] = '0';
    1aa6:	89 81       	ldd	r24, Y+1	; 0x01
    1aa8:	9a 81       	ldd	r25, Y+2	; 0x02
    1aaa:	fc 01       	movw	r30, r24
    1aac:	31 96       	adiw	r30, 0x01	; 1
    1aae:	80 e3       	ldi	r24, 0x30	; 48
    1ab0:	80 83       	st	Z, r24
	}

	DIO_WriteOnPin(PA,PIN0,HIGHV);
    1ab2:	80 e0       	ldi	r24, 0x00	; 0
    1ab4:	60 e0       	ldi	r22, 0x00	; 0
    1ab6:	41 e0       	ldi	r20, 0x01	; 1
    1ab8:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <DIO_WriteOnPin>
	DIO_WriteOnPin(PA,PIN1,LOWV);
    1abc:	80 e0       	ldi	r24, 0x00	; 0
    1abe:	61 e0       	ldi	r22, 0x01	; 1
    1ac0:	40 e0       	ldi	r20, 0x00	; 0
    1ac2:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <DIO_WriteOnPin>
	DIO_WriteOnPin(PA,PIN2,HIGHV);
    1ac6:	80 e0       	ldi	r24, 0x00	; 0
    1ac8:	62 e0       	ldi	r22, 0x02	; 2
    1aca:	41 e0       	ldi	r20, 0x01	; 1
    1acc:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <DIO_WriteOnPin>
	DIO_WriteOnPin(PA,PIN3,HIGHV);
    1ad0:	80 e0       	ldi	r24, 0x00	; 0
    1ad2:	63 e0       	ldi	r22, 0x03	; 3
    1ad4:	41 e0       	ldi	r20, 0x01	; 1
    1ad6:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <DIO_WriteOnPin>
	if(DIO_ReadFromPin(PA,PIN4)==LOWV)
    1ada:	80 e0       	ldi	r24, 0x00	; 0
    1adc:	64 e0       	ldi	r22, 0x04	; 4
    1ade:	0e 94 17 0b 	call	0x162e	; 0x162e <DIO_ReadFromPin>
    1ae2:	88 23       	and	r24, r24
    1ae4:	59 f4       	brne	.+22     	; 0x1afc <KEYPAD_GetChar+0x106>
	{
		ch[0] = '4';
    1ae6:	e9 81       	ldd	r30, Y+1	; 0x01
    1ae8:	fa 81       	ldd	r31, Y+2	; 0x02
    1aea:	84 e3       	ldi	r24, 0x34	; 52
    1aec:	80 83       	st	Z, r24
		ch[1] = 4;
    1aee:	89 81       	ldd	r24, Y+1	; 0x01
    1af0:	9a 81       	ldd	r25, Y+2	; 0x02
    1af2:	fc 01       	movw	r30, r24
    1af4:	31 96       	adiw	r30, 0x01	; 1
    1af6:	84 e0       	ldi	r24, 0x04	; 4
    1af8:	80 83       	st	Z, r24
    1afa:	32 c0       	rjmp	.+100    	; 0x1b60 <KEYPAD_GetChar+0x16a>
	}
	else if(DIO_ReadFromPin(PA,PIN5)==LOWV)
    1afc:	80 e0       	ldi	r24, 0x00	; 0
    1afe:	65 e0       	ldi	r22, 0x05	; 5
    1b00:	0e 94 17 0b 	call	0x162e	; 0x162e <DIO_ReadFromPin>
    1b04:	88 23       	and	r24, r24
    1b06:	59 f4       	brne	.+22     	; 0x1b1e <KEYPAD_GetChar+0x128>
	{
		ch[0] = '5';
    1b08:	e9 81       	ldd	r30, Y+1	; 0x01
    1b0a:	fa 81       	ldd	r31, Y+2	; 0x02
    1b0c:	85 e3       	ldi	r24, 0x35	; 53
    1b0e:	80 83       	st	Z, r24
		ch[1] = 5;
    1b10:	89 81       	ldd	r24, Y+1	; 0x01
    1b12:	9a 81       	ldd	r25, Y+2	; 0x02
    1b14:	fc 01       	movw	r30, r24
    1b16:	31 96       	adiw	r30, 0x01	; 1
    1b18:	85 e0       	ldi	r24, 0x05	; 5
    1b1a:	80 83       	st	Z, r24
    1b1c:	21 c0       	rjmp	.+66     	; 0x1b60 <KEYPAD_GetChar+0x16a>
	}
	else if(DIO_ReadFromPin(PA,PIN6)==LOWV)
    1b1e:	80 e0       	ldi	r24, 0x00	; 0
    1b20:	66 e0       	ldi	r22, 0x06	; 6
    1b22:	0e 94 17 0b 	call	0x162e	; 0x162e <DIO_ReadFromPin>
    1b26:	88 23       	and	r24, r24
    1b28:	59 f4       	brne	.+22     	; 0x1b40 <KEYPAD_GetChar+0x14a>
	{
		ch[0] = '6';
    1b2a:	e9 81       	ldd	r30, Y+1	; 0x01
    1b2c:	fa 81       	ldd	r31, Y+2	; 0x02
    1b2e:	86 e3       	ldi	r24, 0x36	; 54
    1b30:	80 83       	st	Z, r24
		ch[1] = 6;
    1b32:	89 81       	ldd	r24, Y+1	; 0x01
    1b34:	9a 81       	ldd	r25, Y+2	; 0x02
    1b36:	fc 01       	movw	r30, r24
    1b38:	31 96       	adiw	r30, 0x01	; 1
    1b3a:	86 e0       	ldi	r24, 0x06	; 6
    1b3c:	80 83       	st	Z, r24
    1b3e:	10 c0       	rjmp	.+32     	; 0x1b60 <KEYPAD_GetChar+0x16a>
	}
	else if(DIO_ReadFromPin(PA,PIN7)==LOWV)
    1b40:	80 e0       	ldi	r24, 0x00	; 0
    1b42:	67 e0       	ldi	r22, 0x07	; 7
    1b44:	0e 94 17 0b 	call	0x162e	; 0x162e <DIO_ReadFromPin>
    1b48:	88 23       	and	r24, r24
    1b4a:	51 f4       	brne	.+20     	; 0x1b60 <KEYPAD_GetChar+0x16a>
	{
		ch[0] = 'x';
    1b4c:	e9 81       	ldd	r30, Y+1	; 0x01
    1b4e:	fa 81       	ldd	r31, Y+2	; 0x02
    1b50:	88 e7       	ldi	r24, 0x78	; 120
    1b52:	80 83       	st	Z, r24
		ch[1] = '0';
    1b54:	89 81       	ldd	r24, Y+1	; 0x01
    1b56:	9a 81       	ldd	r25, Y+2	; 0x02
    1b58:	fc 01       	movw	r30, r24
    1b5a:	31 96       	adiw	r30, 0x01	; 1
    1b5c:	80 e3       	ldi	r24, 0x30	; 48
    1b5e:	80 83       	st	Z, r24
	}

	DIO_WriteOnPin(PA,PIN0,HIGHV);
    1b60:	80 e0       	ldi	r24, 0x00	; 0
    1b62:	60 e0       	ldi	r22, 0x00	; 0
    1b64:	41 e0       	ldi	r20, 0x01	; 1
    1b66:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <DIO_WriteOnPin>
	DIO_WriteOnPin(PA,PIN1,HIGHV);
    1b6a:	80 e0       	ldi	r24, 0x00	; 0
    1b6c:	61 e0       	ldi	r22, 0x01	; 1
    1b6e:	41 e0       	ldi	r20, 0x01	; 1
    1b70:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <DIO_WriteOnPin>
	DIO_WriteOnPin(PA,PIN2,LOWV);
    1b74:	80 e0       	ldi	r24, 0x00	; 0
    1b76:	62 e0       	ldi	r22, 0x02	; 2
    1b78:	40 e0       	ldi	r20, 0x00	; 0
    1b7a:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <DIO_WriteOnPin>
	DIO_WriteOnPin(PA,PIN3,HIGHV);
    1b7e:	80 e0       	ldi	r24, 0x00	; 0
    1b80:	63 e0       	ldi	r22, 0x03	; 3
    1b82:	41 e0       	ldi	r20, 0x01	; 1
    1b84:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <DIO_WriteOnPin>
	if(DIO_ReadFromPin(PA,PIN4)==LOWV)
    1b88:	80 e0       	ldi	r24, 0x00	; 0
    1b8a:	64 e0       	ldi	r22, 0x04	; 4
    1b8c:	0e 94 17 0b 	call	0x162e	; 0x162e <DIO_ReadFromPin>
    1b90:	88 23       	and	r24, r24
    1b92:	59 f4       	brne	.+22     	; 0x1baa <KEYPAD_GetChar+0x1b4>
	{
		ch[0] = '1';
    1b94:	e9 81       	ldd	r30, Y+1	; 0x01
    1b96:	fa 81       	ldd	r31, Y+2	; 0x02
    1b98:	81 e3       	ldi	r24, 0x31	; 49
    1b9a:	80 83       	st	Z, r24
		ch[1] = 1;
    1b9c:	89 81       	ldd	r24, Y+1	; 0x01
    1b9e:	9a 81       	ldd	r25, Y+2	; 0x02
    1ba0:	fc 01       	movw	r30, r24
    1ba2:	31 96       	adiw	r30, 0x01	; 1
    1ba4:	81 e0       	ldi	r24, 0x01	; 1
    1ba6:	80 83       	st	Z, r24
    1ba8:	32 c0       	rjmp	.+100    	; 0x1c0e <KEYPAD_GetChar+0x218>
	}
	else if(DIO_ReadFromPin(PA,PIN5)==LOWV)
    1baa:	80 e0       	ldi	r24, 0x00	; 0
    1bac:	65 e0       	ldi	r22, 0x05	; 5
    1bae:	0e 94 17 0b 	call	0x162e	; 0x162e <DIO_ReadFromPin>
    1bb2:	88 23       	and	r24, r24
    1bb4:	59 f4       	brne	.+22     	; 0x1bcc <KEYPAD_GetChar+0x1d6>
	{
		ch[0] = '2';
    1bb6:	e9 81       	ldd	r30, Y+1	; 0x01
    1bb8:	fa 81       	ldd	r31, Y+2	; 0x02
    1bba:	82 e3       	ldi	r24, 0x32	; 50
    1bbc:	80 83       	st	Z, r24
		ch[1] = 2;
    1bbe:	89 81       	ldd	r24, Y+1	; 0x01
    1bc0:	9a 81       	ldd	r25, Y+2	; 0x02
    1bc2:	fc 01       	movw	r30, r24
    1bc4:	31 96       	adiw	r30, 0x01	; 1
    1bc6:	82 e0       	ldi	r24, 0x02	; 2
    1bc8:	80 83       	st	Z, r24
    1bca:	21 c0       	rjmp	.+66     	; 0x1c0e <KEYPAD_GetChar+0x218>
	}
	else if(DIO_ReadFromPin(PA,PIN6)==LOWV)
    1bcc:	80 e0       	ldi	r24, 0x00	; 0
    1bce:	66 e0       	ldi	r22, 0x06	; 6
    1bd0:	0e 94 17 0b 	call	0x162e	; 0x162e <DIO_ReadFromPin>
    1bd4:	88 23       	and	r24, r24
    1bd6:	59 f4       	brne	.+22     	; 0x1bee <KEYPAD_GetChar+0x1f8>
	{
		ch[0] = '3';
    1bd8:	e9 81       	ldd	r30, Y+1	; 0x01
    1bda:	fa 81       	ldd	r31, Y+2	; 0x02
    1bdc:	83 e3       	ldi	r24, 0x33	; 51
    1bde:	80 83       	st	Z, r24
		ch[1] = 3;
    1be0:	89 81       	ldd	r24, Y+1	; 0x01
    1be2:	9a 81       	ldd	r25, Y+2	; 0x02
    1be4:	fc 01       	movw	r30, r24
    1be6:	31 96       	adiw	r30, 0x01	; 1
    1be8:	83 e0       	ldi	r24, 0x03	; 3
    1bea:	80 83       	st	Z, r24
    1bec:	10 c0       	rjmp	.+32     	; 0x1c0e <KEYPAD_GetChar+0x218>
	}
	else if(DIO_ReadFromPin(PA,PIN7)==LOWV)
    1bee:	80 e0       	ldi	r24, 0x00	; 0
    1bf0:	67 e0       	ldi	r22, 0x07	; 7
    1bf2:	0e 94 17 0b 	call	0x162e	; 0x162e <DIO_ReadFromPin>
    1bf6:	88 23       	and	r24, r24
    1bf8:	51 f4       	brne	.+20     	; 0x1c0e <KEYPAD_GetChar+0x218>
	{
		ch[0] = '-';
    1bfa:	e9 81       	ldd	r30, Y+1	; 0x01
    1bfc:	fa 81       	ldd	r31, Y+2	; 0x02
    1bfe:	8d e2       	ldi	r24, 0x2D	; 45
    1c00:	80 83       	st	Z, r24
		ch[1] = '0';
    1c02:	89 81       	ldd	r24, Y+1	; 0x01
    1c04:	9a 81       	ldd	r25, Y+2	; 0x02
    1c06:	fc 01       	movw	r30, r24
    1c08:	31 96       	adiw	r30, 0x01	; 1
    1c0a:	80 e3       	ldi	r24, 0x30	; 48
    1c0c:	80 83       	st	Z, r24
	}

	DIO_WriteOnPin(PA,PIN0,HIGHV);
    1c0e:	80 e0       	ldi	r24, 0x00	; 0
    1c10:	60 e0       	ldi	r22, 0x00	; 0
    1c12:	41 e0       	ldi	r20, 0x01	; 1
    1c14:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <DIO_WriteOnPin>
	DIO_WriteOnPin(PA,PIN1,HIGHV);
    1c18:	80 e0       	ldi	r24, 0x00	; 0
    1c1a:	61 e0       	ldi	r22, 0x01	; 1
    1c1c:	41 e0       	ldi	r20, 0x01	; 1
    1c1e:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <DIO_WriteOnPin>
	DIO_WriteOnPin(PA,PIN2,HIGHV);
    1c22:	80 e0       	ldi	r24, 0x00	; 0
    1c24:	62 e0       	ldi	r22, 0x02	; 2
    1c26:	41 e0       	ldi	r20, 0x01	; 1
    1c28:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <DIO_WriteOnPin>
	DIO_WriteOnPin(PA,PIN3,LOWV);
    1c2c:	80 e0       	ldi	r24, 0x00	; 0
    1c2e:	63 e0       	ldi	r22, 0x03	; 3
    1c30:	40 e0       	ldi	r20, 0x00	; 0
    1c32:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <DIO_WriteOnPin>
	if(DIO_ReadFromPin(PA,PIN4)==LOWV)
    1c36:	80 e0       	ldi	r24, 0x00	; 0
    1c38:	64 e0       	ldi	r22, 0x04	; 4
    1c3a:	0e 94 17 0b 	call	0x162e	; 0x162e <DIO_ReadFromPin>
    1c3e:	88 23       	and	r24, r24
    1c40:	59 f4       	brne	.+22     	; 0x1c58 <KEYPAD_GetChar+0x262>
	{
		ch[0] = 'a';
    1c42:	e9 81       	ldd	r30, Y+1	; 0x01
    1c44:	fa 81       	ldd	r31, Y+2	; 0x02
    1c46:	81 e6       	ldi	r24, 0x61	; 97
    1c48:	80 83       	st	Z, r24
		ch[1] = '0';
    1c4a:	89 81       	ldd	r24, Y+1	; 0x01
    1c4c:	9a 81       	ldd	r25, Y+2	; 0x02
    1c4e:	fc 01       	movw	r30, r24
    1c50:	31 96       	adiw	r30, 0x01	; 1
    1c52:	80 e3       	ldi	r24, 0x30	; 48
    1c54:	80 83       	st	Z, r24
    1c56:	31 c0       	rjmp	.+98     	; 0x1cba <KEYPAD_GetChar+0x2c4>
	}
	else if(DIO_ReadFromPin(PA,PIN5)==LOWV)
    1c58:	80 e0       	ldi	r24, 0x00	; 0
    1c5a:	65 e0       	ldi	r22, 0x05	; 5
    1c5c:	0e 94 17 0b 	call	0x162e	; 0x162e <DIO_ReadFromPin>
    1c60:	88 23       	and	r24, r24
    1c62:	51 f4       	brne	.+20     	; 0x1c78 <KEYPAD_GetChar+0x282>
	{
		ch[0] = '0';
    1c64:	e9 81       	ldd	r30, Y+1	; 0x01
    1c66:	fa 81       	ldd	r31, Y+2	; 0x02
    1c68:	80 e3       	ldi	r24, 0x30	; 48
    1c6a:	80 83       	st	Z, r24
		ch[1] = 0;
    1c6c:	89 81       	ldd	r24, Y+1	; 0x01
    1c6e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c70:	fc 01       	movw	r30, r24
    1c72:	31 96       	adiw	r30, 0x01	; 1
    1c74:	10 82       	st	Z, r1
    1c76:	21 c0       	rjmp	.+66     	; 0x1cba <KEYPAD_GetChar+0x2c4>
	}
	else if(DIO_ReadFromPin(PA,PIN6)==LOWV)
    1c78:	80 e0       	ldi	r24, 0x00	; 0
    1c7a:	66 e0       	ldi	r22, 0x06	; 6
    1c7c:	0e 94 17 0b 	call	0x162e	; 0x162e <DIO_ReadFromPin>
    1c80:	88 23       	and	r24, r24
    1c82:	59 f4       	brne	.+22     	; 0x1c9a <KEYPAD_GetChar+0x2a4>
	{
		ch[0] = '=';
    1c84:	e9 81       	ldd	r30, Y+1	; 0x01
    1c86:	fa 81       	ldd	r31, Y+2	; 0x02
    1c88:	8d e3       	ldi	r24, 0x3D	; 61
    1c8a:	80 83       	st	Z, r24
		ch[1] = 'e';
    1c8c:	89 81       	ldd	r24, Y+1	; 0x01
    1c8e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c90:	fc 01       	movw	r30, r24
    1c92:	31 96       	adiw	r30, 0x01	; 1
    1c94:	85 e6       	ldi	r24, 0x65	; 101
    1c96:	80 83       	st	Z, r24
    1c98:	10 c0       	rjmp	.+32     	; 0x1cba <KEYPAD_GetChar+0x2c4>
	}
	else if(DIO_ReadFromPin(PA,PIN7)==LOWV)
    1c9a:	80 e0       	ldi	r24, 0x00	; 0
    1c9c:	67 e0       	ldi	r22, 0x07	; 7
    1c9e:	0e 94 17 0b 	call	0x162e	; 0x162e <DIO_ReadFromPin>
    1ca2:	88 23       	and	r24, r24
    1ca4:	51 f4       	brne	.+20     	; 0x1cba <KEYPAD_GetChar+0x2c4>
	{
		ch[0] = '+';
    1ca6:	e9 81       	ldd	r30, Y+1	; 0x01
    1ca8:	fa 81       	ldd	r31, Y+2	; 0x02
    1caa:	8b e2       	ldi	r24, 0x2B	; 43
    1cac:	80 83       	st	Z, r24
		ch[1] = '0';
    1cae:	89 81       	ldd	r24, Y+1	; 0x01
    1cb0:	9a 81       	ldd	r25, Y+2	; 0x02
    1cb2:	fc 01       	movw	r30, r24
    1cb4:	31 96       	adiw	r30, 0x01	; 1
    1cb6:	80 e3       	ldi	r24, 0x30	; 48
    1cb8:	80 83       	st	Z, r24
	}

}
    1cba:	0f 90       	pop	r0
    1cbc:	0f 90       	pop	r0
    1cbe:	cf 91       	pop	r28
    1cc0:	df 91       	pop	r29
    1cc2:	08 95       	ret

00001cc4 <LCD_vidInit>:
/* Description! Apply initialization sequence for LCD module                           */
/* Input      ! Nothing                                                                */
/* Output     ! Nothing                                                                */
/***************************************************************************************/
void LCD_vidInit(void)
{
    1cc4:	0f 93       	push	r16
    1cc6:	1f 93       	push	r17
    1cc8:	df 93       	push	r29
    1cca:	cf 93       	push	r28
    1ccc:	cd b7       	in	r28, 0x3d	; 61
    1cce:	de b7       	in	r29, 0x3e	; 62
    1cd0:	c4 55       	subi	r28, 0x54	; 84
    1cd2:	d0 40       	sbci	r29, 0x00	; 0
    1cd4:	0f b6       	in	r0, 0x3f	; 63
    1cd6:	f8 94       	cli
    1cd8:	de bf       	out	0x3e, r29	; 62
    1cda:	0f be       	out	0x3f, r0	; 63
    1cdc:	cd bf       	out	0x3d, r28	; 61
    1cde:	fe 01       	movw	r30, r28
    1ce0:	ef 5a       	subi	r30, 0xAF	; 175
    1ce2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce4:	80 e0       	ldi	r24, 0x00	; 0
    1ce6:	90 e0       	ldi	r25, 0x00	; 0
    1ce8:	a0 ef       	ldi	r26, 0xF0	; 240
    1cea:	b1 e4       	ldi	r27, 0x41	; 65
    1cec:	80 83       	st	Z, r24
    1cee:	91 83       	std	Z+1, r25	; 0x01
    1cf0:	a2 83       	std	Z+2, r26	; 0x02
    1cf2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cf4:	8e 01       	movw	r16, r28
    1cf6:	03 5b       	subi	r16, 0xB3	; 179
    1cf8:	1f 4f       	sbci	r17, 0xFF	; 255
    1cfa:	fe 01       	movw	r30, r28
    1cfc:	ef 5a       	subi	r30, 0xAF	; 175
    1cfe:	ff 4f       	sbci	r31, 0xFF	; 255
    1d00:	60 81       	ld	r22, Z
    1d02:	71 81       	ldd	r23, Z+1	; 0x01
    1d04:	82 81       	ldd	r24, Z+2	; 0x02
    1d06:	93 81       	ldd	r25, Z+3	; 0x03
    1d08:	20 e0       	ldi	r18, 0x00	; 0
    1d0a:	30 e0       	ldi	r19, 0x00	; 0
    1d0c:	4a e7       	ldi	r20, 0x7A	; 122
    1d0e:	55 e4       	ldi	r21, 0x45	; 69
    1d10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d14:	dc 01       	movw	r26, r24
    1d16:	cb 01       	movw	r24, r22
    1d18:	f8 01       	movw	r30, r16
    1d1a:	80 83       	st	Z, r24
    1d1c:	91 83       	std	Z+1, r25	; 0x01
    1d1e:	a2 83       	std	Z+2, r26	; 0x02
    1d20:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d22:	fe 01       	movw	r30, r28
    1d24:	e3 5b       	subi	r30, 0xB3	; 179
    1d26:	ff 4f       	sbci	r31, 0xFF	; 255
    1d28:	60 81       	ld	r22, Z
    1d2a:	71 81       	ldd	r23, Z+1	; 0x01
    1d2c:	82 81       	ldd	r24, Z+2	; 0x02
    1d2e:	93 81       	ldd	r25, Z+3	; 0x03
    1d30:	20 e0       	ldi	r18, 0x00	; 0
    1d32:	30 e0       	ldi	r19, 0x00	; 0
    1d34:	40 e8       	ldi	r20, 0x80	; 128
    1d36:	5f e3       	ldi	r21, 0x3F	; 63
    1d38:	0e 94 85 04 	call	0x90a	; 0x90a <__ltsf2>
    1d3c:	88 23       	and	r24, r24
    1d3e:	44 f4       	brge	.+16     	; 0x1d50 <LCD_vidInit+0x8c>
		__ticks = 1;
    1d40:	fe 01       	movw	r30, r28
    1d42:	e5 5b       	subi	r30, 0xB5	; 181
    1d44:	ff 4f       	sbci	r31, 0xFF	; 255
    1d46:	81 e0       	ldi	r24, 0x01	; 1
    1d48:	90 e0       	ldi	r25, 0x00	; 0
    1d4a:	91 83       	std	Z+1, r25	; 0x01
    1d4c:	80 83       	st	Z, r24
    1d4e:	64 c0       	rjmp	.+200    	; 0x1e18 <LCD_vidInit+0x154>
	else if (__tmp > 65535)
    1d50:	fe 01       	movw	r30, r28
    1d52:	e3 5b       	subi	r30, 0xB3	; 179
    1d54:	ff 4f       	sbci	r31, 0xFF	; 255
    1d56:	60 81       	ld	r22, Z
    1d58:	71 81       	ldd	r23, Z+1	; 0x01
    1d5a:	82 81       	ldd	r24, Z+2	; 0x02
    1d5c:	93 81       	ldd	r25, Z+3	; 0x03
    1d5e:	20 e0       	ldi	r18, 0x00	; 0
    1d60:	3f ef       	ldi	r19, 0xFF	; 255
    1d62:	4f e7       	ldi	r20, 0x7F	; 127
    1d64:	57 e4       	ldi	r21, 0x47	; 71
    1d66:	0e 94 25 04 	call	0x84a	; 0x84a <__gtsf2>
    1d6a:	18 16       	cp	r1, r24
    1d6c:	0c f0       	brlt	.+2      	; 0x1d70 <LCD_vidInit+0xac>
    1d6e:	43 c0       	rjmp	.+134    	; 0x1df6 <LCD_vidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d70:	fe 01       	movw	r30, r28
    1d72:	ef 5a       	subi	r30, 0xAF	; 175
    1d74:	ff 4f       	sbci	r31, 0xFF	; 255
    1d76:	60 81       	ld	r22, Z
    1d78:	71 81       	ldd	r23, Z+1	; 0x01
    1d7a:	82 81       	ldd	r24, Z+2	; 0x02
    1d7c:	93 81       	ldd	r25, Z+3	; 0x03
    1d7e:	20 e0       	ldi	r18, 0x00	; 0
    1d80:	30 e0       	ldi	r19, 0x00	; 0
    1d82:	40 e2       	ldi	r20, 0x20	; 32
    1d84:	51 e4       	ldi	r21, 0x41	; 65
    1d86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d8a:	dc 01       	movw	r26, r24
    1d8c:	cb 01       	movw	r24, r22
    1d8e:	8e 01       	movw	r16, r28
    1d90:	05 5b       	subi	r16, 0xB5	; 181
    1d92:	1f 4f       	sbci	r17, 0xFF	; 255
    1d94:	bc 01       	movw	r22, r24
    1d96:	cd 01       	movw	r24, r26
    1d98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d9c:	dc 01       	movw	r26, r24
    1d9e:	cb 01       	movw	r24, r22
    1da0:	f8 01       	movw	r30, r16
    1da2:	91 83       	std	Z+1, r25	; 0x01
    1da4:	80 83       	st	Z, r24
    1da6:	1f c0       	rjmp	.+62     	; 0x1de6 <LCD_vidInit+0x122>
    1da8:	fe 01       	movw	r30, r28
    1daa:	e7 5b       	subi	r30, 0xB7	; 183
    1dac:	ff 4f       	sbci	r31, 0xFF	; 255
    1dae:	80 e9       	ldi	r24, 0x90	; 144
    1db0:	91 e0       	ldi	r25, 0x01	; 1
    1db2:	91 83       	std	Z+1, r25	; 0x01
    1db4:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1db6:	fe 01       	movw	r30, r28
    1db8:	e7 5b       	subi	r30, 0xB7	; 183
    1dba:	ff 4f       	sbci	r31, 0xFF	; 255
    1dbc:	80 81       	ld	r24, Z
    1dbe:	91 81       	ldd	r25, Z+1	; 0x01
    1dc0:	01 97       	sbiw	r24, 0x01	; 1
    1dc2:	f1 f7       	brne	.-4      	; 0x1dc0 <LCD_vidInit+0xfc>
    1dc4:	fe 01       	movw	r30, r28
    1dc6:	e7 5b       	subi	r30, 0xB7	; 183
    1dc8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dca:	91 83       	std	Z+1, r25	; 0x01
    1dcc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dce:	de 01       	movw	r26, r28
    1dd0:	a5 5b       	subi	r26, 0xB5	; 181
    1dd2:	bf 4f       	sbci	r27, 0xFF	; 255
    1dd4:	fe 01       	movw	r30, r28
    1dd6:	e5 5b       	subi	r30, 0xB5	; 181
    1dd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dda:	80 81       	ld	r24, Z
    1ddc:	91 81       	ldd	r25, Z+1	; 0x01
    1dde:	01 97       	sbiw	r24, 0x01	; 1
    1de0:	11 96       	adiw	r26, 0x01	; 1
    1de2:	9c 93       	st	X, r25
    1de4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1de6:	fe 01       	movw	r30, r28
    1de8:	e5 5b       	subi	r30, 0xB5	; 181
    1dea:	ff 4f       	sbci	r31, 0xFF	; 255
    1dec:	80 81       	ld	r24, Z
    1dee:	91 81       	ldd	r25, Z+1	; 0x01
    1df0:	00 97       	sbiw	r24, 0x00	; 0
    1df2:	d1 f6       	brne	.-76     	; 0x1da8 <LCD_vidInit+0xe4>
    1df4:	27 c0       	rjmp	.+78     	; 0x1e44 <LCD_vidInit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1df6:	8e 01       	movw	r16, r28
    1df8:	05 5b       	subi	r16, 0xB5	; 181
    1dfa:	1f 4f       	sbci	r17, 0xFF	; 255
    1dfc:	fe 01       	movw	r30, r28
    1dfe:	e3 5b       	subi	r30, 0xB3	; 179
    1e00:	ff 4f       	sbci	r31, 0xFF	; 255
    1e02:	60 81       	ld	r22, Z
    1e04:	71 81       	ldd	r23, Z+1	; 0x01
    1e06:	82 81       	ldd	r24, Z+2	; 0x02
    1e08:	93 81       	ldd	r25, Z+3	; 0x03
    1e0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e0e:	dc 01       	movw	r26, r24
    1e10:	cb 01       	movw	r24, r22
    1e12:	f8 01       	movw	r30, r16
    1e14:	91 83       	std	Z+1, r25	; 0x01
    1e16:	80 83       	st	Z, r24
    1e18:	de 01       	movw	r26, r28
    1e1a:	a9 5b       	subi	r26, 0xB9	; 185
    1e1c:	bf 4f       	sbci	r27, 0xFF	; 255
    1e1e:	fe 01       	movw	r30, r28
    1e20:	e5 5b       	subi	r30, 0xB5	; 181
    1e22:	ff 4f       	sbci	r31, 0xFF	; 255
    1e24:	80 81       	ld	r24, Z
    1e26:	91 81       	ldd	r25, Z+1	; 0x01
    1e28:	8d 93       	st	X+, r24
    1e2a:	9c 93       	st	X, r25
    1e2c:	fe 01       	movw	r30, r28
    1e2e:	e9 5b       	subi	r30, 0xB9	; 185
    1e30:	ff 4f       	sbci	r31, 0xFF	; 255
    1e32:	80 81       	ld	r24, Z
    1e34:	91 81       	ldd	r25, Z+1	; 0x01
    1e36:	01 97       	sbiw	r24, 0x01	; 1
    1e38:	f1 f7       	brne	.-4      	; 0x1e36 <LCD_vidInit+0x172>
    1e3a:	fe 01       	movw	r30, r28
    1e3c:	e9 5b       	subi	r30, 0xB9	; 185
    1e3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e40:	91 83       	std	Z+1, r25	; 0x01
    1e42:	80 83       	st	Z, r24
	/* Delay 30ms to ensure the initialization of the LCD driver */
	_delay_ms(30);

	/* Return Home  */
	LCD_vidSendCommand(lcd_Home);
    1e44:	82 e0       	ldi	r24, 0x02	; 2
    1e46:	0e 94 8a 11 	call	0x2314	; 0x2314 <LCD_vidSendCommand>
    1e4a:	fe 01       	movw	r30, r28
    1e4c:	ed 5b       	subi	r30, 0xBD	; 189
    1e4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e50:	80 e0       	ldi	r24, 0x00	; 0
    1e52:	90 e0       	ldi	r25, 0x00	; 0
    1e54:	a0 e7       	ldi	r26, 0x70	; 112
    1e56:	b1 e4       	ldi	r27, 0x41	; 65
    1e58:	80 83       	st	Z, r24
    1e5a:	91 83       	std	Z+1, r25	; 0x01
    1e5c:	a2 83       	std	Z+2, r26	; 0x02
    1e5e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e60:	8e 01       	movw	r16, r28
    1e62:	01 5c       	subi	r16, 0xC1	; 193
    1e64:	1f 4f       	sbci	r17, 0xFF	; 255
    1e66:	fe 01       	movw	r30, r28
    1e68:	ed 5b       	subi	r30, 0xBD	; 189
    1e6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e6c:	60 81       	ld	r22, Z
    1e6e:	71 81       	ldd	r23, Z+1	; 0x01
    1e70:	82 81       	ldd	r24, Z+2	; 0x02
    1e72:	93 81       	ldd	r25, Z+3	; 0x03
    1e74:	20 e0       	ldi	r18, 0x00	; 0
    1e76:	30 e0       	ldi	r19, 0x00	; 0
    1e78:	4a e7       	ldi	r20, 0x7A	; 122
    1e7a:	55 e4       	ldi	r21, 0x45	; 69
    1e7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e80:	dc 01       	movw	r26, r24
    1e82:	cb 01       	movw	r24, r22
    1e84:	f8 01       	movw	r30, r16
    1e86:	80 83       	st	Z, r24
    1e88:	91 83       	std	Z+1, r25	; 0x01
    1e8a:	a2 83       	std	Z+2, r26	; 0x02
    1e8c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e8e:	fe 01       	movw	r30, r28
    1e90:	ff 96       	adiw	r30, 0x3f	; 63
    1e92:	60 81       	ld	r22, Z
    1e94:	71 81       	ldd	r23, Z+1	; 0x01
    1e96:	82 81       	ldd	r24, Z+2	; 0x02
    1e98:	93 81       	ldd	r25, Z+3	; 0x03
    1e9a:	20 e0       	ldi	r18, 0x00	; 0
    1e9c:	30 e0       	ldi	r19, 0x00	; 0
    1e9e:	40 e8       	ldi	r20, 0x80	; 128
    1ea0:	5f e3       	ldi	r21, 0x3F	; 63
    1ea2:	0e 94 85 04 	call	0x90a	; 0x90a <__ltsf2>
    1ea6:	88 23       	and	r24, r24
    1ea8:	2c f4       	brge	.+10     	; 0x1eb4 <LCD_vidInit+0x1f0>
		__ticks = 1;
    1eaa:	81 e0       	ldi	r24, 0x01	; 1
    1eac:	90 e0       	ldi	r25, 0x00	; 0
    1eae:	9e af       	std	Y+62, r25	; 0x3e
    1eb0:	8d af       	std	Y+61, r24	; 0x3d
    1eb2:	46 c0       	rjmp	.+140    	; 0x1f40 <LCD_vidInit+0x27c>
	else if (__tmp > 65535)
    1eb4:	fe 01       	movw	r30, r28
    1eb6:	ff 96       	adiw	r30, 0x3f	; 63
    1eb8:	60 81       	ld	r22, Z
    1eba:	71 81       	ldd	r23, Z+1	; 0x01
    1ebc:	82 81       	ldd	r24, Z+2	; 0x02
    1ebe:	93 81       	ldd	r25, Z+3	; 0x03
    1ec0:	20 e0       	ldi	r18, 0x00	; 0
    1ec2:	3f ef       	ldi	r19, 0xFF	; 255
    1ec4:	4f e7       	ldi	r20, 0x7F	; 127
    1ec6:	57 e4       	ldi	r21, 0x47	; 71
    1ec8:	0e 94 25 04 	call	0x84a	; 0x84a <__gtsf2>
    1ecc:	18 16       	cp	r1, r24
    1ece:	64 f5       	brge	.+88     	; 0x1f28 <LCD_vidInit+0x264>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ed0:	fe 01       	movw	r30, r28
    1ed2:	ed 5b       	subi	r30, 0xBD	; 189
    1ed4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed6:	60 81       	ld	r22, Z
    1ed8:	71 81       	ldd	r23, Z+1	; 0x01
    1eda:	82 81       	ldd	r24, Z+2	; 0x02
    1edc:	93 81       	ldd	r25, Z+3	; 0x03
    1ede:	20 e0       	ldi	r18, 0x00	; 0
    1ee0:	30 e0       	ldi	r19, 0x00	; 0
    1ee2:	40 e2       	ldi	r20, 0x20	; 32
    1ee4:	51 e4       	ldi	r21, 0x41	; 65
    1ee6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eea:	dc 01       	movw	r26, r24
    1eec:	cb 01       	movw	r24, r22
    1eee:	bc 01       	movw	r22, r24
    1ef0:	cd 01       	movw	r24, r26
    1ef2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ef6:	dc 01       	movw	r26, r24
    1ef8:	cb 01       	movw	r24, r22
    1efa:	9e af       	std	Y+62, r25	; 0x3e
    1efc:	8d af       	std	Y+61, r24	; 0x3d
    1efe:	0f c0       	rjmp	.+30     	; 0x1f1e <LCD_vidInit+0x25a>
    1f00:	80 e9       	ldi	r24, 0x90	; 144
    1f02:	91 e0       	ldi	r25, 0x01	; 1
    1f04:	9c af       	std	Y+60, r25	; 0x3c
    1f06:	8b af       	std	Y+59, r24	; 0x3b
    1f08:	8b ad       	ldd	r24, Y+59	; 0x3b
    1f0a:	9c ad       	ldd	r25, Y+60	; 0x3c
    1f0c:	01 97       	sbiw	r24, 0x01	; 1
    1f0e:	f1 f7       	brne	.-4      	; 0x1f0c <LCD_vidInit+0x248>
    1f10:	9c af       	std	Y+60, r25	; 0x3c
    1f12:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f14:	8d ad       	ldd	r24, Y+61	; 0x3d
    1f16:	9e ad       	ldd	r25, Y+62	; 0x3e
    1f18:	01 97       	sbiw	r24, 0x01	; 1
    1f1a:	9e af       	std	Y+62, r25	; 0x3e
    1f1c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f1e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1f20:	9e ad       	ldd	r25, Y+62	; 0x3e
    1f22:	00 97       	sbiw	r24, 0x00	; 0
    1f24:	69 f7       	brne	.-38     	; 0x1f00 <LCD_vidInit+0x23c>
    1f26:	16 c0       	rjmp	.+44     	; 0x1f54 <LCD_vidInit+0x290>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f28:	fe 01       	movw	r30, r28
    1f2a:	ff 96       	adiw	r30, 0x3f	; 63
    1f2c:	60 81       	ld	r22, Z
    1f2e:	71 81       	ldd	r23, Z+1	; 0x01
    1f30:	82 81       	ldd	r24, Z+2	; 0x02
    1f32:	93 81       	ldd	r25, Z+3	; 0x03
    1f34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f38:	dc 01       	movw	r26, r24
    1f3a:	cb 01       	movw	r24, r22
    1f3c:	9e af       	std	Y+62, r25	; 0x3e
    1f3e:	8d af       	std	Y+61, r24	; 0x3d
    1f40:	8d ad       	ldd	r24, Y+61	; 0x3d
    1f42:	9e ad       	ldd	r25, Y+62	; 0x3e
    1f44:	9a af       	std	Y+58, r25	; 0x3a
    1f46:	89 af       	std	Y+57, r24	; 0x39
    1f48:	89 ad       	ldd	r24, Y+57	; 0x39
    1f4a:	9a ad       	ldd	r25, Y+58	; 0x3a
    1f4c:	01 97       	sbiw	r24, 0x01	; 1
    1f4e:	f1 f7       	brne	.-4      	; 0x1f4c <LCD_vidInit+0x288>
    1f50:	9a af       	std	Y+58, r25	; 0x3a
    1f52:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(15);

	/* Function Set  */
	LCD_vidSendCommand(lcd_FunctionSet8bit);
    1f54:	88 e3       	ldi	r24, 0x38	; 56
    1f56:	0e 94 8a 11 	call	0x2314	; 0x2314 <LCD_vidSendCommand>
    1f5a:	80 e0       	ldi	r24, 0x00	; 0
    1f5c:	90 e0       	ldi	r25, 0x00	; 0
    1f5e:	a0 e8       	ldi	r26, 0x80	; 128
    1f60:	bf e3       	ldi	r27, 0x3F	; 63
    1f62:	8d ab       	std	Y+53, r24	; 0x35
    1f64:	9e ab       	std	Y+54, r25	; 0x36
    1f66:	af ab       	std	Y+55, r26	; 0x37
    1f68:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f6a:	6d a9       	ldd	r22, Y+53	; 0x35
    1f6c:	7e a9       	ldd	r23, Y+54	; 0x36
    1f6e:	8f a9       	ldd	r24, Y+55	; 0x37
    1f70:	98 ad       	ldd	r25, Y+56	; 0x38
    1f72:	20 e0       	ldi	r18, 0x00	; 0
    1f74:	30 e0       	ldi	r19, 0x00	; 0
    1f76:	4a e7       	ldi	r20, 0x7A	; 122
    1f78:	55 e4       	ldi	r21, 0x45	; 69
    1f7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f7e:	dc 01       	movw	r26, r24
    1f80:	cb 01       	movw	r24, r22
    1f82:	89 ab       	std	Y+49, r24	; 0x31
    1f84:	9a ab       	std	Y+50, r25	; 0x32
    1f86:	ab ab       	std	Y+51, r26	; 0x33
    1f88:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1f8a:	69 a9       	ldd	r22, Y+49	; 0x31
    1f8c:	7a a9       	ldd	r23, Y+50	; 0x32
    1f8e:	8b a9       	ldd	r24, Y+51	; 0x33
    1f90:	9c a9       	ldd	r25, Y+52	; 0x34
    1f92:	20 e0       	ldi	r18, 0x00	; 0
    1f94:	30 e0       	ldi	r19, 0x00	; 0
    1f96:	40 e8       	ldi	r20, 0x80	; 128
    1f98:	5f e3       	ldi	r21, 0x3F	; 63
    1f9a:	0e 94 85 04 	call	0x90a	; 0x90a <__ltsf2>
    1f9e:	88 23       	and	r24, r24
    1fa0:	2c f4       	brge	.+10     	; 0x1fac <LCD_vidInit+0x2e8>
		__ticks = 1;
    1fa2:	81 e0       	ldi	r24, 0x01	; 1
    1fa4:	90 e0       	ldi	r25, 0x00	; 0
    1fa6:	98 ab       	std	Y+48, r25	; 0x30
    1fa8:	8f a7       	std	Y+47, r24	; 0x2f
    1faa:	3f c0       	rjmp	.+126    	; 0x202a <LCD_vidInit+0x366>
	else if (__tmp > 65535)
    1fac:	69 a9       	ldd	r22, Y+49	; 0x31
    1fae:	7a a9       	ldd	r23, Y+50	; 0x32
    1fb0:	8b a9       	ldd	r24, Y+51	; 0x33
    1fb2:	9c a9       	ldd	r25, Y+52	; 0x34
    1fb4:	20 e0       	ldi	r18, 0x00	; 0
    1fb6:	3f ef       	ldi	r19, 0xFF	; 255
    1fb8:	4f e7       	ldi	r20, 0x7F	; 127
    1fba:	57 e4       	ldi	r21, 0x47	; 71
    1fbc:	0e 94 25 04 	call	0x84a	; 0x84a <__gtsf2>
    1fc0:	18 16       	cp	r1, r24
    1fc2:	4c f5       	brge	.+82     	; 0x2016 <LCD_vidInit+0x352>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fc4:	6d a9       	ldd	r22, Y+53	; 0x35
    1fc6:	7e a9       	ldd	r23, Y+54	; 0x36
    1fc8:	8f a9       	ldd	r24, Y+55	; 0x37
    1fca:	98 ad       	ldd	r25, Y+56	; 0x38
    1fcc:	20 e0       	ldi	r18, 0x00	; 0
    1fce:	30 e0       	ldi	r19, 0x00	; 0
    1fd0:	40 e2       	ldi	r20, 0x20	; 32
    1fd2:	51 e4       	ldi	r21, 0x41	; 65
    1fd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fd8:	dc 01       	movw	r26, r24
    1fda:	cb 01       	movw	r24, r22
    1fdc:	bc 01       	movw	r22, r24
    1fde:	cd 01       	movw	r24, r26
    1fe0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fe4:	dc 01       	movw	r26, r24
    1fe6:	cb 01       	movw	r24, r22
    1fe8:	98 ab       	std	Y+48, r25	; 0x30
    1fea:	8f a7       	std	Y+47, r24	; 0x2f
    1fec:	0f c0       	rjmp	.+30     	; 0x200c <LCD_vidInit+0x348>
    1fee:	80 e9       	ldi	r24, 0x90	; 144
    1ff0:	91 e0       	ldi	r25, 0x01	; 1
    1ff2:	9e a7       	std	Y+46, r25	; 0x2e
    1ff4:	8d a7       	std	Y+45, r24	; 0x2d
    1ff6:	8d a5       	ldd	r24, Y+45	; 0x2d
    1ff8:	9e a5       	ldd	r25, Y+46	; 0x2e
    1ffa:	01 97       	sbiw	r24, 0x01	; 1
    1ffc:	f1 f7       	brne	.-4      	; 0x1ffa <LCD_vidInit+0x336>
    1ffe:	9e a7       	std	Y+46, r25	; 0x2e
    2000:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2002:	8f a5       	ldd	r24, Y+47	; 0x2f
    2004:	98 a9       	ldd	r25, Y+48	; 0x30
    2006:	01 97       	sbiw	r24, 0x01	; 1
    2008:	98 ab       	std	Y+48, r25	; 0x30
    200a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    200c:	8f a5       	ldd	r24, Y+47	; 0x2f
    200e:	98 a9       	ldd	r25, Y+48	; 0x30
    2010:	00 97       	sbiw	r24, 0x00	; 0
    2012:	69 f7       	brne	.-38     	; 0x1fee <LCD_vidInit+0x32a>
    2014:	14 c0       	rjmp	.+40     	; 0x203e <LCD_vidInit+0x37a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2016:	69 a9       	ldd	r22, Y+49	; 0x31
    2018:	7a a9       	ldd	r23, Y+50	; 0x32
    201a:	8b a9       	ldd	r24, Y+51	; 0x33
    201c:	9c a9       	ldd	r25, Y+52	; 0x34
    201e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2022:	dc 01       	movw	r26, r24
    2024:	cb 01       	movw	r24, r22
    2026:	98 ab       	std	Y+48, r25	; 0x30
    2028:	8f a7       	std	Y+47, r24	; 0x2f
    202a:	8f a5       	ldd	r24, Y+47	; 0x2f
    202c:	98 a9       	ldd	r25, Y+48	; 0x30
    202e:	9c a7       	std	Y+44, r25	; 0x2c
    2030:	8b a7       	std	Y+43, r24	; 0x2b
    2032:	8b a5       	ldd	r24, Y+43	; 0x2b
    2034:	9c a5       	ldd	r25, Y+44	; 0x2c
    2036:	01 97       	sbiw	r24, 0x01	; 1
    2038:	f1 f7       	brne	.-4      	; 0x2036 <LCD_vidInit+0x372>
    203a:	9c a7       	std	Y+44, r25	; 0x2c
    203c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);

	/* Display ON OFF Control */
	LCD_vidSendCommand(lcd_DisplayOn);
    203e:	8c e0       	ldi	r24, 0x0C	; 12
    2040:	0e 94 8a 11 	call	0x2314	; 0x2314 <LCD_vidSendCommand>
    2044:	80 e0       	ldi	r24, 0x00	; 0
    2046:	90 e0       	ldi	r25, 0x00	; 0
    2048:	a0 e8       	ldi	r26, 0x80	; 128
    204a:	bf e3       	ldi	r27, 0x3F	; 63
    204c:	8f a3       	std	Y+39, r24	; 0x27
    204e:	98 a7       	std	Y+40, r25	; 0x28
    2050:	a9 a7       	std	Y+41, r26	; 0x29
    2052:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2054:	6f a1       	ldd	r22, Y+39	; 0x27
    2056:	78 a5       	ldd	r23, Y+40	; 0x28
    2058:	89 a5       	ldd	r24, Y+41	; 0x29
    205a:	9a a5       	ldd	r25, Y+42	; 0x2a
    205c:	20 e0       	ldi	r18, 0x00	; 0
    205e:	30 e0       	ldi	r19, 0x00	; 0
    2060:	4a e7       	ldi	r20, 0x7A	; 122
    2062:	55 e4       	ldi	r21, 0x45	; 69
    2064:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2068:	dc 01       	movw	r26, r24
    206a:	cb 01       	movw	r24, r22
    206c:	8b a3       	std	Y+35, r24	; 0x23
    206e:	9c a3       	std	Y+36, r25	; 0x24
    2070:	ad a3       	std	Y+37, r26	; 0x25
    2072:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2074:	6b a1       	ldd	r22, Y+35	; 0x23
    2076:	7c a1       	ldd	r23, Y+36	; 0x24
    2078:	8d a1       	ldd	r24, Y+37	; 0x25
    207a:	9e a1       	ldd	r25, Y+38	; 0x26
    207c:	20 e0       	ldi	r18, 0x00	; 0
    207e:	30 e0       	ldi	r19, 0x00	; 0
    2080:	40 e8       	ldi	r20, 0x80	; 128
    2082:	5f e3       	ldi	r21, 0x3F	; 63
    2084:	0e 94 85 04 	call	0x90a	; 0x90a <__ltsf2>
    2088:	88 23       	and	r24, r24
    208a:	2c f4       	brge	.+10     	; 0x2096 <LCD_vidInit+0x3d2>
		__ticks = 1;
    208c:	81 e0       	ldi	r24, 0x01	; 1
    208e:	90 e0       	ldi	r25, 0x00	; 0
    2090:	9a a3       	std	Y+34, r25	; 0x22
    2092:	89 a3       	std	Y+33, r24	; 0x21
    2094:	3f c0       	rjmp	.+126    	; 0x2114 <LCD_vidInit+0x450>
	else if (__tmp > 65535)
    2096:	6b a1       	ldd	r22, Y+35	; 0x23
    2098:	7c a1       	ldd	r23, Y+36	; 0x24
    209a:	8d a1       	ldd	r24, Y+37	; 0x25
    209c:	9e a1       	ldd	r25, Y+38	; 0x26
    209e:	20 e0       	ldi	r18, 0x00	; 0
    20a0:	3f ef       	ldi	r19, 0xFF	; 255
    20a2:	4f e7       	ldi	r20, 0x7F	; 127
    20a4:	57 e4       	ldi	r21, 0x47	; 71
    20a6:	0e 94 25 04 	call	0x84a	; 0x84a <__gtsf2>
    20aa:	18 16       	cp	r1, r24
    20ac:	4c f5       	brge	.+82     	; 0x2100 <LCD_vidInit+0x43c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20ae:	6f a1       	ldd	r22, Y+39	; 0x27
    20b0:	78 a5       	ldd	r23, Y+40	; 0x28
    20b2:	89 a5       	ldd	r24, Y+41	; 0x29
    20b4:	9a a5       	ldd	r25, Y+42	; 0x2a
    20b6:	20 e0       	ldi	r18, 0x00	; 0
    20b8:	30 e0       	ldi	r19, 0x00	; 0
    20ba:	40 e2       	ldi	r20, 0x20	; 32
    20bc:	51 e4       	ldi	r21, 0x41	; 65
    20be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20c2:	dc 01       	movw	r26, r24
    20c4:	cb 01       	movw	r24, r22
    20c6:	bc 01       	movw	r22, r24
    20c8:	cd 01       	movw	r24, r26
    20ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20ce:	dc 01       	movw	r26, r24
    20d0:	cb 01       	movw	r24, r22
    20d2:	9a a3       	std	Y+34, r25	; 0x22
    20d4:	89 a3       	std	Y+33, r24	; 0x21
    20d6:	0f c0       	rjmp	.+30     	; 0x20f6 <LCD_vidInit+0x432>
    20d8:	80 e9       	ldi	r24, 0x90	; 144
    20da:	91 e0       	ldi	r25, 0x01	; 1
    20dc:	98 a3       	std	Y+32, r25	; 0x20
    20de:	8f 8f       	std	Y+31, r24	; 0x1f
    20e0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    20e2:	98 a1       	ldd	r25, Y+32	; 0x20
    20e4:	01 97       	sbiw	r24, 0x01	; 1
    20e6:	f1 f7       	brne	.-4      	; 0x20e4 <LCD_vidInit+0x420>
    20e8:	98 a3       	std	Y+32, r25	; 0x20
    20ea:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20ec:	89 a1       	ldd	r24, Y+33	; 0x21
    20ee:	9a a1       	ldd	r25, Y+34	; 0x22
    20f0:	01 97       	sbiw	r24, 0x01	; 1
    20f2:	9a a3       	std	Y+34, r25	; 0x22
    20f4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20f6:	89 a1       	ldd	r24, Y+33	; 0x21
    20f8:	9a a1       	ldd	r25, Y+34	; 0x22
    20fa:	00 97       	sbiw	r24, 0x00	; 0
    20fc:	69 f7       	brne	.-38     	; 0x20d8 <LCD_vidInit+0x414>
    20fe:	14 c0       	rjmp	.+40     	; 0x2128 <LCD_vidInit+0x464>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2100:	6b a1       	ldd	r22, Y+35	; 0x23
    2102:	7c a1       	ldd	r23, Y+36	; 0x24
    2104:	8d a1       	ldd	r24, Y+37	; 0x25
    2106:	9e a1       	ldd	r25, Y+38	; 0x26
    2108:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    210c:	dc 01       	movw	r26, r24
    210e:	cb 01       	movw	r24, r22
    2110:	9a a3       	std	Y+34, r25	; 0x22
    2112:	89 a3       	std	Y+33, r24	; 0x21
    2114:	89 a1       	ldd	r24, Y+33	; 0x21
    2116:	9a a1       	ldd	r25, Y+34	; 0x22
    2118:	9e 8f       	std	Y+30, r25	; 0x1e
    211a:	8d 8f       	std	Y+29, r24	; 0x1d
    211c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    211e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2120:	01 97       	sbiw	r24, 0x01	; 1
    2122:	f1 f7       	brne	.-4      	; 0x2120 <LCD_vidInit+0x45c>
    2124:	9e 8f       	std	Y+30, r25	; 0x1e
    2126:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	/* Clear Display */
	LCD_vidSendCommand(lcd_Clear);
    2128:	81 e0       	ldi	r24, 0x01	; 1
    212a:	0e 94 8a 11 	call	0x2314	; 0x2314 <LCD_vidSendCommand>
    212e:	80 e0       	ldi	r24, 0x00	; 0
    2130:	90 e0       	ldi	r25, 0x00	; 0
    2132:	a0 e7       	ldi	r26, 0x70	; 112
    2134:	b1 e4       	ldi	r27, 0x41	; 65
    2136:	89 8f       	std	Y+25, r24	; 0x19
    2138:	9a 8f       	std	Y+26, r25	; 0x1a
    213a:	ab 8f       	std	Y+27, r26	; 0x1b
    213c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    213e:	69 8d       	ldd	r22, Y+25	; 0x19
    2140:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2142:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2144:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2146:	20 e0       	ldi	r18, 0x00	; 0
    2148:	30 e0       	ldi	r19, 0x00	; 0
    214a:	4a e7       	ldi	r20, 0x7A	; 122
    214c:	55 e4       	ldi	r21, 0x45	; 69
    214e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2152:	dc 01       	movw	r26, r24
    2154:	cb 01       	movw	r24, r22
    2156:	8d 8b       	std	Y+21, r24	; 0x15
    2158:	9e 8b       	std	Y+22, r25	; 0x16
    215a:	af 8b       	std	Y+23, r26	; 0x17
    215c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    215e:	6d 89       	ldd	r22, Y+21	; 0x15
    2160:	7e 89       	ldd	r23, Y+22	; 0x16
    2162:	8f 89       	ldd	r24, Y+23	; 0x17
    2164:	98 8d       	ldd	r25, Y+24	; 0x18
    2166:	20 e0       	ldi	r18, 0x00	; 0
    2168:	30 e0       	ldi	r19, 0x00	; 0
    216a:	40 e8       	ldi	r20, 0x80	; 128
    216c:	5f e3       	ldi	r21, 0x3F	; 63
    216e:	0e 94 85 04 	call	0x90a	; 0x90a <__ltsf2>
    2172:	88 23       	and	r24, r24
    2174:	2c f4       	brge	.+10     	; 0x2180 <LCD_vidInit+0x4bc>
		__ticks = 1;
    2176:	81 e0       	ldi	r24, 0x01	; 1
    2178:	90 e0       	ldi	r25, 0x00	; 0
    217a:	9c 8b       	std	Y+20, r25	; 0x14
    217c:	8b 8b       	std	Y+19, r24	; 0x13
    217e:	3f c0       	rjmp	.+126    	; 0x21fe <LCD_vidInit+0x53a>
	else if (__tmp > 65535)
    2180:	6d 89       	ldd	r22, Y+21	; 0x15
    2182:	7e 89       	ldd	r23, Y+22	; 0x16
    2184:	8f 89       	ldd	r24, Y+23	; 0x17
    2186:	98 8d       	ldd	r25, Y+24	; 0x18
    2188:	20 e0       	ldi	r18, 0x00	; 0
    218a:	3f ef       	ldi	r19, 0xFF	; 255
    218c:	4f e7       	ldi	r20, 0x7F	; 127
    218e:	57 e4       	ldi	r21, 0x47	; 71
    2190:	0e 94 25 04 	call	0x84a	; 0x84a <__gtsf2>
    2194:	18 16       	cp	r1, r24
    2196:	4c f5       	brge	.+82     	; 0x21ea <LCD_vidInit+0x526>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2198:	69 8d       	ldd	r22, Y+25	; 0x19
    219a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    219c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    219e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21a0:	20 e0       	ldi	r18, 0x00	; 0
    21a2:	30 e0       	ldi	r19, 0x00	; 0
    21a4:	40 e2       	ldi	r20, 0x20	; 32
    21a6:	51 e4       	ldi	r21, 0x41	; 65
    21a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21ac:	dc 01       	movw	r26, r24
    21ae:	cb 01       	movw	r24, r22
    21b0:	bc 01       	movw	r22, r24
    21b2:	cd 01       	movw	r24, r26
    21b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21b8:	dc 01       	movw	r26, r24
    21ba:	cb 01       	movw	r24, r22
    21bc:	9c 8b       	std	Y+20, r25	; 0x14
    21be:	8b 8b       	std	Y+19, r24	; 0x13
    21c0:	0f c0       	rjmp	.+30     	; 0x21e0 <LCD_vidInit+0x51c>
    21c2:	80 e9       	ldi	r24, 0x90	; 144
    21c4:	91 e0       	ldi	r25, 0x01	; 1
    21c6:	9a 8b       	std	Y+18, r25	; 0x12
    21c8:	89 8b       	std	Y+17, r24	; 0x11
    21ca:	89 89       	ldd	r24, Y+17	; 0x11
    21cc:	9a 89       	ldd	r25, Y+18	; 0x12
    21ce:	01 97       	sbiw	r24, 0x01	; 1
    21d0:	f1 f7       	brne	.-4      	; 0x21ce <LCD_vidInit+0x50a>
    21d2:	9a 8b       	std	Y+18, r25	; 0x12
    21d4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21d6:	8b 89       	ldd	r24, Y+19	; 0x13
    21d8:	9c 89       	ldd	r25, Y+20	; 0x14
    21da:	01 97       	sbiw	r24, 0x01	; 1
    21dc:	9c 8b       	std	Y+20, r25	; 0x14
    21de:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21e0:	8b 89       	ldd	r24, Y+19	; 0x13
    21e2:	9c 89       	ldd	r25, Y+20	; 0x14
    21e4:	00 97       	sbiw	r24, 0x00	; 0
    21e6:	69 f7       	brne	.-38     	; 0x21c2 <LCD_vidInit+0x4fe>
    21e8:	14 c0       	rjmp	.+40     	; 0x2212 <LCD_vidInit+0x54e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21ea:	6d 89       	ldd	r22, Y+21	; 0x15
    21ec:	7e 89       	ldd	r23, Y+22	; 0x16
    21ee:	8f 89       	ldd	r24, Y+23	; 0x17
    21f0:	98 8d       	ldd	r25, Y+24	; 0x18
    21f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21f6:	dc 01       	movw	r26, r24
    21f8:	cb 01       	movw	r24, r22
    21fa:	9c 8b       	std	Y+20, r25	; 0x14
    21fc:	8b 8b       	std	Y+19, r24	; 0x13
    21fe:	8b 89       	ldd	r24, Y+19	; 0x13
    2200:	9c 89       	ldd	r25, Y+20	; 0x14
    2202:	98 8b       	std	Y+16, r25	; 0x10
    2204:	8f 87       	std	Y+15, r24	; 0x0f
    2206:	8f 85       	ldd	r24, Y+15	; 0x0f
    2208:	98 89       	ldd	r25, Y+16	; 0x10
    220a:	01 97       	sbiw	r24, 0x01	; 1
    220c:	f1 f7       	brne	.-4      	; 0x220a <LCD_vidInit+0x546>
    220e:	98 8b       	std	Y+16, r25	; 0x10
    2210:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(15);

	/* Entry Mode Set  */
	LCD_vidSendCommand(lcd_EntryMode);
    2212:	86 e0       	ldi	r24, 0x06	; 6
    2214:	0e 94 8a 11 	call	0x2314	; 0x2314 <LCD_vidSendCommand>
    2218:	80 e0       	ldi	r24, 0x00	; 0
    221a:	90 e0       	ldi	r25, 0x00	; 0
    221c:	a0 e0       	ldi	r26, 0x00	; 0
    221e:	b0 e4       	ldi	r27, 0x40	; 64
    2220:	8b 87       	std	Y+11, r24	; 0x0b
    2222:	9c 87       	std	Y+12, r25	; 0x0c
    2224:	ad 87       	std	Y+13, r26	; 0x0d
    2226:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2228:	6b 85       	ldd	r22, Y+11	; 0x0b
    222a:	7c 85       	ldd	r23, Y+12	; 0x0c
    222c:	8d 85       	ldd	r24, Y+13	; 0x0d
    222e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2230:	20 e0       	ldi	r18, 0x00	; 0
    2232:	30 e0       	ldi	r19, 0x00	; 0
    2234:	4a e7       	ldi	r20, 0x7A	; 122
    2236:	55 e4       	ldi	r21, 0x45	; 69
    2238:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    223c:	dc 01       	movw	r26, r24
    223e:	cb 01       	movw	r24, r22
    2240:	8f 83       	std	Y+7, r24	; 0x07
    2242:	98 87       	std	Y+8, r25	; 0x08
    2244:	a9 87       	std	Y+9, r26	; 0x09
    2246:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2248:	6f 81       	ldd	r22, Y+7	; 0x07
    224a:	78 85       	ldd	r23, Y+8	; 0x08
    224c:	89 85       	ldd	r24, Y+9	; 0x09
    224e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2250:	20 e0       	ldi	r18, 0x00	; 0
    2252:	30 e0       	ldi	r19, 0x00	; 0
    2254:	40 e8       	ldi	r20, 0x80	; 128
    2256:	5f e3       	ldi	r21, 0x3F	; 63
    2258:	0e 94 85 04 	call	0x90a	; 0x90a <__ltsf2>
    225c:	88 23       	and	r24, r24
    225e:	2c f4       	brge	.+10     	; 0x226a <LCD_vidInit+0x5a6>
		__ticks = 1;
    2260:	81 e0       	ldi	r24, 0x01	; 1
    2262:	90 e0       	ldi	r25, 0x00	; 0
    2264:	9e 83       	std	Y+6, r25	; 0x06
    2266:	8d 83       	std	Y+5, r24	; 0x05
    2268:	3f c0       	rjmp	.+126    	; 0x22e8 <LCD_vidInit+0x624>
	else if (__tmp > 65535)
    226a:	6f 81       	ldd	r22, Y+7	; 0x07
    226c:	78 85       	ldd	r23, Y+8	; 0x08
    226e:	89 85       	ldd	r24, Y+9	; 0x09
    2270:	9a 85       	ldd	r25, Y+10	; 0x0a
    2272:	20 e0       	ldi	r18, 0x00	; 0
    2274:	3f ef       	ldi	r19, 0xFF	; 255
    2276:	4f e7       	ldi	r20, 0x7F	; 127
    2278:	57 e4       	ldi	r21, 0x47	; 71
    227a:	0e 94 25 04 	call	0x84a	; 0x84a <__gtsf2>
    227e:	18 16       	cp	r1, r24
    2280:	4c f5       	brge	.+82     	; 0x22d4 <LCD_vidInit+0x610>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2282:	6b 85       	ldd	r22, Y+11	; 0x0b
    2284:	7c 85       	ldd	r23, Y+12	; 0x0c
    2286:	8d 85       	ldd	r24, Y+13	; 0x0d
    2288:	9e 85       	ldd	r25, Y+14	; 0x0e
    228a:	20 e0       	ldi	r18, 0x00	; 0
    228c:	30 e0       	ldi	r19, 0x00	; 0
    228e:	40 e2       	ldi	r20, 0x20	; 32
    2290:	51 e4       	ldi	r21, 0x41	; 65
    2292:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2296:	dc 01       	movw	r26, r24
    2298:	cb 01       	movw	r24, r22
    229a:	bc 01       	movw	r22, r24
    229c:	cd 01       	movw	r24, r26
    229e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22a2:	dc 01       	movw	r26, r24
    22a4:	cb 01       	movw	r24, r22
    22a6:	9e 83       	std	Y+6, r25	; 0x06
    22a8:	8d 83       	std	Y+5, r24	; 0x05
    22aa:	0f c0       	rjmp	.+30     	; 0x22ca <LCD_vidInit+0x606>
    22ac:	80 e9       	ldi	r24, 0x90	; 144
    22ae:	91 e0       	ldi	r25, 0x01	; 1
    22b0:	9c 83       	std	Y+4, r25	; 0x04
    22b2:	8b 83       	std	Y+3, r24	; 0x03
    22b4:	8b 81       	ldd	r24, Y+3	; 0x03
    22b6:	9c 81       	ldd	r25, Y+4	; 0x04
    22b8:	01 97       	sbiw	r24, 0x01	; 1
    22ba:	f1 f7       	brne	.-4      	; 0x22b8 <LCD_vidInit+0x5f4>
    22bc:	9c 83       	std	Y+4, r25	; 0x04
    22be:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22c0:	8d 81       	ldd	r24, Y+5	; 0x05
    22c2:	9e 81       	ldd	r25, Y+6	; 0x06
    22c4:	01 97       	sbiw	r24, 0x01	; 1
    22c6:	9e 83       	std	Y+6, r25	; 0x06
    22c8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22ca:	8d 81       	ldd	r24, Y+5	; 0x05
    22cc:	9e 81       	ldd	r25, Y+6	; 0x06
    22ce:	00 97       	sbiw	r24, 0x00	; 0
    22d0:	69 f7       	brne	.-38     	; 0x22ac <LCD_vidInit+0x5e8>
    22d2:	14 c0       	rjmp	.+40     	; 0x22fc <LCD_vidInit+0x638>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22d4:	6f 81       	ldd	r22, Y+7	; 0x07
    22d6:	78 85       	ldd	r23, Y+8	; 0x08
    22d8:	89 85       	ldd	r24, Y+9	; 0x09
    22da:	9a 85       	ldd	r25, Y+10	; 0x0a
    22dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22e0:	dc 01       	movw	r26, r24
    22e2:	cb 01       	movw	r24, r22
    22e4:	9e 83       	std	Y+6, r25	; 0x06
    22e6:	8d 83       	std	Y+5, r24	; 0x05
    22e8:	8d 81       	ldd	r24, Y+5	; 0x05
    22ea:	9e 81       	ldd	r25, Y+6	; 0x06
    22ec:	9a 83       	std	Y+2, r25	; 0x02
    22ee:	89 83       	std	Y+1, r24	; 0x01
    22f0:	89 81       	ldd	r24, Y+1	; 0x01
    22f2:	9a 81       	ldd	r25, Y+2	; 0x02
    22f4:	01 97       	sbiw	r24, 0x01	; 1
    22f6:	f1 f7       	brne	.-4      	; 0x22f4 <LCD_vidInit+0x630>
    22f8:	9a 83       	std	Y+2, r25	; 0x02
    22fa:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

}
    22fc:	cc 5a       	subi	r28, 0xAC	; 172
    22fe:	df 4f       	sbci	r29, 0xFF	; 255
    2300:	0f b6       	in	r0, 0x3f	; 63
    2302:	f8 94       	cli
    2304:	de bf       	out	0x3e, r29	; 62
    2306:	0f be       	out	0x3f, r0	; 63
    2308:	cd bf       	out	0x3d, r28	; 61
    230a:	cf 91       	pop	r28
    230c:	df 91       	pop	r29
    230e:	1f 91       	pop	r17
    2310:	0f 91       	pop	r16
    2312:	08 95       	ret

00002314 <LCD_vidSendCommand>:
/* Description! Interface to send the configuration commands to the LCD Driver         */
/* Input      ! Command number                                                         */
/* Output     ! Nothing                                                                */
/***************************************************************************************/
void LCD_vidSendCommand(uint8 u8CmdCpy)
{
    2314:	df 93       	push	r29
    2316:	cf 93       	push	r28
    2318:	cd b7       	in	r28, 0x3d	; 61
    231a:	de b7       	in	r29, 0x3e	; 62
    231c:	6d 97       	sbiw	r28, 0x1d	; 29
    231e:	0f b6       	in	r0, 0x3f	; 63
    2320:	f8 94       	cli
    2322:	de bf       	out	0x3e, r29	; 62
    2324:	0f be       	out	0x3f, r0	; 63
    2326:	cd bf       	out	0x3d, r28	; 61
    2328:	8d 8f       	std	Y+29, r24	; 0x1d

	/* Set RS to LOW */
	DIO_WriteOnPin(PC, PIN5, LOWV);
    232a:	82 e0       	ldi	r24, 0x02	; 2
    232c:	65 e0       	ldi	r22, 0x05	; 5
    232e:	40 e0       	ldi	r20, 0x00	; 0
    2330:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <DIO_WriteOnPin>

	/* Set R/W to LOW */
	DIO_WriteOnPin(PC, PIN6, LOWV);
    2334:	82 e0       	ldi	r24, 0x02	; 2
    2336:	66 e0       	ldi	r22, 0x06	; 6
    2338:	40 e0       	ldi	r20, 0x00	; 0
    233a:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <DIO_WriteOnPin>

	/* Set E to HIGH  */
	DIO_WriteOnPin(PC, PIN7, HIGHV);
    233e:	82 e0       	ldi	r24, 0x02	; 2
    2340:	67 e0       	ldi	r22, 0x07	; 7
    2342:	41 e0       	ldi	r20, 0x01	; 1
    2344:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <DIO_WriteOnPin>

	/* Load Command on Data bus */
	DIO_WriteOnPort(PD, u8CmdCpy);
    2348:	83 e0       	ldi	r24, 0x03	; 3
    234a:	6d 8d       	ldd	r22, Y+29	; 0x1d
    234c:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <DIO_WriteOnPort>

	/* Set E to LOW */
	DIO_WriteOnPin(PC, PIN7, LOWV);
    2350:	82 e0       	ldi	r24, 0x02	; 2
    2352:	67 e0       	ldi	r22, 0x07	; 7
    2354:	40 e0       	ldi	r20, 0x00	; 0
    2356:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <DIO_WriteOnPin>
    235a:	80 e0       	ldi	r24, 0x00	; 0
    235c:	90 e0       	ldi	r25, 0x00	; 0
    235e:	a0 ea       	ldi	r26, 0xA0	; 160
    2360:	b0 e4       	ldi	r27, 0x40	; 64
    2362:	89 8f       	std	Y+25, r24	; 0x19
    2364:	9a 8f       	std	Y+26, r25	; 0x1a
    2366:	ab 8f       	std	Y+27, r26	; 0x1b
    2368:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    236a:	69 8d       	ldd	r22, Y+25	; 0x19
    236c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    236e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2370:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2372:	20 e0       	ldi	r18, 0x00	; 0
    2374:	30 e0       	ldi	r19, 0x00	; 0
    2376:	4a e7       	ldi	r20, 0x7A	; 122
    2378:	55 e4       	ldi	r21, 0x45	; 69
    237a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    237e:	dc 01       	movw	r26, r24
    2380:	cb 01       	movw	r24, r22
    2382:	8d 8b       	std	Y+21, r24	; 0x15
    2384:	9e 8b       	std	Y+22, r25	; 0x16
    2386:	af 8b       	std	Y+23, r26	; 0x17
    2388:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    238a:	6d 89       	ldd	r22, Y+21	; 0x15
    238c:	7e 89       	ldd	r23, Y+22	; 0x16
    238e:	8f 89       	ldd	r24, Y+23	; 0x17
    2390:	98 8d       	ldd	r25, Y+24	; 0x18
    2392:	20 e0       	ldi	r18, 0x00	; 0
    2394:	30 e0       	ldi	r19, 0x00	; 0
    2396:	40 e8       	ldi	r20, 0x80	; 128
    2398:	5f e3       	ldi	r21, 0x3F	; 63
    239a:	0e 94 85 04 	call	0x90a	; 0x90a <__ltsf2>
    239e:	88 23       	and	r24, r24
    23a0:	2c f4       	brge	.+10     	; 0x23ac <LCD_vidSendCommand+0x98>
		__ticks = 1;
    23a2:	81 e0       	ldi	r24, 0x01	; 1
    23a4:	90 e0       	ldi	r25, 0x00	; 0
    23a6:	9c 8b       	std	Y+20, r25	; 0x14
    23a8:	8b 8b       	std	Y+19, r24	; 0x13
    23aa:	3f c0       	rjmp	.+126    	; 0x242a <LCD_vidSendCommand+0x116>
	else if (__tmp > 65535)
    23ac:	6d 89       	ldd	r22, Y+21	; 0x15
    23ae:	7e 89       	ldd	r23, Y+22	; 0x16
    23b0:	8f 89       	ldd	r24, Y+23	; 0x17
    23b2:	98 8d       	ldd	r25, Y+24	; 0x18
    23b4:	20 e0       	ldi	r18, 0x00	; 0
    23b6:	3f ef       	ldi	r19, 0xFF	; 255
    23b8:	4f e7       	ldi	r20, 0x7F	; 127
    23ba:	57 e4       	ldi	r21, 0x47	; 71
    23bc:	0e 94 25 04 	call	0x84a	; 0x84a <__gtsf2>
    23c0:	18 16       	cp	r1, r24
    23c2:	4c f5       	brge	.+82     	; 0x2416 <LCD_vidSendCommand+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23c4:	69 8d       	ldd	r22, Y+25	; 0x19
    23c6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23c8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23ca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23cc:	20 e0       	ldi	r18, 0x00	; 0
    23ce:	30 e0       	ldi	r19, 0x00	; 0
    23d0:	40 e2       	ldi	r20, 0x20	; 32
    23d2:	51 e4       	ldi	r21, 0x41	; 65
    23d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23d8:	dc 01       	movw	r26, r24
    23da:	cb 01       	movw	r24, r22
    23dc:	bc 01       	movw	r22, r24
    23de:	cd 01       	movw	r24, r26
    23e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23e4:	dc 01       	movw	r26, r24
    23e6:	cb 01       	movw	r24, r22
    23e8:	9c 8b       	std	Y+20, r25	; 0x14
    23ea:	8b 8b       	std	Y+19, r24	; 0x13
    23ec:	0f c0       	rjmp	.+30     	; 0x240c <LCD_vidSendCommand+0xf8>
    23ee:	80 e9       	ldi	r24, 0x90	; 144
    23f0:	91 e0       	ldi	r25, 0x01	; 1
    23f2:	9a 8b       	std	Y+18, r25	; 0x12
    23f4:	89 8b       	std	Y+17, r24	; 0x11
    23f6:	89 89       	ldd	r24, Y+17	; 0x11
    23f8:	9a 89       	ldd	r25, Y+18	; 0x12
    23fa:	01 97       	sbiw	r24, 0x01	; 1
    23fc:	f1 f7       	brne	.-4      	; 0x23fa <LCD_vidSendCommand+0xe6>
    23fe:	9a 8b       	std	Y+18, r25	; 0x12
    2400:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2402:	8b 89       	ldd	r24, Y+19	; 0x13
    2404:	9c 89       	ldd	r25, Y+20	; 0x14
    2406:	01 97       	sbiw	r24, 0x01	; 1
    2408:	9c 8b       	std	Y+20, r25	; 0x14
    240a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    240c:	8b 89       	ldd	r24, Y+19	; 0x13
    240e:	9c 89       	ldd	r25, Y+20	; 0x14
    2410:	00 97       	sbiw	r24, 0x00	; 0
    2412:	69 f7       	brne	.-38     	; 0x23ee <LCD_vidSendCommand+0xda>
    2414:	14 c0       	rjmp	.+40     	; 0x243e <LCD_vidSendCommand+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2416:	6d 89       	ldd	r22, Y+21	; 0x15
    2418:	7e 89       	ldd	r23, Y+22	; 0x16
    241a:	8f 89       	ldd	r24, Y+23	; 0x17
    241c:	98 8d       	ldd	r25, Y+24	; 0x18
    241e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2422:	dc 01       	movw	r26, r24
    2424:	cb 01       	movw	r24, r22
    2426:	9c 8b       	std	Y+20, r25	; 0x14
    2428:	8b 8b       	std	Y+19, r24	; 0x13
    242a:	8b 89       	ldd	r24, Y+19	; 0x13
    242c:	9c 89       	ldd	r25, Y+20	; 0x14
    242e:	98 8b       	std	Y+16, r25	; 0x10
    2430:	8f 87       	std	Y+15, r24	; 0x0f
    2432:	8f 85       	ldd	r24, Y+15	; 0x0f
    2434:	98 89       	ldd	r25, Y+16	; 0x10
    2436:	01 97       	sbiw	r24, 0x01	; 1
    2438:	f1 f7       	brne	.-4      	; 0x2436 <LCD_vidSendCommand+0x122>
    243a:	98 8b       	std	Y+16, r25	; 0x10
    243c:	8f 87       	std	Y+15, r24	; 0x0f

	/* Wait for E to settle */
	_delay_ms(5);

	/* Set E to HIGH */
	DIO_WriteOnPin(PC, PIN7, HIGHV);
    243e:	82 e0       	ldi	r24, 0x02	; 2
    2440:	67 e0       	ldi	r22, 0x07	; 7
    2442:	41 e0       	ldi	r20, 0x01	; 1
    2444:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <DIO_WriteOnPin>
    2448:	80 e0       	ldi	r24, 0x00	; 0
    244a:	90 e0       	ldi	r25, 0x00	; 0
    244c:	a0 e2       	ldi	r26, 0x20	; 32
    244e:	b1 e4       	ldi	r27, 0x41	; 65
    2450:	8b 87       	std	Y+11, r24	; 0x0b
    2452:	9c 87       	std	Y+12, r25	; 0x0c
    2454:	ad 87       	std	Y+13, r26	; 0x0d
    2456:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2458:	6b 85       	ldd	r22, Y+11	; 0x0b
    245a:	7c 85       	ldd	r23, Y+12	; 0x0c
    245c:	8d 85       	ldd	r24, Y+13	; 0x0d
    245e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2460:	20 e0       	ldi	r18, 0x00	; 0
    2462:	30 e0       	ldi	r19, 0x00	; 0
    2464:	4a e7       	ldi	r20, 0x7A	; 122
    2466:	55 e4       	ldi	r21, 0x45	; 69
    2468:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    246c:	dc 01       	movw	r26, r24
    246e:	cb 01       	movw	r24, r22
    2470:	8f 83       	std	Y+7, r24	; 0x07
    2472:	98 87       	std	Y+8, r25	; 0x08
    2474:	a9 87       	std	Y+9, r26	; 0x09
    2476:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2478:	6f 81       	ldd	r22, Y+7	; 0x07
    247a:	78 85       	ldd	r23, Y+8	; 0x08
    247c:	89 85       	ldd	r24, Y+9	; 0x09
    247e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2480:	20 e0       	ldi	r18, 0x00	; 0
    2482:	30 e0       	ldi	r19, 0x00	; 0
    2484:	40 e8       	ldi	r20, 0x80	; 128
    2486:	5f e3       	ldi	r21, 0x3F	; 63
    2488:	0e 94 85 04 	call	0x90a	; 0x90a <__ltsf2>
    248c:	88 23       	and	r24, r24
    248e:	2c f4       	brge	.+10     	; 0x249a <LCD_vidSendCommand+0x186>
		__ticks = 1;
    2490:	81 e0       	ldi	r24, 0x01	; 1
    2492:	90 e0       	ldi	r25, 0x00	; 0
    2494:	9e 83       	std	Y+6, r25	; 0x06
    2496:	8d 83       	std	Y+5, r24	; 0x05
    2498:	3f c0       	rjmp	.+126    	; 0x2518 <LCD_vidSendCommand+0x204>
	else if (__tmp > 65535)
    249a:	6f 81       	ldd	r22, Y+7	; 0x07
    249c:	78 85       	ldd	r23, Y+8	; 0x08
    249e:	89 85       	ldd	r24, Y+9	; 0x09
    24a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    24a2:	20 e0       	ldi	r18, 0x00	; 0
    24a4:	3f ef       	ldi	r19, 0xFF	; 255
    24a6:	4f e7       	ldi	r20, 0x7F	; 127
    24a8:	57 e4       	ldi	r21, 0x47	; 71
    24aa:	0e 94 25 04 	call	0x84a	; 0x84a <__gtsf2>
    24ae:	18 16       	cp	r1, r24
    24b0:	4c f5       	brge	.+82     	; 0x2504 <LCD_vidSendCommand+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    24b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    24b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    24b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    24ba:	20 e0       	ldi	r18, 0x00	; 0
    24bc:	30 e0       	ldi	r19, 0x00	; 0
    24be:	40 e2       	ldi	r20, 0x20	; 32
    24c0:	51 e4       	ldi	r21, 0x41	; 65
    24c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24c6:	dc 01       	movw	r26, r24
    24c8:	cb 01       	movw	r24, r22
    24ca:	bc 01       	movw	r22, r24
    24cc:	cd 01       	movw	r24, r26
    24ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24d2:	dc 01       	movw	r26, r24
    24d4:	cb 01       	movw	r24, r22
    24d6:	9e 83       	std	Y+6, r25	; 0x06
    24d8:	8d 83       	std	Y+5, r24	; 0x05
    24da:	0f c0       	rjmp	.+30     	; 0x24fa <LCD_vidSendCommand+0x1e6>
    24dc:	80 e9       	ldi	r24, 0x90	; 144
    24de:	91 e0       	ldi	r25, 0x01	; 1
    24e0:	9c 83       	std	Y+4, r25	; 0x04
    24e2:	8b 83       	std	Y+3, r24	; 0x03
    24e4:	8b 81       	ldd	r24, Y+3	; 0x03
    24e6:	9c 81       	ldd	r25, Y+4	; 0x04
    24e8:	01 97       	sbiw	r24, 0x01	; 1
    24ea:	f1 f7       	brne	.-4      	; 0x24e8 <LCD_vidSendCommand+0x1d4>
    24ec:	9c 83       	std	Y+4, r25	; 0x04
    24ee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24f0:	8d 81       	ldd	r24, Y+5	; 0x05
    24f2:	9e 81       	ldd	r25, Y+6	; 0x06
    24f4:	01 97       	sbiw	r24, 0x01	; 1
    24f6:	9e 83       	std	Y+6, r25	; 0x06
    24f8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24fa:	8d 81       	ldd	r24, Y+5	; 0x05
    24fc:	9e 81       	ldd	r25, Y+6	; 0x06
    24fe:	00 97       	sbiw	r24, 0x00	; 0
    2500:	69 f7       	brne	.-38     	; 0x24dc <LCD_vidSendCommand+0x1c8>
    2502:	14 c0       	rjmp	.+40     	; 0x252c <LCD_vidSendCommand+0x218>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2504:	6f 81       	ldd	r22, Y+7	; 0x07
    2506:	78 85       	ldd	r23, Y+8	; 0x08
    2508:	89 85       	ldd	r24, Y+9	; 0x09
    250a:	9a 85       	ldd	r25, Y+10	; 0x0a
    250c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2510:	dc 01       	movw	r26, r24
    2512:	cb 01       	movw	r24, r22
    2514:	9e 83       	std	Y+6, r25	; 0x06
    2516:	8d 83       	std	Y+5, r24	; 0x05
    2518:	8d 81       	ldd	r24, Y+5	; 0x05
    251a:	9e 81       	ldd	r25, Y+6	; 0x06
    251c:	9a 83       	std	Y+2, r25	; 0x02
    251e:	89 83       	std	Y+1, r24	; 0x01
    2520:	89 81       	ldd	r24, Y+1	; 0x01
    2522:	9a 81       	ldd	r25, Y+2	; 0x02
    2524:	01 97       	sbiw	r24, 0x01	; 1
    2526:	f1 f7       	brne	.-4      	; 0x2524 <LCD_vidSendCommand+0x210>
    2528:	9a 83       	std	Y+2, r25	; 0x02
    252a:	89 83       	std	Y+1, r24	; 0x01

	/* Delay for 10ms to let the LCD execute command */
	_delay_ms(10);

}
    252c:	6d 96       	adiw	r28, 0x1d	; 29
    252e:	0f b6       	in	r0, 0x3f	; 63
    2530:	f8 94       	cli
    2532:	de bf       	out	0x3e, r29	; 62
    2534:	0f be       	out	0x3f, r0	; 63
    2536:	cd bf       	out	0x3d, r28	; 61
    2538:	cf 91       	pop	r28
    253a:	df 91       	pop	r29
    253c:	08 95       	ret

0000253e <LCD_vidWriteChar>:
/* Description! Interface to write character on LCD screen                             */
/* Input      ! Data to send                                                           */
/* Output     ! Nothing                                                                */
/***************************************************************************************/
void LCD_vidWriteChar(uint8 u8DataCpy)
{
    253e:	df 93       	push	r29
    2540:	cf 93       	push	r28
    2542:	cd b7       	in	r28, 0x3d	; 61
    2544:	de b7       	in	r29, 0x3e	; 62
    2546:	6d 97       	sbiw	r28, 0x1d	; 29
    2548:	0f b6       	in	r0, 0x3f	; 63
    254a:	f8 94       	cli
    254c:	de bf       	out	0x3e, r29	; 62
    254e:	0f be       	out	0x3f, r0	; 63
    2550:	cd bf       	out	0x3d, r28	; 61
    2552:	8d 8f       	std	Y+29, r24	; 0x1d
	/* Set RS to HIG */
	DIO_WriteOnPin(PC, PIN5, HIGHV);
    2554:	82 e0       	ldi	r24, 0x02	; 2
    2556:	65 e0       	ldi	r22, 0x05	; 5
    2558:	41 e0       	ldi	r20, 0x01	; 1
    255a:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <DIO_WriteOnPin>

	/* Set R/W to LOW */
	DIO_WriteOnPin(PC, PIN6, LOWV);
    255e:	82 e0       	ldi	r24, 0x02	; 2
    2560:	66 e0       	ldi	r22, 0x06	; 6
    2562:	40 e0       	ldi	r20, 0x00	; 0
    2564:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <DIO_WriteOnPin>

	/* Set E to HIGH */
	DIO_WriteOnPin(PC, PIN7, HIGHV);
    2568:	82 e0       	ldi	r24, 0x02	; 2
    256a:	67 e0       	ldi	r22, 0x07	; 7
    256c:	41 e0       	ldi	r20, 0x01	; 1
    256e:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <DIO_WriteOnPin>

	/* Load Command on Data bus */
	DIO_WriteOnPort(PD, u8DataCpy);
    2572:	83 e0       	ldi	r24, 0x03	; 3
    2574:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2576:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <DIO_WriteOnPort>

	/* Set E to LOW */
	DIO_WriteOnPin(PC, PIN7, LOWV);
    257a:	82 e0       	ldi	r24, 0x02	; 2
    257c:	67 e0       	ldi	r22, 0x07	; 7
    257e:	40 e0       	ldi	r20, 0x00	; 0
    2580:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <DIO_WriteOnPin>
    2584:	80 e0       	ldi	r24, 0x00	; 0
    2586:	90 e0       	ldi	r25, 0x00	; 0
    2588:	a0 ea       	ldi	r26, 0xA0	; 160
    258a:	b0 e4       	ldi	r27, 0x40	; 64
    258c:	89 8f       	std	Y+25, r24	; 0x19
    258e:	9a 8f       	std	Y+26, r25	; 0x1a
    2590:	ab 8f       	std	Y+27, r26	; 0x1b
    2592:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2594:	69 8d       	ldd	r22, Y+25	; 0x19
    2596:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2598:	8b 8d       	ldd	r24, Y+27	; 0x1b
    259a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    259c:	20 e0       	ldi	r18, 0x00	; 0
    259e:	30 e0       	ldi	r19, 0x00	; 0
    25a0:	4a e7       	ldi	r20, 0x7A	; 122
    25a2:	55 e4       	ldi	r21, 0x45	; 69
    25a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25a8:	dc 01       	movw	r26, r24
    25aa:	cb 01       	movw	r24, r22
    25ac:	8d 8b       	std	Y+21, r24	; 0x15
    25ae:	9e 8b       	std	Y+22, r25	; 0x16
    25b0:	af 8b       	std	Y+23, r26	; 0x17
    25b2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    25b4:	6d 89       	ldd	r22, Y+21	; 0x15
    25b6:	7e 89       	ldd	r23, Y+22	; 0x16
    25b8:	8f 89       	ldd	r24, Y+23	; 0x17
    25ba:	98 8d       	ldd	r25, Y+24	; 0x18
    25bc:	20 e0       	ldi	r18, 0x00	; 0
    25be:	30 e0       	ldi	r19, 0x00	; 0
    25c0:	40 e8       	ldi	r20, 0x80	; 128
    25c2:	5f e3       	ldi	r21, 0x3F	; 63
    25c4:	0e 94 85 04 	call	0x90a	; 0x90a <__ltsf2>
    25c8:	88 23       	and	r24, r24
    25ca:	2c f4       	brge	.+10     	; 0x25d6 <LCD_vidWriteChar+0x98>
		__ticks = 1;
    25cc:	81 e0       	ldi	r24, 0x01	; 1
    25ce:	90 e0       	ldi	r25, 0x00	; 0
    25d0:	9c 8b       	std	Y+20, r25	; 0x14
    25d2:	8b 8b       	std	Y+19, r24	; 0x13
    25d4:	3f c0       	rjmp	.+126    	; 0x2654 <LCD_vidWriteChar+0x116>
	else if (__tmp > 65535)
    25d6:	6d 89       	ldd	r22, Y+21	; 0x15
    25d8:	7e 89       	ldd	r23, Y+22	; 0x16
    25da:	8f 89       	ldd	r24, Y+23	; 0x17
    25dc:	98 8d       	ldd	r25, Y+24	; 0x18
    25de:	20 e0       	ldi	r18, 0x00	; 0
    25e0:	3f ef       	ldi	r19, 0xFF	; 255
    25e2:	4f e7       	ldi	r20, 0x7F	; 127
    25e4:	57 e4       	ldi	r21, 0x47	; 71
    25e6:	0e 94 25 04 	call	0x84a	; 0x84a <__gtsf2>
    25ea:	18 16       	cp	r1, r24
    25ec:	4c f5       	brge	.+82     	; 0x2640 <LCD_vidWriteChar+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25ee:	69 8d       	ldd	r22, Y+25	; 0x19
    25f0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25f2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25f4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25f6:	20 e0       	ldi	r18, 0x00	; 0
    25f8:	30 e0       	ldi	r19, 0x00	; 0
    25fa:	40 e2       	ldi	r20, 0x20	; 32
    25fc:	51 e4       	ldi	r21, 0x41	; 65
    25fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2602:	dc 01       	movw	r26, r24
    2604:	cb 01       	movw	r24, r22
    2606:	bc 01       	movw	r22, r24
    2608:	cd 01       	movw	r24, r26
    260a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    260e:	dc 01       	movw	r26, r24
    2610:	cb 01       	movw	r24, r22
    2612:	9c 8b       	std	Y+20, r25	; 0x14
    2614:	8b 8b       	std	Y+19, r24	; 0x13
    2616:	0f c0       	rjmp	.+30     	; 0x2636 <LCD_vidWriteChar+0xf8>
    2618:	80 e9       	ldi	r24, 0x90	; 144
    261a:	91 e0       	ldi	r25, 0x01	; 1
    261c:	9a 8b       	std	Y+18, r25	; 0x12
    261e:	89 8b       	std	Y+17, r24	; 0x11
    2620:	89 89       	ldd	r24, Y+17	; 0x11
    2622:	9a 89       	ldd	r25, Y+18	; 0x12
    2624:	01 97       	sbiw	r24, 0x01	; 1
    2626:	f1 f7       	brne	.-4      	; 0x2624 <LCD_vidWriteChar+0xe6>
    2628:	9a 8b       	std	Y+18, r25	; 0x12
    262a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    262c:	8b 89       	ldd	r24, Y+19	; 0x13
    262e:	9c 89       	ldd	r25, Y+20	; 0x14
    2630:	01 97       	sbiw	r24, 0x01	; 1
    2632:	9c 8b       	std	Y+20, r25	; 0x14
    2634:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2636:	8b 89       	ldd	r24, Y+19	; 0x13
    2638:	9c 89       	ldd	r25, Y+20	; 0x14
    263a:	00 97       	sbiw	r24, 0x00	; 0
    263c:	69 f7       	brne	.-38     	; 0x2618 <LCD_vidWriteChar+0xda>
    263e:	14 c0       	rjmp	.+40     	; 0x2668 <LCD_vidWriteChar+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2640:	6d 89       	ldd	r22, Y+21	; 0x15
    2642:	7e 89       	ldd	r23, Y+22	; 0x16
    2644:	8f 89       	ldd	r24, Y+23	; 0x17
    2646:	98 8d       	ldd	r25, Y+24	; 0x18
    2648:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    264c:	dc 01       	movw	r26, r24
    264e:	cb 01       	movw	r24, r22
    2650:	9c 8b       	std	Y+20, r25	; 0x14
    2652:	8b 8b       	std	Y+19, r24	; 0x13
    2654:	8b 89       	ldd	r24, Y+19	; 0x13
    2656:	9c 89       	ldd	r25, Y+20	; 0x14
    2658:	98 8b       	std	Y+16, r25	; 0x10
    265a:	8f 87       	std	Y+15, r24	; 0x0f
    265c:	8f 85       	ldd	r24, Y+15	; 0x0f
    265e:	98 89       	ldd	r25, Y+16	; 0x10
    2660:	01 97       	sbiw	r24, 0x01	; 1
    2662:	f1 f7       	brne	.-4      	; 0x2660 <LCD_vidWriteChar+0x122>
    2664:	98 8b       	std	Y+16, r25	; 0x10
    2666:	8f 87       	std	Y+15, r24	; 0x0f

	/* Wait for E to settle */
	_delay_ms(5);

	/* Set E to HIGH */
	DIO_WriteOnPin(PC, PIN7, HIGHV);
    2668:	82 e0       	ldi	r24, 0x02	; 2
    266a:	67 e0       	ldi	r22, 0x07	; 7
    266c:	41 e0       	ldi	r20, 0x01	; 1
    266e:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <DIO_WriteOnPin>
    2672:	80 e0       	ldi	r24, 0x00	; 0
    2674:	90 e0       	ldi	r25, 0x00	; 0
    2676:	a0 e2       	ldi	r26, 0x20	; 32
    2678:	b1 e4       	ldi	r27, 0x41	; 65
    267a:	8b 87       	std	Y+11, r24	; 0x0b
    267c:	9c 87       	std	Y+12, r25	; 0x0c
    267e:	ad 87       	std	Y+13, r26	; 0x0d
    2680:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2682:	6b 85       	ldd	r22, Y+11	; 0x0b
    2684:	7c 85       	ldd	r23, Y+12	; 0x0c
    2686:	8d 85       	ldd	r24, Y+13	; 0x0d
    2688:	9e 85       	ldd	r25, Y+14	; 0x0e
    268a:	20 e0       	ldi	r18, 0x00	; 0
    268c:	30 e0       	ldi	r19, 0x00	; 0
    268e:	4a e7       	ldi	r20, 0x7A	; 122
    2690:	55 e4       	ldi	r21, 0x45	; 69
    2692:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2696:	dc 01       	movw	r26, r24
    2698:	cb 01       	movw	r24, r22
    269a:	8f 83       	std	Y+7, r24	; 0x07
    269c:	98 87       	std	Y+8, r25	; 0x08
    269e:	a9 87       	std	Y+9, r26	; 0x09
    26a0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    26a2:	6f 81       	ldd	r22, Y+7	; 0x07
    26a4:	78 85       	ldd	r23, Y+8	; 0x08
    26a6:	89 85       	ldd	r24, Y+9	; 0x09
    26a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    26aa:	20 e0       	ldi	r18, 0x00	; 0
    26ac:	30 e0       	ldi	r19, 0x00	; 0
    26ae:	40 e8       	ldi	r20, 0x80	; 128
    26b0:	5f e3       	ldi	r21, 0x3F	; 63
    26b2:	0e 94 85 04 	call	0x90a	; 0x90a <__ltsf2>
    26b6:	88 23       	and	r24, r24
    26b8:	2c f4       	brge	.+10     	; 0x26c4 <LCD_vidWriteChar+0x186>
		__ticks = 1;
    26ba:	81 e0       	ldi	r24, 0x01	; 1
    26bc:	90 e0       	ldi	r25, 0x00	; 0
    26be:	9e 83       	std	Y+6, r25	; 0x06
    26c0:	8d 83       	std	Y+5, r24	; 0x05
    26c2:	3f c0       	rjmp	.+126    	; 0x2742 <LCD_vidWriteChar+0x204>
	else if (__tmp > 65535)
    26c4:	6f 81       	ldd	r22, Y+7	; 0x07
    26c6:	78 85       	ldd	r23, Y+8	; 0x08
    26c8:	89 85       	ldd	r24, Y+9	; 0x09
    26ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    26cc:	20 e0       	ldi	r18, 0x00	; 0
    26ce:	3f ef       	ldi	r19, 0xFF	; 255
    26d0:	4f e7       	ldi	r20, 0x7F	; 127
    26d2:	57 e4       	ldi	r21, 0x47	; 71
    26d4:	0e 94 25 04 	call	0x84a	; 0x84a <__gtsf2>
    26d8:	18 16       	cp	r1, r24
    26da:	4c f5       	brge	.+82     	; 0x272e <LCD_vidWriteChar+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    26de:	7c 85       	ldd	r23, Y+12	; 0x0c
    26e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    26e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    26e4:	20 e0       	ldi	r18, 0x00	; 0
    26e6:	30 e0       	ldi	r19, 0x00	; 0
    26e8:	40 e2       	ldi	r20, 0x20	; 32
    26ea:	51 e4       	ldi	r21, 0x41	; 65
    26ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26f0:	dc 01       	movw	r26, r24
    26f2:	cb 01       	movw	r24, r22
    26f4:	bc 01       	movw	r22, r24
    26f6:	cd 01       	movw	r24, r26
    26f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26fc:	dc 01       	movw	r26, r24
    26fe:	cb 01       	movw	r24, r22
    2700:	9e 83       	std	Y+6, r25	; 0x06
    2702:	8d 83       	std	Y+5, r24	; 0x05
    2704:	0f c0       	rjmp	.+30     	; 0x2724 <LCD_vidWriteChar+0x1e6>
    2706:	80 e9       	ldi	r24, 0x90	; 144
    2708:	91 e0       	ldi	r25, 0x01	; 1
    270a:	9c 83       	std	Y+4, r25	; 0x04
    270c:	8b 83       	std	Y+3, r24	; 0x03
    270e:	8b 81       	ldd	r24, Y+3	; 0x03
    2710:	9c 81       	ldd	r25, Y+4	; 0x04
    2712:	01 97       	sbiw	r24, 0x01	; 1
    2714:	f1 f7       	brne	.-4      	; 0x2712 <LCD_vidWriteChar+0x1d4>
    2716:	9c 83       	std	Y+4, r25	; 0x04
    2718:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    271a:	8d 81       	ldd	r24, Y+5	; 0x05
    271c:	9e 81       	ldd	r25, Y+6	; 0x06
    271e:	01 97       	sbiw	r24, 0x01	; 1
    2720:	9e 83       	std	Y+6, r25	; 0x06
    2722:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2724:	8d 81       	ldd	r24, Y+5	; 0x05
    2726:	9e 81       	ldd	r25, Y+6	; 0x06
    2728:	00 97       	sbiw	r24, 0x00	; 0
    272a:	69 f7       	brne	.-38     	; 0x2706 <LCD_vidWriteChar+0x1c8>
    272c:	14 c0       	rjmp	.+40     	; 0x2756 <LCD_vidWriteChar+0x218>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    272e:	6f 81       	ldd	r22, Y+7	; 0x07
    2730:	78 85       	ldd	r23, Y+8	; 0x08
    2732:	89 85       	ldd	r24, Y+9	; 0x09
    2734:	9a 85       	ldd	r25, Y+10	; 0x0a
    2736:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    273a:	dc 01       	movw	r26, r24
    273c:	cb 01       	movw	r24, r22
    273e:	9e 83       	std	Y+6, r25	; 0x06
    2740:	8d 83       	std	Y+5, r24	; 0x05
    2742:	8d 81       	ldd	r24, Y+5	; 0x05
    2744:	9e 81       	ldd	r25, Y+6	; 0x06
    2746:	9a 83       	std	Y+2, r25	; 0x02
    2748:	89 83       	std	Y+1, r24	; 0x01
    274a:	89 81       	ldd	r24, Y+1	; 0x01
    274c:	9a 81       	ldd	r25, Y+2	; 0x02
    274e:	01 97       	sbiw	r24, 0x01	; 1
    2750:	f1 f7       	brne	.-4      	; 0x274e <LCD_vidWriteChar+0x210>
    2752:	9a 83       	std	Y+2, r25	; 0x02
    2754:	89 83       	std	Y+1, r24	; 0x01

	/* Delay to let the LCD Display the character */
	_delay_ms(10);

}
    2756:	6d 96       	adiw	r28, 0x1d	; 29
    2758:	0f b6       	in	r0, 0x3f	; 63
    275a:	f8 94       	cli
    275c:	de bf       	out	0x3e, r29	; 62
    275e:	0f be       	out	0x3f, r0	; 63
    2760:	cd bf       	out	0x3d, r28	; 61
    2762:	cf 91       	pop	r28
    2764:	df 91       	pop	r29
    2766:	08 95       	ret

00002768 <LCD_vidWriteString>:
/* Description! Interface to write string on LCD screen                                */
/* Input      ! Pointer to the string                                                  */
/* Output     ! Nothing                                                                */
/***************************************************************************************/
void LCD_vidWriteString (uint8* pu8StringCpy, uint8 u8Index)
{
    2768:	df 93       	push	r29
    276a:	cf 93       	push	r28
    276c:	cd b7       	in	r28, 0x3d	; 61
    276e:	de b7       	in	r29, 0x3e	; 62
    2770:	62 97       	sbiw	r28, 0x12	; 18
    2772:	0f b6       	in	r0, 0x3f	; 63
    2774:	f8 94       	cli
    2776:	de bf       	out	0x3e, r29	; 62
    2778:	0f be       	out	0x3f, r0	; 63
    277a:	cd bf       	out	0x3d, r28	; 61
    277c:	99 8b       	std	Y+17, r25	; 0x11
    277e:	88 8b       	std	Y+16, r24	; 0x10
    2780:	6a 8b       	std	Y+18, r22	; 0x12

//	/* Local loop index */
//	u8 u8Index = 0;
	uint8 iteration=0;
    2782:	1f 86       	std	Y+15, r1	; 0x0f
//	while (pu8StringCpy[u8Index] != '\0')
	for (iteration = 0; iteration < u8Index; iteration++)
    2784:	1f 86       	std	Y+15, r1	; 0x0f
    2786:	80 c0       	rjmp	.+256    	; 0x2888 <LCD_vidWriteString+0x120>
	{

		/* Write Character on LCD */
		LCD_vidWriteChar(pu8StringCpy[iteration]);
    2788:	8f 85       	ldd	r24, Y+15	; 0x0f
    278a:	28 2f       	mov	r18, r24
    278c:	30 e0       	ldi	r19, 0x00	; 0
    278e:	88 89       	ldd	r24, Y+16	; 0x10
    2790:	99 89       	ldd	r25, Y+17	; 0x11
    2792:	fc 01       	movw	r30, r24
    2794:	e2 0f       	add	r30, r18
    2796:	f3 1f       	adc	r31, r19
    2798:	80 81       	ld	r24, Z
    279a:	0e 94 9f 12 	call	0x253e	; 0x253e <LCD_vidWriteChar>
    279e:	80 e0       	ldi	r24, 0x00	; 0
    27a0:	90 e0       	ldi	r25, 0x00	; 0
    27a2:	a0 e0       	ldi	r26, 0x00	; 0
    27a4:	b0 e4       	ldi	r27, 0x40	; 64
    27a6:	8b 87       	std	Y+11, r24	; 0x0b
    27a8:	9c 87       	std	Y+12, r25	; 0x0c
    27aa:	ad 87       	std	Y+13, r26	; 0x0d
    27ac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    27b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    27b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    27b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    27b6:	20 e0       	ldi	r18, 0x00	; 0
    27b8:	30 e0       	ldi	r19, 0x00	; 0
    27ba:	4a e7       	ldi	r20, 0x7A	; 122
    27bc:	55 e4       	ldi	r21, 0x45	; 69
    27be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27c2:	dc 01       	movw	r26, r24
    27c4:	cb 01       	movw	r24, r22
    27c6:	8f 83       	std	Y+7, r24	; 0x07
    27c8:	98 87       	std	Y+8, r25	; 0x08
    27ca:	a9 87       	std	Y+9, r26	; 0x09
    27cc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    27ce:	6f 81       	ldd	r22, Y+7	; 0x07
    27d0:	78 85       	ldd	r23, Y+8	; 0x08
    27d2:	89 85       	ldd	r24, Y+9	; 0x09
    27d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    27d6:	20 e0       	ldi	r18, 0x00	; 0
    27d8:	30 e0       	ldi	r19, 0x00	; 0
    27da:	40 e8       	ldi	r20, 0x80	; 128
    27dc:	5f e3       	ldi	r21, 0x3F	; 63
    27de:	0e 94 85 04 	call	0x90a	; 0x90a <__ltsf2>
    27e2:	88 23       	and	r24, r24
    27e4:	2c f4       	brge	.+10     	; 0x27f0 <LCD_vidWriteString+0x88>
		__ticks = 1;
    27e6:	81 e0       	ldi	r24, 0x01	; 1
    27e8:	90 e0       	ldi	r25, 0x00	; 0
    27ea:	9e 83       	std	Y+6, r25	; 0x06
    27ec:	8d 83       	std	Y+5, r24	; 0x05
    27ee:	3f c0       	rjmp	.+126    	; 0x286e <LCD_vidWriteString+0x106>
	else if (__tmp > 65535)
    27f0:	6f 81       	ldd	r22, Y+7	; 0x07
    27f2:	78 85       	ldd	r23, Y+8	; 0x08
    27f4:	89 85       	ldd	r24, Y+9	; 0x09
    27f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    27f8:	20 e0       	ldi	r18, 0x00	; 0
    27fa:	3f ef       	ldi	r19, 0xFF	; 255
    27fc:	4f e7       	ldi	r20, 0x7F	; 127
    27fe:	57 e4       	ldi	r21, 0x47	; 71
    2800:	0e 94 25 04 	call	0x84a	; 0x84a <__gtsf2>
    2804:	18 16       	cp	r1, r24
    2806:	4c f5       	brge	.+82     	; 0x285a <LCD_vidWriteString+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2808:	6b 85       	ldd	r22, Y+11	; 0x0b
    280a:	7c 85       	ldd	r23, Y+12	; 0x0c
    280c:	8d 85       	ldd	r24, Y+13	; 0x0d
    280e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2810:	20 e0       	ldi	r18, 0x00	; 0
    2812:	30 e0       	ldi	r19, 0x00	; 0
    2814:	40 e2       	ldi	r20, 0x20	; 32
    2816:	51 e4       	ldi	r21, 0x41	; 65
    2818:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    281c:	dc 01       	movw	r26, r24
    281e:	cb 01       	movw	r24, r22
    2820:	bc 01       	movw	r22, r24
    2822:	cd 01       	movw	r24, r26
    2824:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2828:	dc 01       	movw	r26, r24
    282a:	cb 01       	movw	r24, r22
    282c:	9e 83       	std	Y+6, r25	; 0x06
    282e:	8d 83       	std	Y+5, r24	; 0x05
    2830:	0f c0       	rjmp	.+30     	; 0x2850 <LCD_vidWriteString+0xe8>
    2832:	80 e9       	ldi	r24, 0x90	; 144
    2834:	91 e0       	ldi	r25, 0x01	; 1
    2836:	9c 83       	std	Y+4, r25	; 0x04
    2838:	8b 83       	std	Y+3, r24	; 0x03
    283a:	8b 81       	ldd	r24, Y+3	; 0x03
    283c:	9c 81       	ldd	r25, Y+4	; 0x04
    283e:	01 97       	sbiw	r24, 0x01	; 1
    2840:	f1 f7       	brne	.-4      	; 0x283e <LCD_vidWriteString+0xd6>
    2842:	9c 83       	std	Y+4, r25	; 0x04
    2844:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2846:	8d 81       	ldd	r24, Y+5	; 0x05
    2848:	9e 81       	ldd	r25, Y+6	; 0x06
    284a:	01 97       	sbiw	r24, 0x01	; 1
    284c:	9e 83       	std	Y+6, r25	; 0x06
    284e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2850:	8d 81       	ldd	r24, Y+5	; 0x05
    2852:	9e 81       	ldd	r25, Y+6	; 0x06
    2854:	00 97       	sbiw	r24, 0x00	; 0
    2856:	69 f7       	brne	.-38     	; 0x2832 <LCD_vidWriteString+0xca>
    2858:	14 c0       	rjmp	.+40     	; 0x2882 <LCD_vidWriteString+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    285a:	6f 81       	ldd	r22, Y+7	; 0x07
    285c:	78 85       	ldd	r23, Y+8	; 0x08
    285e:	89 85       	ldd	r24, Y+9	; 0x09
    2860:	9a 85       	ldd	r25, Y+10	; 0x0a
    2862:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2866:	dc 01       	movw	r26, r24
    2868:	cb 01       	movw	r24, r22
    286a:	9e 83       	std	Y+6, r25	; 0x06
    286c:	8d 83       	std	Y+5, r24	; 0x05
    286e:	8d 81       	ldd	r24, Y+5	; 0x05
    2870:	9e 81       	ldd	r25, Y+6	; 0x06
    2872:	9a 83       	std	Y+2, r25	; 0x02
    2874:	89 83       	std	Y+1, r24	; 0x01
    2876:	89 81       	ldd	r24, Y+1	; 0x01
    2878:	9a 81       	ldd	r25, Y+2	; 0x02
    287a:	01 97       	sbiw	r24, 0x01	; 1
    287c:	f1 f7       	brne	.-4      	; 0x287a <LCD_vidWriteString+0x112>
    287e:	9a 83       	std	Y+2, r25	; 0x02
    2880:	89 83       	std	Y+1, r24	; 0x01

//	/* Local loop index */
//	u8 u8Index = 0;
	uint8 iteration=0;
//	while (pu8StringCpy[u8Index] != '\0')
	for (iteration = 0; iteration < u8Index; iteration++)
    2882:	8f 85       	ldd	r24, Y+15	; 0x0f
    2884:	8f 5f       	subi	r24, 0xFF	; 255
    2886:	8f 87       	std	Y+15, r24	; 0x0f
    2888:	9f 85       	ldd	r25, Y+15	; 0x0f
    288a:	8a 89       	ldd	r24, Y+18	; 0x12
    288c:	98 17       	cp	r25, r24
    288e:	08 f4       	brcc	.+2      	; 0x2892 <LCD_vidWriteString+0x12a>
    2890:	7b cf       	rjmp	.-266    	; 0x2788 <LCD_vidWriteString+0x20>

		/* Delay to let the LCD show the character */
		_delay_ms(2);
	}

}
    2892:	62 96       	adiw	r28, 0x12	; 18
    2894:	0f b6       	in	r0, 0x3f	; 63
    2896:	f8 94       	cli
    2898:	de bf       	out	0x3e, r29	; 62
    289a:	0f be       	out	0x3f, r0	; 63
    289c:	cd bf       	out	0x3d, r28	; 61
    289e:	cf 91       	pop	r28
    28a0:	df 91       	pop	r29
    28a2:	08 95       	ret

000028a4 <Gotoxy>:
/* Description! Interface to start the writing process at certain digit in the LCD     */
/* Input      ! Y = Row position , X = Column position                                 */
/* Output     ! Nothing                                                                */
/***************************************************************************************/
void Gotoxy (uint8 Y,uint8 X)
{
    28a4:	df 93       	push	r29
    28a6:	cf 93       	push	r28
    28a8:	00 d0       	rcall	.+0      	; 0x28aa <Gotoxy+0x6>
    28aa:	00 d0       	rcall	.+0      	; 0x28ac <Gotoxy+0x8>
    28ac:	cd b7       	in	r28, 0x3d	; 61
    28ae:	de b7       	in	r29, 0x3e	; 62
    28b0:	89 83       	std	Y+1, r24	; 0x01
    28b2:	6a 83       	std	Y+2, r22	; 0x02
	if (X > 0 && X <= 16)
    28b4:	8a 81       	ldd	r24, Y+2	; 0x02
    28b6:	88 23       	and	r24, r24
    28b8:	e1 f0       	breq	.+56     	; 0x28f2 <Gotoxy+0x4e>
    28ba:	8a 81       	ldd	r24, Y+2	; 0x02
    28bc:	81 31       	cpi	r24, 0x11	; 17
    28be:	c8 f4       	brcc	.+50     	; 0x28f2 <Gotoxy+0x4e>
	{
	    switch(Y)
    28c0:	89 81       	ldd	r24, Y+1	; 0x01
    28c2:	28 2f       	mov	r18, r24
    28c4:	30 e0       	ldi	r19, 0x00	; 0
    28c6:	3c 83       	std	Y+4, r19	; 0x04
    28c8:	2b 83       	std	Y+3, r18	; 0x03
    28ca:	8b 81       	ldd	r24, Y+3	; 0x03
    28cc:	9c 81       	ldd	r25, Y+4	; 0x04
    28ce:	81 30       	cpi	r24, 0x01	; 1
    28d0:	91 05       	cpc	r25, r1
    28d2:	31 f0       	breq	.+12     	; 0x28e0 <Gotoxy+0x3c>
    28d4:	2b 81       	ldd	r18, Y+3	; 0x03
    28d6:	3c 81       	ldd	r19, Y+4	; 0x04
    28d8:	22 30       	cpi	r18, 0x02	; 2
    28da:	31 05       	cpc	r19, r1
    28dc:	31 f0       	breq	.+12     	; 0x28ea <Gotoxy+0x46>
    28de:	09 c0       	rjmp	.+18     	; 0x28f2 <Gotoxy+0x4e>
	    {
		    case 1:
		    	LCD_vidSendCommand(X+127);
    28e0:	8a 81       	ldd	r24, Y+2	; 0x02
    28e2:	81 58       	subi	r24, 0x81	; 129
    28e4:	0e 94 8a 11 	call	0x2314	; 0x2314 <LCD_vidSendCommand>
    28e8:	04 c0       	rjmp	.+8      	; 0x28f2 <Gotoxy+0x4e>
		    break;
		    case 2:
		    	LCD_vidSendCommand(X+191);
    28ea:	8a 81       	ldd	r24, Y+2	; 0x02
    28ec:	81 54       	subi	r24, 0x41	; 65
    28ee:	0e 94 8a 11 	call	0x2314	; 0x2314 <LCD_vidSendCommand>
		    break;
		    default:
		    break;
	    }
	}
}
    28f2:	0f 90       	pop	r0
    28f4:	0f 90       	pop	r0
    28f6:	0f 90       	pop	r0
    28f8:	0f 90       	pop	r0
    28fa:	cf 91       	pop	r28
    28fc:	df 91       	pop	r29
    28fe:	08 95       	ret

00002900 <LCD_vidWriteExtraChar>:
/* Description! Interface to write extra characters saved in the CGRAM                 */
/* Input      ! Y = Row position , X = Column position                                 */
/* Output     ! Nothing                                                                */
/***************************************************************************************/
void LCD_vidWriteExtraChar (uint8 Y,uint8 X)
{
    2900:	df 93       	push	r29
    2902:	cf 93       	push	r28
    2904:	cd b7       	in	r28, 0x3d	; 61
    2906:	de b7       	in	r29, 0x3e	; 62
    2908:	62 97       	sbiw	r28, 0x12	; 18
    290a:	0f b6       	in	r0, 0x3f	; 63
    290c:	f8 94       	cli
    290e:	de bf       	out	0x3e, r29	; 62
    2910:	0f be       	out	0x3f, r0	; 63
    2912:	cd bf       	out	0x3d, r28	; 61
    2914:	89 8b       	std	Y+17, r24	; 0x11
    2916:	6a 8b       	std	Y+18, r22	; 0x12
    uint8 iteration1,iteration2;

    /*DDRAM-->CGRAM*/
    LCD_vidSendCommand(64);
    2918:	80 e4       	ldi	r24, 0x40	; 64
    291a:	0e 94 8a 11 	call	0x2314	; 0x2314 <LCD_vidSendCommand>
	for(iteration1 = 0; iteration1 < 64; iteration1++)
    291e:	18 8a       	std	Y+16, r1	; 0x10
    2920:	0c c0       	rjmp	.+24     	; 0x293a <LCD_vidWriteExtraChar+0x3a>
	{
		LCD_vidWriteChar(ExtraChar[iteration1]);
    2922:	88 89       	ldd	r24, Y+16	; 0x10
    2924:	88 2f       	mov	r24, r24
    2926:	90 e0       	ldi	r25, 0x00	; 0
    2928:	fc 01       	movw	r30, r24
    292a:	eb 58       	subi	r30, 0x8B	; 139
    292c:	fe 4f       	sbci	r31, 0xFE	; 254
    292e:	80 81       	ld	r24, Z
    2930:	0e 94 9f 12 	call	0x253e	; 0x253e <LCD_vidWriteChar>
{
    uint8 iteration1,iteration2;

    /*DDRAM-->CGRAM*/
    LCD_vidSendCommand(64);
	for(iteration1 = 0; iteration1 < 64; iteration1++)
    2934:	88 89       	ldd	r24, Y+16	; 0x10
    2936:	8f 5f       	subi	r24, 0xFF	; 255
    2938:	88 8b       	std	Y+16, r24	; 0x10
    293a:	88 89       	ldd	r24, Y+16	; 0x10
    293c:	80 34       	cpi	r24, 0x40	; 64
    293e:	88 f3       	brcs	.-30     	; 0x2922 <LCD_vidWriteExtraChar+0x22>
	{
		LCD_vidWriteChar(ExtraChar[iteration1]);
	}
	/*CGRAM-->DDRAM*/
	LCD_vidSendCommand(128);
    2940:	80 e8       	ldi	r24, 0x80	; 128
    2942:	0e 94 8a 11 	call	0x2314	; 0x2314 <LCD_vidSendCommand>
	Gotoxy(Y,X);
    2946:	89 89       	ldd	r24, Y+17	; 0x11
    2948:	6a 89       	ldd	r22, Y+18	; 0x12
    294a:	0e 94 52 14 	call	0x28a4	; 0x28a4 <Gotoxy>
	/*First eight character which saved at CGRAM*/
	for (iteration2 = 0 ;iteration2 <= 7; iteration2++)
    294e:	1f 86       	std	Y+15, r1	; 0x0f
    2950:	78 c0       	rjmp	.+240    	; 0x2a42 <LCD_vidWriteExtraChar+0x142>
	{
		/* Write bytes of DDRAM */
		LCD_vidWriteChar(iteration2);
    2952:	8f 85       	ldd	r24, Y+15	; 0x0f
    2954:	0e 94 9f 12 	call	0x253e	; 0x253e <LCD_vidWriteChar>
    2958:	80 e0       	ldi	r24, 0x00	; 0
    295a:	90 e0       	ldi	r25, 0x00	; 0
    295c:	a0 ea       	ldi	r26, 0xA0	; 160
    295e:	b0 e4       	ldi	r27, 0x40	; 64
    2960:	8b 87       	std	Y+11, r24	; 0x0b
    2962:	9c 87       	std	Y+12, r25	; 0x0c
    2964:	ad 87       	std	Y+13, r26	; 0x0d
    2966:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2968:	6b 85       	ldd	r22, Y+11	; 0x0b
    296a:	7c 85       	ldd	r23, Y+12	; 0x0c
    296c:	8d 85       	ldd	r24, Y+13	; 0x0d
    296e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2970:	20 e0       	ldi	r18, 0x00	; 0
    2972:	30 e0       	ldi	r19, 0x00	; 0
    2974:	4a e7       	ldi	r20, 0x7A	; 122
    2976:	55 e4       	ldi	r21, 0x45	; 69
    2978:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    297c:	dc 01       	movw	r26, r24
    297e:	cb 01       	movw	r24, r22
    2980:	8f 83       	std	Y+7, r24	; 0x07
    2982:	98 87       	std	Y+8, r25	; 0x08
    2984:	a9 87       	std	Y+9, r26	; 0x09
    2986:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2988:	6f 81       	ldd	r22, Y+7	; 0x07
    298a:	78 85       	ldd	r23, Y+8	; 0x08
    298c:	89 85       	ldd	r24, Y+9	; 0x09
    298e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2990:	20 e0       	ldi	r18, 0x00	; 0
    2992:	30 e0       	ldi	r19, 0x00	; 0
    2994:	40 e8       	ldi	r20, 0x80	; 128
    2996:	5f e3       	ldi	r21, 0x3F	; 63
    2998:	0e 94 85 04 	call	0x90a	; 0x90a <__ltsf2>
    299c:	88 23       	and	r24, r24
    299e:	2c f4       	brge	.+10     	; 0x29aa <LCD_vidWriteExtraChar+0xaa>
		__ticks = 1;
    29a0:	81 e0       	ldi	r24, 0x01	; 1
    29a2:	90 e0       	ldi	r25, 0x00	; 0
    29a4:	9e 83       	std	Y+6, r25	; 0x06
    29a6:	8d 83       	std	Y+5, r24	; 0x05
    29a8:	3f c0       	rjmp	.+126    	; 0x2a28 <LCD_vidWriteExtraChar+0x128>
	else if (__tmp > 65535)
    29aa:	6f 81       	ldd	r22, Y+7	; 0x07
    29ac:	78 85       	ldd	r23, Y+8	; 0x08
    29ae:	89 85       	ldd	r24, Y+9	; 0x09
    29b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    29b2:	20 e0       	ldi	r18, 0x00	; 0
    29b4:	3f ef       	ldi	r19, 0xFF	; 255
    29b6:	4f e7       	ldi	r20, 0x7F	; 127
    29b8:	57 e4       	ldi	r21, 0x47	; 71
    29ba:	0e 94 25 04 	call	0x84a	; 0x84a <__gtsf2>
    29be:	18 16       	cp	r1, r24
    29c0:	4c f5       	brge	.+82     	; 0x2a14 <LCD_vidWriteExtraChar+0x114>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    29c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    29c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    29c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    29ca:	20 e0       	ldi	r18, 0x00	; 0
    29cc:	30 e0       	ldi	r19, 0x00	; 0
    29ce:	40 e2       	ldi	r20, 0x20	; 32
    29d0:	51 e4       	ldi	r21, 0x41	; 65
    29d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29d6:	dc 01       	movw	r26, r24
    29d8:	cb 01       	movw	r24, r22
    29da:	bc 01       	movw	r22, r24
    29dc:	cd 01       	movw	r24, r26
    29de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29e2:	dc 01       	movw	r26, r24
    29e4:	cb 01       	movw	r24, r22
    29e6:	9e 83       	std	Y+6, r25	; 0x06
    29e8:	8d 83       	std	Y+5, r24	; 0x05
    29ea:	0f c0       	rjmp	.+30     	; 0x2a0a <LCD_vidWriteExtraChar+0x10a>
    29ec:	80 e9       	ldi	r24, 0x90	; 144
    29ee:	91 e0       	ldi	r25, 0x01	; 1
    29f0:	9c 83       	std	Y+4, r25	; 0x04
    29f2:	8b 83       	std	Y+3, r24	; 0x03
    29f4:	8b 81       	ldd	r24, Y+3	; 0x03
    29f6:	9c 81       	ldd	r25, Y+4	; 0x04
    29f8:	01 97       	sbiw	r24, 0x01	; 1
    29fa:	f1 f7       	brne	.-4      	; 0x29f8 <LCD_vidWriteExtraChar+0xf8>
    29fc:	9c 83       	std	Y+4, r25	; 0x04
    29fe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a00:	8d 81       	ldd	r24, Y+5	; 0x05
    2a02:	9e 81       	ldd	r25, Y+6	; 0x06
    2a04:	01 97       	sbiw	r24, 0x01	; 1
    2a06:	9e 83       	std	Y+6, r25	; 0x06
    2a08:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a0a:	8d 81       	ldd	r24, Y+5	; 0x05
    2a0c:	9e 81       	ldd	r25, Y+6	; 0x06
    2a0e:	00 97       	sbiw	r24, 0x00	; 0
    2a10:	69 f7       	brne	.-38     	; 0x29ec <LCD_vidWriteExtraChar+0xec>
    2a12:	14 c0       	rjmp	.+40     	; 0x2a3c <LCD_vidWriteExtraChar+0x13c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a14:	6f 81       	ldd	r22, Y+7	; 0x07
    2a16:	78 85       	ldd	r23, Y+8	; 0x08
    2a18:	89 85       	ldd	r24, Y+9	; 0x09
    2a1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a20:	dc 01       	movw	r26, r24
    2a22:	cb 01       	movw	r24, r22
    2a24:	9e 83       	std	Y+6, r25	; 0x06
    2a26:	8d 83       	std	Y+5, r24	; 0x05
    2a28:	8d 81       	ldd	r24, Y+5	; 0x05
    2a2a:	9e 81       	ldd	r25, Y+6	; 0x06
    2a2c:	9a 83       	std	Y+2, r25	; 0x02
    2a2e:	89 83       	std	Y+1, r24	; 0x01
    2a30:	89 81       	ldd	r24, Y+1	; 0x01
    2a32:	9a 81       	ldd	r25, Y+2	; 0x02
    2a34:	01 97       	sbiw	r24, 0x01	; 1
    2a36:	f1 f7       	brne	.-4      	; 0x2a34 <LCD_vidWriteExtraChar+0x134>
    2a38:	9a 83       	std	Y+2, r25	; 0x02
    2a3a:	89 83       	std	Y+1, r24	; 0x01
	}
	/*CGRAM-->DDRAM*/
	LCD_vidSendCommand(128);
	Gotoxy(Y,X);
	/*First eight character which saved at CGRAM*/
	for (iteration2 = 0 ;iteration2 <= 7; iteration2++)
    2a3c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a3e:	8f 5f       	subi	r24, 0xFF	; 255
    2a40:	8f 87       	std	Y+15, r24	; 0x0f
    2a42:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a44:	88 30       	cpi	r24, 0x08	; 8
    2a46:	08 f4       	brcc	.+2      	; 0x2a4a <LCD_vidWriteExtraChar+0x14a>
    2a48:	84 cf       	rjmp	.-248    	; 0x2952 <LCD_vidWriteExtraChar+0x52>
		/* Write bytes of DDRAM */
		LCD_vidWriteChar(iteration2);

		_delay_ms(5);
	}
}
    2a4a:	62 96       	adiw	r28, 0x12	; 18
    2a4c:	0f b6       	in	r0, 0x3f	; 63
    2a4e:	f8 94       	cli
    2a50:	de bf       	out	0x3e, r29	; 62
    2a52:	0f be       	out	0x3f, r0	; 63
    2a54:	cd bf       	out	0x3d, r28	; 61
    2a56:	cf 91       	pop	r28
    2a58:	df 91       	pop	r29
    2a5a:	08 95       	ret

00002a5c <restart>:
uint16 op = 0; /* Each operand will be created here before being saved to the operands buffer. */
uint8 error = 0; /* Error flag to chech any syntax error. */

/* An interface that resets all calculater settings. */
/* Has no arguments or return. */
void restart(void){
    2a5c:	df 93       	push	r29
    2a5e:	cf 93       	push	r28
    2a60:	cd b7       	in	r28, 0x3d	; 61
    2a62:	de b7       	in	r29, 0x3e	; 62
	op = 0;
    2a64:	10 92 f4 01 	sts	0x01F4, r1
    2a68:	10 92 f3 01 	sts	0x01F3, r1
	counter = 0;
    2a6c:	10 92 f2 01 	sts	0x01F2, r1
	operands[0] = 0;
    2a70:	80 e0       	ldi	r24, 0x00	; 0
    2a72:	90 e0       	ldi	r25, 0x00	; 0
    2a74:	a0 e0       	ldi	r26, 0x00	; 0
    2a76:	b0 e0       	ldi	r27, 0x00	; 0
    2a78:	80 93 b6 01 	sts	0x01B6, r24
    2a7c:	90 93 b7 01 	sts	0x01B7, r25
    2a80:	a0 93 b8 01 	sts	0x01B8, r26
    2a84:	b0 93 b9 01 	sts	0x01B9, r27
	error = 0;
    2a88:	10 92 f5 01 	sts	0x01F5, r1
}
    2a8c:	cf 91       	pop	r28
    2a8e:	df 91       	pop	r29
    2a90:	08 95       	ret

00002a92 <Create_op>:

/* An interface that creates a new operand by passing the value of pressed key */
/* Has no return. */
void Create_op(uint8 digit){
    2a92:	df 93       	push	r29
    2a94:	cf 93       	push	r28
    2a96:	0f 92       	push	r0
    2a98:	cd b7       	in	r28, 0x3d	; 61
    2a9a:	de b7       	in	r29, 0x3e	; 62
    2a9c:	89 83       	std	Y+1, r24	; 0x01
	if(digit <= 9 && digit != '0'){
    2a9e:	89 81       	ldd	r24, Y+1	; 0x01
    2aa0:	8a 30       	cpi	r24, 0x0A	; 10
    2aa2:	90 f4       	brcc	.+36     	; 0x2ac8 <Create_op+0x36>
    2aa4:	89 81       	ldd	r24, Y+1	; 0x01
    2aa6:	80 33       	cpi	r24, 0x30	; 48
    2aa8:	79 f0       	breq	.+30     	; 0x2ac8 <Create_op+0x36>
		if(error){
    2aaa:	80 91 f5 01 	lds	r24, 0x01F5
    2aae:	88 23       	and	r24, r24
    2ab0:	31 f0       	breq	.+12     	; 0x2abe <Create_op+0x2c>
			error --;
    2ab2:	80 91 f5 01 	lds	r24, 0x01F5
    2ab6:	81 50       	subi	r24, 0x01	; 1
    2ab8:	80 93 f5 01 	sts	0x01F5, r24
    2abc:	02 c0       	rjmp	.+4      	; 0x2ac2 <Create_op+0x30>
		}else{
			error = 0;
    2abe:	10 92 f5 01 	sts	0x01F5, r1
		}
		concat(digit);
    2ac2:	89 81       	ldd	r24, Y+1	; 0x01
    2ac4:	0e 94 5d 16 	call	0x2cba	; 0x2cba <concat>
	}else{
		/* Nothing to do. */
	}
}
    2ac8:	0f 90       	pop	r0
    2aca:	cf 91       	pop	r28
    2acc:	df 91       	pop	r29
    2ace:	08 95       	ret

00002ad0 <add_op>:

/* A function that adds the new operand to the array of operands. */
/* Has no arguments or return. */
static void add_op(void){
    2ad0:	0f 93       	push	r16
    2ad2:	1f 93       	push	r17
    2ad4:	df 93       	push	r29
    2ad6:	cf 93       	push	r28
    2ad8:	cd b7       	in	r28, 0x3d	; 61
    2ada:	de b7       	in	r29, 0x3e	; 62
	operands[counter] = op;
    2adc:	80 91 f2 01 	lds	r24, 0x01F2
    2ae0:	08 2f       	mov	r16, r24
    2ae2:	10 e0       	ldi	r17, 0x00	; 0
    2ae4:	80 91 f3 01 	lds	r24, 0x01F3
    2ae8:	90 91 f4 01 	lds	r25, 0x01F4
    2aec:	cc 01       	movw	r24, r24
    2aee:	a0 e0       	ldi	r26, 0x00	; 0
    2af0:	b0 e0       	ldi	r27, 0x00	; 0
    2af2:	bc 01       	movw	r22, r24
    2af4:	cd 01       	movw	r24, r26
    2af6:	0e 94 67 05 	call	0xace	; 0xace <__floatunsisf>
    2afa:	9b 01       	movw	r18, r22
    2afc:	ac 01       	movw	r20, r24
    2afe:	c8 01       	movw	r24, r16
    2b00:	88 0f       	add	r24, r24
    2b02:	99 1f       	adc	r25, r25
    2b04:	88 0f       	add	r24, r24
    2b06:	99 1f       	adc	r25, r25
    2b08:	fc 01       	movw	r30, r24
    2b0a:	ea 54       	subi	r30, 0x4A	; 74
    2b0c:	fe 4f       	sbci	r31, 0xFE	; 254
    2b0e:	20 83       	st	Z, r18
    2b10:	31 83       	std	Z+1, r19	; 0x01
    2b12:	42 83       	std	Z+2, r20	; 0x02
    2b14:	53 83       	std	Z+3, r21	; 0x03
	op = 0;
    2b16:	10 92 f4 01 	sts	0x01F4, r1
    2b1a:	10 92 f3 01 	sts	0x01F3, r1
	counter ++;
    2b1e:	80 91 f2 01 	lds	r24, 0x01F2
    2b22:	8f 5f       	subi	r24, 0xFF	; 255
    2b24:	80 93 f2 01 	sts	0x01F2, r24
}
    2b28:	cf 91       	pop	r28
    2b2a:	df 91       	pop	r29
    2b2c:	1f 91       	pop	r17
    2b2e:	0f 91       	pop	r16
    2b30:	08 95       	ret

00002b32 <Operation>:


/* An interface that adds the new oerator to the array of operands by passing the operator value. */
/* Has no return. */
void Operation (uint8 operator){
    2b32:	df 93       	push	r29
    2b34:	cf 93       	push	r28
    2b36:	0f 92       	push	r0
    2b38:	cd b7       	in	r28, 0x3d	; 61
    2b3a:	de b7       	in	r29, 0x3e	; 62
    2b3c:	89 83       	std	Y+1, r24	; 0x01
	add_op();
    2b3e:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <add_op>
	error ++;
    2b42:	80 91 f5 01 	lds	r24, 0x01F5
    2b46:	8f 5f       	subi	r24, 0xFF	; 255
    2b48:	80 93 f5 01 	sts	0x01F5, r24
	if(operator == 'x'){
    2b4c:	89 81       	ldd	r24, Y+1	; 0x01
    2b4e:	88 37       	cpi	r24, 0x78	; 120
    2b50:	c9 f4       	brne	.+50     	; 0x2b84 <Operation+0x52>
		operands[counter] = 'x';
    2b52:	80 91 f2 01 	lds	r24, 0x01F2
    2b56:	88 2f       	mov	r24, r24
    2b58:	90 e0       	ldi	r25, 0x00	; 0
    2b5a:	88 0f       	add	r24, r24
    2b5c:	99 1f       	adc	r25, r25
    2b5e:	88 0f       	add	r24, r24
    2b60:	99 1f       	adc	r25, r25
    2b62:	fc 01       	movw	r30, r24
    2b64:	ea 54       	subi	r30, 0x4A	; 74
    2b66:	fe 4f       	sbci	r31, 0xFE	; 254
    2b68:	80 e0       	ldi	r24, 0x00	; 0
    2b6a:	90 e0       	ldi	r25, 0x00	; 0
    2b6c:	a0 ef       	ldi	r26, 0xF0	; 240
    2b6e:	b2 e4       	ldi	r27, 0x42	; 66
    2b70:	80 83       	st	Z, r24
    2b72:	91 83       	std	Z+1, r25	; 0x01
    2b74:	a2 83       	std	Z+2, r26	; 0x02
    2b76:	b3 83       	std	Z+3, r27	; 0x03
		counter ++;
    2b78:	80 91 f2 01 	lds	r24, 0x01F2
    2b7c:	8f 5f       	subi	r24, 0xFF	; 255
    2b7e:	80 93 f2 01 	sts	0x01F2, r24
    2b82:	5d c0       	rjmp	.+186    	; 0x2c3e <Operation+0x10c>
	}else if(operator == '/'){
    2b84:	89 81       	ldd	r24, Y+1	; 0x01
    2b86:	8f 32       	cpi	r24, 0x2F	; 47
    2b88:	c9 f4       	brne	.+50     	; 0x2bbc <Operation+0x8a>
		operands[counter] = '/';
    2b8a:	80 91 f2 01 	lds	r24, 0x01F2
    2b8e:	88 2f       	mov	r24, r24
    2b90:	90 e0       	ldi	r25, 0x00	; 0
    2b92:	88 0f       	add	r24, r24
    2b94:	99 1f       	adc	r25, r25
    2b96:	88 0f       	add	r24, r24
    2b98:	99 1f       	adc	r25, r25
    2b9a:	fc 01       	movw	r30, r24
    2b9c:	ea 54       	subi	r30, 0x4A	; 74
    2b9e:	fe 4f       	sbci	r31, 0xFE	; 254
    2ba0:	80 e0       	ldi	r24, 0x00	; 0
    2ba2:	90 e0       	ldi	r25, 0x00	; 0
    2ba4:	ac e3       	ldi	r26, 0x3C	; 60
    2ba6:	b2 e4       	ldi	r27, 0x42	; 66
    2ba8:	80 83       	st	Z, r24
    2baa:	91 83       	std	Z+1, r25	; 0x01
    2bac:	a2 83       	std	Z+2, r26	; 0x02
    2bae:	b3 83       	std	Z+3, r27	; 0x03
		counter ++;
    2bb0:	80 91 f2 01 	lds	r24, 0x01F2
    2bb4:	8f 5f       	subi	r24, 0xFF	; 255
    2bb6:	80 93 f2 01 	sts	0x01F2, r24
    2bba:	41 c0       	rjmp	.+130    	; 0x2c3e <Operation+0x10c>
	}else if(operator == '+'){
    2bbc:	89 81       	ldd	r24, Y+1	; 0x01
    2bbe:	8b 32       	cpi	r24, 0x2B	; 43
    2bc0:	c9 f4       	brne	.+50     	; 0x2bf4 <Operation+0xc2>
		operands[counter] = '+';
    2bc2:	80 91 f2 01 	lds	r24, 0x01F2
    2bc6:	88 2f       	mov	r24, r24
    2bc8:	90 e0       	ldi	r25, 0x00	; 0
    2bca:	88 0f       	add	r24, r24
    2bcc:	99 1f       	adc	r25, r25
    2bce:	88 0f       	add	r24, r24
    2bd0:	99 1f       	adc	r25, r25
    2bd2:	fc 01       	movw	r30, r24
    2bd4:	ea 54       	subi	r30, 0x4A	; 74
    2bd6:	fe 4f       	sbci	r31, 0xFE	; 254
    2bd8:	80 e0       	ldi	r24, 0x00	; 0
    2bda:	90 e0       	ldi	r25, 0x00	; 0
    2bdc:	ac e2       	ldi	r26, 0x2C	; 44
    2bde:	b2 e4       	ldi	r27, 0x42	; 66
    2be0:	80 83       	st	Z, r24
    2be2:	91 83       	std	Z+1, r25	; 0x01
    2be4:	a2 83       	std	Z+2, r26	; 0x02
    2be6:	b3 83       	std	Z+3, r27	; 0x03
		counter ++;
    2be8:	80 91 f2 01 	lds	r24, 0x01F2
    2bec:	8f 5f       	subi	r24, 0xFF	; 255
    2bee:	80 93 f2 01 	sts	0x01F2, r24
    2bf2:	25 c0       	rjmp	.+74     	; 0x2c3e <Operation+0x10c>
	}else if(operator == '-'){
    2bf4:	89 81       	ldd	r24, Y+1	; 0x01
    2bf6:	8d 32       	cpi	r24, 0x2D	; 45
    2bf8:	c9 f4       	brne	.+50     	; 0x2c2c <Operation+0xfa>
		operands[counter] = '-';
    2bfa:	80 91 f2 01 	lds	r24, 0x01F2
    2bfe:	88 2f       	mov	r24, r24
    2c00:	90 e0       	ldi	r25, 0x00	; 0
    2c02:	88 0f       	add	r24, r24
    2c04:	99 1f       	adc	r25, r25
    2c06:	88 0f       	add	r24, r24
    2c08:	99 1f       	adc	r25, r25
    2c0a:	fc 01       	movw	r30, r24
    2c0c:	ea 54       	subi	r30, 0x4A	; 74
    2c0e:	fe 4f       	sbci	r31, 0xFE	; 254
    2c10:	80 e0       	ldi	r24, 0x00	; 0
    2c12:	90 e0       	ldi	r25, 0x00	; 0
    2c14:	a4 e3       	ldi	r26, 0x34	; 52
    2c16:	b2 e4       	ldi	r27, 0x42	; 66
    2c18:	80 83       	st	Z, r24
    2c1a:	91 83       	std	Z+1, r25	; 0x01
    2c1c:	a2 83       	std	Z+2, r26	; 0x02
    2c1e:	b3 83       	std	Z+3, r27	; 0x03
		counter ++;
    2c20:	80 91 f2 01 	lds	r24, 0x01F2
    2c24:	8f 5f       	subi	r24, 0xFF	; 255
    2c26:	80 93 f2 01 	sts	0x01F2, r24
    2c2a:	09 c0       	rjmp	.+18     	; 0x2c3e <Operation+0x10c>
	}else if(operator == 'a' || error > 1){
    2c2c:	89 81       	ldd	r24, Y+1	; 0x01
    2c2e:	81 36       	cpi	r24, 0x61	; 97
    2c30:	21 f0       	breq	.+8      	; 0x2c3a <Operation+0x108>
    2c32:	80 91 f5 01 	lds	r24, 0x01F5
    2c36:	82 30       	cpi	r24, 0x02	; 2
    2c38:	10 f0       	brcs	.+4      	; 0x2c3e <Operation+0x10c>
		restart();
    2c3a:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <restart>
	}else{
		/* Nothing to do */
	}
}
    2c3e:	0f 90       	pop	r0
    2c40:	cf 91       	pop	r28
    2c42:	df 91       	pop	r29
    2c44:	08 95       	ret

00002c46 <Equal>:


/* An interface that calculates the equation and saves the result in an array by passing this array and ther value of '=' as a checkup. */
/* Returns the size of the result array. */
uint8 Equal(uint8 operator, uint8 * ans){
    2c46:	df 93       	push	r29
    2c48:	cf 93       	push	r28
    2c4a:	00 d0       	rcall	.+0      	; 0x2c4c <Equal+0x6>
    2c4c:	00 d0       	rcall	.+0      	; 0x2c4e <Equal+0x8>
    2c4e:	cd b7       	in	r28, 0x3d	; 61
    2c50:	de b7       	in	r29, 0x3e	; 62
    2c52:	8a 83       	std	Y+2, r24	; 0x02
    2c54:	7c 83       	std	Y+4, r23	; 0x04
    2c56:	6b 83       	std	Y+3, r22	; 0x03
	uint8 size = 0;
    2c58:	19 82       	std	Y+1, r1	; 0x01
	add_op();
    2c5a:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <add_op>
	if(operator == '='){
    2c5e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c60:	8d 33       	cpi	r24, 0x3D	; 61
    2c62:	19 f5       	brne	.+70     	; 0x2caa <Equal+0x64>
		/* Running all operations and result will be saved in the first index of the operands buffer. */
		divide();
    2c64:	0e 94 1b 18 	call	0x3036	; 0x3036 <divide>
		multiply();
    2c68:	0e 94 95 16 	call	0x2d2a	; 0x2d2a <multiply>
		subtract();
    2c6c:	0e 94 27 1b 	call	0x364e	; 0x364e <subtract>
		add();
    2c70:	0e 94 a1 19 	call	0x3342	; 0x3342 <add>


		/* Converting the result to array of characters to be displayed on LCD. */
		size = separate_digits(ans, operands[0]);
    2c74:	20 91 b6 01 	lds	r18, 0x01B6
    2c78:	30 91 b7 01 	lds	r19, 0x01B7
    2c7c:	40 91 b8 01 	lds	r20, 0x01B8
    2c80:	50 91 b9 01 	lds	r21, 0x01B9
    2c84:	8b 81       	ldd	r24, Y+3	; 0x03
    2c86:	9c 81       	ldd	r25, Y+4	; 0x04
    2c88:	ba 01       	movw	r22, r20
    2c8a:	a9 01       	movw	r20, r18
    2c8c:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <separate_digits>
    2c90:	89 83       	std	Y+1, r24	; 0x01
		reverse(ans, size);
    2c92:	8b 81       	ldd	r24, Y+3	; 0x03
    2c94:	9c 81       	ldd	r25, Y+4	; 0x04
    2c96:	69 81       	ldd	r22, Y+1	; 0x01
    2c98:	0e 94 c3 1e 	call	0x3d86	; 0x3d86 <reverse>
		intTOchar(ans, size);
    2c9c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c9e:	9c 81       	ldd	r25, Y+4	; 0x04
    2ca0:	69 81       	ldd	r22, Y+1	; 0x01
    2ca2:	0e 94 ad 1c 	call	0x395a	; 0x395a <intTOchar>
		restart();
    2ca6:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <restart>
	}else{
		/* Nothing to do. */
	}
	return size;
    2caa:	89 81       	ldd	r24, Y+1	; 0x01
}
    2cac:	0f 90       	pop	r0
    2cae:	0f 90       	pop	r0
    2cb0:	0f 90       	pop	r0
    2cb2:	0f 90       	pop	r0
    2cb4:	cf 91       	pop	r28
    2cb6:	df 91       	pop	r29
    2cb8:	08 95       	ret

00002cba <concat>:



/* A function that cocatinate a new digit to the operand by passing the value of the digit. */
/* Has no return. */
static void concat(uint8 int2){
    2cba:	df 93       	push	r29
    2cbc:	cf 93       	push	r28
    2cbe:	00 d0       	rcall	.+0      	; 0x2cc0 <concat+0x6>
    2cc0:	cd b7       	in	r28, 0x3d	; 61
    2cc2:	de b7       	in	r29, 0x3e	; 62
    2cc4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 pow = 10;
    2cc6:	8a e0       	ldi	r24, 0x0A	; 10
    2cc8:	89 83       	std	Y+1, r24	; 0x01
    2cca:	0e c0       	rjmp	.+28     	; 0x2ce8 <concat+0x2e>
	while(int2 >= pow){
		pow *= 10;
    2ccc:	89 81       	ldd	r24, Y+1	; 0x01
    2cce:	88 2f       	mov	r24, r24
    2cd0:	90 e0       	ldi	r25, 0x00	; 0
    2cd2:	9c 01       	movw	r18, r24
    2cd4:	22 0f       	add	r18, r18
    2cd6:	33 1f       	adc	r19, r19
    2cd8:	c9 01       	movw	r24, r18
    2cda:	88 0f       	add	r24, r24
    2cdc:	99 1f       	adc	r25, r25
    2cde:	88 0f       	add	r24, r24
    2ce0:	99 1f       	adc	r25, r25
    2ce2:	82 0f       	add	r24, r18
    2ce4:	93 1f       	adc	r25, r19
    2ce6:	89 83       	std	Y+1, r24	; 0x01

/* A function that cocatinate a new digit to the operand by passing the value of the digit. */
/* Has no return. */
static void concat(uint8 int2){
	uint8 pow = 10;
	while(int2 >= pow){
    2ce8:	9a 81       	ldd	r25, Y+2	; 0x02
    2cea:	89 81       	ldd	r24, Y+1	; 0x01
    2cec:	98 17       	cp	r25, r24
    2cee:	70 f7       	brcc	.-36     	; 0x2ccc <concat+0x12>
		pow *= 10;
	}
	op = ((op * pow) + int2);
    2cf0:	89 81       	ldd	r24, Y+1	; 0x01
    2cf2:	28 2f       	mov	r18, r24
    2cf4:	30 e0       	ldi	r19, 0x00	; 0
    2cf6:	80 91 f3 01 	lds	r24, 0x01F3
    2cfa:	90 91 f4 01 	lds	r25, 0x01F4
    2cfe:	a9 01       	movw	r20, r18
    2d00:	48 9f       	mul	r20, r24
    2d02:	90 01       	movw	r18, r0
    2d04:	49 9f       	mul	r20, r25
    2d06:	30 0d       	add	r19, r0
    2d08:	58 9f       	mul	r21, r24
    2d0a:	30 0d       	add	r19, r0
    2d0c:	11 24       	eor	r1, r1
    2d0e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d10:	88 2f       	mov	r24, r24
    2d12:	90 e0       	ldi	r25, 0x00	; 0
    2d14:	82 0f       	add	r24, r18
    2d16:	93 1f       	adc	r25, r19
    2d18:	90 93 f4 01 	sts	0x01F4, r25
    2d1c:	80 93 f3 01 	sts	0x01F3, r24
}
    2d20:	0f 90       	pop	r0
    2d22:	0f 90       	pop	r0
    2d24:	cf 91       	pop	r28
    2d26:	df 91       	pop	r29
    2d28:	08 95       	ret

00002d2a <multiply>:


/* A function that makes any multipliction operation between operands. */
/* Has no arguments or return. */
static void multiply(void){
    2d2a:	cf 92       	push	r12
    2d2c:	df 92       	push	r13
    2d2e:	ef 92       	push	r14
    2d30:	ff 92       	push	r15
    2d32:	0f 93       	push	r16
    2d34:	1f 93       	push	r17
    2d36:	df 93       	push	r29
    2d38:	cf 93       	push	r28
    2d3a:	00 d0       	rcall	.+0      	; 0x2d3c <multiply+0x12>
    2d3c:	0f 92       	push	r0
    2d3e:	cd b7       	in	r28, 0x3d	; 61
    2d40:	de b7       	in	r29, 0x3e	; 62
	uint8 max, min;
	for(uint8 i = 1; i < counter; i++){
    2d42:	81 e0       	ldi	r24, 0x01	; 1
    2d44:	89 83       	std	Y+1, r24	; 0x01
    2d46:	65 c1       	rjmp	.+714    	; 0x3012 <multiply+0x2e8>
		if(operands[i] == 'x'){
    2d48:	89 81       	ldd	r24, Y+1	; 0x01
    2d4a:	88 2f       	mov	r24, r24
    2d4c:	90 e0       	ldi	r25, 0x00	; 0
    2d4e:	88 0f       	add	r24, r24
    2d50:	99 1f       	adc	r25, r25
    2d52:	88 0f       	add	r24, r24
    2d54:	99 1f       	adc	r25, r25
    2d56:	fc 01       	movw	r30, r24
    2d58:	ea 54       	subi	r30, 0x4A	; 74
    2d5a:	fe 4f       	sbci	r31, 0xFE	; 254
    2d5c:	80 81       	ld	r24, Z
    2d5e:	91 81       	ldd	r25, Z+1	; 0x01
    2d60:	a2 81       	ldd	r26, Z+2	; 0x02
    2d62:	b3 81       	ldd	r27, Z+3	; 0x03
    2d64:	bc 01       	movw	r22, r24
    2d66:	cd 01       	movw	r24, r26
    2d68:	20 e0       	ldi	r18, 0x00	; 0
    2d6a:	30 e0       	ldi	r19, 0x00	; 0
    2d6c:	40 ef       	ldi	r20, 0xF0	; 240
    2d6e:	52 e4       	ldi	r21, 0x42	; 66
    2d70:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    2d74:	88 23       	and	r24, r24
    2d76:	09 f0       	breq	.+2      	; 0x2d7a <multiply+0x50>
    2d78:	49 c1       	rjmp	.+658    	; 0x300c <multiply+0x2e2>
			min = i - 1;
    2d7a:	89 81       	ldd	r24, Y+1	; 0x01
    2d7c:	81 50       	subi	r24, 0x01	; 1
    2d7e:	8a 83       	std	Y+2, r24	; 0x02
    2d80:	03 c0       	rjmp	.+6      	; 0x2d88 <multiply+0x5e>
			while(operands[min] == 'n' || operands[min] == 'x' || operands[min] == '/' || operands[min] == '+' || operands[min] == '-')
			{
				min --;
    2d82:	8a 81       	ldd	r24, Y+2	; 0x02
    2d84:	81 50       	subi	r24, 0x01	; 1
    2d86:	8a 83       	std	Y+2, r24	; 0x02
static void multiply(void){
	uint8 max, min;
	for(uint8 i = 1; i < counter; i++){
		if(operands[i] == 'x'){
			min = i - 1;
			while(operands[min] == 'n' || operands[min] == 'x' || operands[min] == '/' || operands[min] == '+' || operands[min] == '-')
    2d88:	8a 81       	ldd	r24, Y+2	; 0x02
    2d8a:	88 2f       	mov	r24, r24
    2d8c:	90 e0       	ldi	r25, 0x00	; 0
    2d8e:	88 0f       	add	r24, r24
    2d90:	99 1f       	adc	r25, r25
    2d92:	88 0f       	add	r24, r24
    2d94:	99 1f       	adc	r25, r25
    2d96:	fc 01       	movw	r30, r24
    2d98:	ea 54       	subi	r30, 0x4A	; 74
    2d9a:	fe 4f       	sbci	r31, 0xFE	; 254
    2d9c:	80 81       	ld	r24, Z
    2d9e:	91 81       	ldd	r25, Z+1	; 0x01
    2da0:	a2 81       	ldd	r26, Z+2	; 0x02
    2da2:	b3 81       	ldd	r27, Z+3	; 0x03
    2da4:	bc 01       	movw	r22, r24
    2da6:	cd 01       	movw	r24, r26
    2da8:	20 e0       	ldi	r18, 0x00	; 0
    2daa:	30 e0       	ldi	r19, 0x00	; 0
    2dac:	4c ed       	ldi	r20, 0xDC	; 220
    2dae:	52 e4       	ldi	r21, 0x42	; 66
    2db0:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    2db4:	88 23       	and	r24, r24
    2db6:	29 f3       	breq	.-54     	; 0x2d82 <multiply+0x58>
    2db8:	8a 81       	ldd	r24, Y+2	; 0x02
    2dba:	88 2f       	mov	r24, r24
    2dbc:	90 e0       	ldi	r25, 0x00	; 0
    2dbe:	88 0f       	add	r24, r24
    2dc0:	99 1f       	adc	r25, r25
    2dc2:	88 0f       	add	r24, r24
    2dc4:	99 1f       	adc	r25, r25
    2dc6:	fc 01       	movw	r30, r24
    2dc8:	ea 54       	subi	r30, 0x4A	; 74
    2dca:	fe 4f       	sbci	r31, 0xFE	; 254
    2dcc:	80 81       	ld	r24, Z
    2dce:	91 81       	ldd	r25, Z+1	; 0x01
    2dd0:	a2 81       	ldd	r26, Z+2	; 0x02
    2dd2:	b3 81       	ldd	r27, Z+3	; 0x03
    2dd4:	bc 01       	movw	r22, r24
    2dd6:	cd 01       	movw	r24, r26
    2dd8:	20 e0       	ldi	r18, 0x00	; 0
    2dda:	30 e0       	ldi	r19, 0x00	; 0
    2ddc:	40 ef       	ldi	r20, 0xF0	; 240
    2dde:	52 e4       	ldi	r21, 0x42	; 66
    2de0:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    2de4:	88 23       	and	r24, r24
    2de6:	69 f2       	breq	.-102    	; 0x2d82 <multiply+0x58>
    2de8:	8a 81       	ldd	r24, Y+2	; 0x02
    2dea:	88 2f       	mov	r24, r24
    2dec:	90 e0       	ldi	r25, 0x00	; 0
    2dee:	88 0f       	add	r24, r24
    2df0:	99 1f       	adc	r25, r25
    2df2:	88 0f       	add	r24, r24
    2df4:	99 1f       	adc	r25, r25
    2df6:	fc 01       	movw	r30, r24
    2df8:	ea 54       	subi	r30, 0x4A	; 74
    2dfa:	fe 4f       	sbci	r31, 0xFE	; 254
    2dfc:	80 81       	ld	r24, Z
    2dfe:	91 81       	ldd	r25, Z+1	; 0x01
    2e00:	a2 81       	ldd	r26, Z+2	; 0x02
    2e02:	b3 81       	ldd	r27, Z+3	; 0x03
    2e04:	bc 01       	movw	r22, r24
    2e06:	cd 01       	movw	r24, r26
    2e08:	20 e0       	ldi	r18, 0x00	; 0
    2e0a:	30 e0       	ldi	r19, 0x00	; 0
    2e0c:	4c e3       	ldi	r20, 0x3C	; 60
    2e0e:	52 e4       	ldi	r21, 0x42	; 66
    2e10:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    2e14:	88 23       	and	r24, r24
    2e16:	09 f4       	brne	.+2      	; 0x2e1a <multiply+0xf0>
    2e18:	b4 cf       	rjmp	.-152    	; 0x2d82 <multiply+0x58>
    2e1a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e1c:	88 2f       	mov	r24, r24
    2e1e:	90 e0       	ldi	r25, 0x00	; 0
    2e20:	88 0f       	add	r24, r24
    2e22:	99 1f       	adc	r25, r25
    2e24:	88 0f       	add	r24, r24
    2e26:	99 1f       	adc	r25, r25
    2e28:	fc 01       	movw	r30, r24
    2e2a:	ea 54       	subi	r30, 0x4A	; 74
    2e2c:	fe 4f       	sbci	r31, 0xFE	; 254
    2e2e:	80 81       	ld	r24, Z
    2e30:	91 81       	ldd	r25, Z+1	; 0x01
    2e32:	a2 81       	ldd	r26, Z+2	; 0x02
    2e34:	b3 81       	ldd	r27, Z+3	; 0x03
    2e36:	bc 01       	movw	r22, r24
    2e38:	cd 01       	movw	r24, r26
    2e3a:	20 e0       	ldi	r18, 0x00	; 0
    2e3c:	30 e0       	ldi	r19, 0x00	; 0
    2e3e:	4c e2       	ldi	r20, 0x2C	; 44
    2e40:	52 e4       	ldi	r21, 0x42	; 66
    2e42:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    2e46:	88 23       	and	r24, r24
    2e48:	09 f4       	brne	.+2      	; 0x2e4c <multiply+0x122>
    2e4a:	9b cf       	rjmp	.-202    	; 0x2d82 <multiply+0x58>
    2e4c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e4e:	88 2f       	mov	r24, r24
    2e50:	90 e0       	ldi	r25, 0x00	; 0
    2e52:	88 0f       	add	r24, r24
    2e54:	99 1f       	adc	r25, r25
    2e56:	88 0f       	add	r24, r24
    2e58:	99 1f       	adc	r25, r25
    2e5a:	fc 01       	movw	r30, r24
    2e5c:	ea 54       	subi	r30, 0x4A	; 74
    2e5e:	fe 4f       	sbci	r31, 0xFE	; 254
    2e60:	80 81       	ld	r24, Z
    2e62:	91 81       	ldd	r25, Z+1	; 0x01
    2e64:	a2 81       	ldd	r26, Z+2	; 0x02
    2e66:	b3 81       	ldd	r27, Z+3	; 0x03
    2e68:	bc 01       	movw	r22, r24
    2e6a:	cd 01       	movw	r24, r26
    2e6c:	20 e0       	ldi	r18, 0x00	; 0
    2e6e:	30 e0       	ldi	r19, 0x00	; 0
    2e70:	44 e3       	ldi	r20, 0x34	; 52
    2e72:	52 e4       	ldi	r21, 0x42	; 66
    2e74:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    2e78:	88 23       	and	r24, r24
    2e7a:	09 f4       	brne	.+2      	; 0x2e7e <multiply+0x154>
    2e7c:	82 cf       	rjmp	.-252    	; 0x2d82 <multiply+0x58>
			{
				min --;
			}
			max = i + 1;
    2e7e:	89 81       	ldd	r24, Y+1	; 0x01
    2e80:	8f 5f       	subi	r24, 0xFF	; 255
    2e82:	8b 83       	std	Y+3, r24	; 0x03
    2e84:	03 c0       	rjmp	.+6      	; 0x2e8c <multiply+0x162>
			while(operands[max] == 'n' || operands[max] == 'x' || operands[min] == '/' || operands[min] == '+' || operands[min] == '-')
			{
				max ++;
    2e86:	8b 81       	ldd	r24, Y+3	; 0x03
    2e88:	8f 5f       	subi	r24, 0xFF	; 255
    2e8a:	8b 83       	std	Y+3, r24	; 0x03
			while(operands[min] == 'n' || operands[min] == 'x' || operands[min] == '/' || operands[min] == '+' || operands[min] == '-')
			{
				min --;
			}
			max = i + 1;
			while(operands[max] == 'n' || operands[max] == 'x' || operands[min] == '/' || operands[min] == '+' || operands[min] == '-')
    2e8c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e8e:	88 2f       	mov	r24, r24
    2e90:	90 e0       	ldi	r25, 0x00	; 0
    2e92:	88 0f       	add	r24, r24
    2e94:	99 1f       	adc	r25, r25
    2e96:	88 0f       	add	r24, r24
    2e98:	99 1f       	adc	r25, r25
    2e9a:	fc 01       	movw	r30, r24
    2e9c:	ea 54       	subi	r30, 0x4A	; 74
    2e9e:	fe 4f       	sbci	r31, 0xFE	; 254
    2ea0:	80 81       	ld	r24, Z
    2ea2:	91 81       	ldd	r25, Z+1	; 0x01
    2ea4:	a2 81       	ldd	r26, Z+2	; 0x02
    2ea6:	b3 81       	ldd	r27, Z+3	; 0x03
    2ea8:	bc 01       	movw	r22, r24
    2eaa:	cd 01       	movw	r24, r26
    2eac:	20 e0       	ldi	r18, 0x00	; 0
    2eae:	30 e0       	ldi	r19, 0x00	; 0
    2eb0:	4c ed       	ldi	r20, 0xDC	; 220
    2eb2:	52 e4       	ldi	r21, 0x42	; 66
    2eb4:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    2eb8:	88 23       	and	r24, r24
    2eba:	29 f3       	breq	.-54     	; 0x2e86 <multiply+0x15c>
    2ebc:	8b 81       	ldd	r24, Y+3	; 0x03
    2ebe:	88 2f       	mov	r24, r24
    2ec0:	90 e0       	ldi	r25, 0x00	; 0
    2ec2:	88 0f       	add	r24, r24
    2ec4:	99 1f       	adc	r25, r25
    2ec6:	88 0f       	add	r24, r24
    2ec8:	99 1f       	adc	r25, r25
    2eca:	fc 01       	movw	r30, r24
    2ecc:	ea 54       	subi	r30, 0x4A	; 74
    2ece:	fe 4f       	sbci	r31, 0xFE	; 254
    2ed0:	80 81       	ld	r24, Z
    2ed2:	91 81       	ldd	r25, Z+1	; 0x01
    2ed4:	a2 81       	ldd	r26, Z+2	; 0x02
    2ed6:	b3 81       	ldd	r27, Z+3	; 0x03
    2ed8:	bc 01       	movw	r22, r24
    2eda:	cd 01       	movw	r24, r26
    2edc:	20 e0       	ldi	r18, 0x00	; 0
    2ede:	30 e0       	ldi	r19, 0x00	; 0
    2ee0:	40 ef       	ldi	r20, 0xF0	; 240
    2ee2:	52 e4       	ldi	r21, 0x42	; 66
    2ee4:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    2ee8:	88 23       	and	r24, r24
    2eea:	69 f2       	breq	.-102    	; 0x2e86 <multiply+0x15c>
    2eec:	8a 81       	ldd	r24, Y+2	; 0x02
    2eee:	88 2f       	mov	r24, r24
    2ef0:	90 e0       	ldi	r25, 0x00	; 0
    2ef2:	88 0f       	add	r24, r24
    2ef4:	99 1f       	adc	r25, r25
    2ef6:	88 0f       	add	r24, r24
    2ef8:	99 1f       	adc	r25, r25
    2efa:	fc 01       	movw	r30, r24
    2efc:	ea 54       	subi	r30, 0x4A	; 74
    2efe:	fe 4f       	sbci	r31, 0xFE	; 254
    2f00:	80 81       	ld	r24, Z
    2f02:	91 81       	ldd	r25, Z+1	; 0x01
    2f04:	a2 81       	ldd	r26, Z+2	; 0x02
    2f06:	b3 81       	ldd	r27, Z+3	; 0x03
    2f08:	bc 01       	movw	r22, r24
    2f0a:	cd 01       	movw	r24, r26
    2f0c:	20 e0       	ldi	r18, 0x00	; 0
    2f0e:	30 e0       	ldi	r19, 0x00	; 0
    2f10:	4c e3       	ldi	r20, 0x3C	; 60
    2f12:	52 e4       	ldi	r21, 0x42	; 66
    2f14:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    2f18:	88 23       	and	r24, r24
    2f1a:	09 f4       	brne	.+2      	; 0x2f1e <multiply+0x1f4>
    2f1c:	b4 cf       	rjmp	.-152    	; 0x2e86 <multiply+0x15c>
    2f1e:	8a 81       	ldd	r24, Y+2	; 0x02
    2f20:	88 2f       	mov	r24, r24
    2f22:	90 e0       	ldi	r25, 0x00	; 0
    2f24:	88 0f       	add	r24, r24
    2f26:	99 1f       	adc	r25, r25
    2f28:	88 0f       	add	r24, r24
    2f2a:	99 1f       	adc	r25, r25
    2f2c:	fc 01       	movw	r30, r24
    2f2e:	ea 54       	subi	r30, 0x4A	; 74
    2f30:	fe 4f       	sbci	r31, 0xFE	; 254
    2f32:	80 81       	ld	r24, Z
    2f34:	91 81       	ldd	r25, Z+1	; 0x01
    2f36:	a2 81       	ldd	r26, Z+2	; 0x02
    2f38:	b3 81       	ldd	r27, Z+3	; 0x03
    2f3a:	bc 01       	movw	r22, r24
    2f3c:	cd 01       	movw	r24, r26
    2f3e:	20 e0       	ldi	r18, 0x00	; 0
    2f40:	30 e0       	ldi	r19, 0x00	; 0
    2f42:	4c e2       	ldi	r20, 0x2C	; 44
    2f44:	52 e4       	ldi	r21, 0x42	; 66
    2f46:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    2f4a:	88 23       	and	r24, r24
    2f4c:	09 f4       	brne	.+2      	; 0x2f50 <multiply+0x226>
    2f4e:	9b cf       	rjmp	.-202    	; 0x2e86 <multiply+0x15c>
    2f50:	8a 81       	ldd	r24, Y+2	; 0x02
    2f52:	88 2f       	mov	r24, r24
    2f54:	90 e0       	ldi	r25, 0x00	; 0
    2f56:	88 0f       	add	r24, r24
    2f58:	99 1f       	adc	r25, r25
    2f5a:	88 0f       	add	r24, r24
    2f5c:	99 1f       	adc	r25, r25
    2f5e:	fc 01       	movw	r30, r24
    2f60:	ea 54       	subi	r30, 0x4A	; 74
    2f62:	fe 4f       	sbci	r31, 0xFE	; 254
    2f64:	80 81       	ld	r24, Z
    2f66:	91 81       	ldd	r25, Z+1	; 0x01
    2f68:	a2 81       	ldd	r26, Z+2	; 0x02
    2f6a:	b3 81       	ldd	r27, Z+3	; 0x03
    2f6c:	bc 01       	movw	r22, r24
    2f6e:	cd 01       	movw	r24, r26
    2f70:	20 e0       	ldi	r18, 0x00	; 0
    2f72:	30 e0       	ldi	r19, 0x00	; 0
    2f74:	44 e3       	ldi	r20, 0x34	; 52
    2f76:	52 e4       	ldi	r21, 0x42	; 66
    2f78:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    2f7c:	88 23       	and	r24, r24
    2f7e:	09 f4       	brne	.+2      	; 0x2f82 <multiply+0x258>
    2f80:	82 cf       	rjmp	.-252    	; 0x2e86 <multiply+0x15c>
			{
				max ++;
			}

			operands[min] = operands[min] * operands[max];
    2f82:	8a 81       	ldd	r24, Y+2	; 0x02
    2f84:	c8 2e       	mov	r12, r24
    2f86:	dd 24       	eor	r13, r13
    2f88:	8a 81       	ldd	r24, Y+2	; 0x02
    2f8a:	88 2f       	mov	r24, r24
    2f8c:	90 e0       	ldi	r25, 0x00	; 0
    2f8e:	88 0f       	add	r24, r24
    2f90:	99 1f       	adc	r25, r25
    2f92:	88 0f       	add	r24, r24
    2f94:	99 1f       	adc	r25, r25
    2f96:	fc 01       	movw	r30, r24
    2f98:	ea 54       	subi	r30, 0x4A	; 74
    2f9a:	fe 4f       	sbci	r31, 0xFE	; 254
    2f9c:	e0 80       	ld	r14, Z
    2f9e:	f1 80       	ldd	r15, Z+1	; 0x01
    2fa0:	02 81       	ldd	r16, Z+2	; 0x02
    2fa2:	13 81       	ldd	r17, Z+3	; 0x03
    2fa4:	8b 81       	ldd	r24, Y+3	; 0x03
    2fa6:	88 2f       	mov	r24, r24
    2fa8:	90 e0       	ldi	r25, 0x00	; 0
    2faa:	88 0f       	add	r24, r24
    2fac:	99 1f       	adc	r25, r25
    2fae:	88 0f       	add	r24, r24
    2fb0:	99 1f       	adc	r25, r25
    2fb2:	fc 01       	movw	r30, r24
    2fb4:	ea 54       	subi	r30, 0x4A	; 74
    2fb6:	fe 4f       	sbci	r31, 0xFE	; 254
    2fb8:	20 81       	ld	r18, Z
    2fba:	31 81       	ldd	r19, Z+1	; 0x01
    2fbc:	42 81       	ldd	r20, Z+2	; 0x02
    2fbe:	53 81       	ldd	r21, Z+3	; 0x03
    2fc0:	c8 01       	movw	r24, r16
    2fc2:	b7 01       	movw	r22, r14
    2fc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fc8:	dc 01       	movw	r26, r24
    2fca:	cb 01       	movw	r24, r22
    2fcc:	9c 01       	movw	r18, r24
    2fce:	ad 01       	movw	r20, r26
    2fd0:	c6 01       	movw	r24, r12
    2fd2:	88 0f       	add	r24, r24
    2fd4:	99 1f       	adc	r25, r25
    2fd6:	88 0f       	add	r24, r24
    2fd8:	99 1f       	adc	r25, r25
    2fda:	fc 01       	movw	r30, r24
    2fdc:	ea 54       	subi	r30, 0x4A	; 74
    2fde:	fe 4f       	sbci	r31, 0xFE	; 254
    2fe0:	20 83       	st	Z, r18
    2fe2:	31 83       	std	Z+1, r19	; 0x01
    2fe4:	42 83       	std	Z+2, r20	; 0x02
    2fe6:	53 83       	std	Z+3, r21	; 0x03
			operands[max] = 'n';
    2fe8:	8b 81       	ldd	r24, Y+3	; 0x03
    2fea:	88 2f       	mov	r24, r24
    2fec:	90 e0       	ldi	r25, 0x00	; 0
    2fee:	88 0f       	add	r24, r24
    2ff0:	99 1f       	adc	r25, r25
    2ff2:	88 0f       	add	r24, r24
    2ff4:	99 1f       	adc	r25, r25
    2ff6:	fc 01       	movw	r30, r24
    2ff8:	ea 54       	subi	r30, 0x4A	; 74
    2ffa:	fe 4f       	sbci	r31, 0xFE	; 254
    2ffc:	80 e0       	ldi	r24, 0x00	; 0
    2ffe:	90 e0       	ldi	r25, 0x00	; 0
    3000:	ac ed       	ldi	r26, 0xDC	; 220
    3002:	b2 e4       	ldi	r27, 0x42	; 66
    3004:	80 83       	st	Z, r24
    3006:	91 83       	std	Z+1, r25	; 0x01
    3008:	a2 83       	std	Z+2, r26	; 0x02
    300a:	b3 83       	std	Z+3, r27	; 0x03

/* A function that makes any multipliction operation between operands. */
/* Has no arguments or return. */
static void multiply(void){
	uint8 max, min;
	for(uint8 i = 1; i < counter; i++){
    300c:	89 81       	ldd	r24, Y+1	; 0x01
    300e:	8f 5f       	subi	r24, 0xFF	; 255
    3010:	89 83       	std	Y+1, r24	; 0x01
    3012:	90 91 f2 01 	lds	r25, 0x01F2
    3016:	89 81       	ldd	r24, Y+1	; 0x01
    3018:	89 17       	cp	r24, r25
    301a:	08 f4       	brcc	.+2      	; 0x301e <multiply+0x2f4>
    301c:	95 ce       	rjmp	.-726    	; 0x2d48 <multiply+0x1e>

			operands[min] = operands[min] * operands[max];
			operands[max] = 'n';
		}
	}
}
    301e:	0f 90       	pop	r0
    3020:	0f 90       	pop	r0
    3022:	0f 90       	pop	r0
    3024:	cf 91       	pop	r28
    3026:	df 91       	pop	r29
    3028:	1f 91       	pop	r17
    302a:	0f 91       	pop	r16
    302c:	ff 90       	pop	r15
    302e:	ef 90       	pop	r14
    3030:	df 90       	pop	r13
    3032:	cf 90       	pop	r12
    3034:	08 95       	ret

00003036 <divide>:



/* A function that makes any division operation between operands. */
/* Has no arguments or return. */
static void divide(void){
    3036:	cf 92       	push	r12
    3038:	df 92       	push	r13
    303a:	ef 92       	push	r14
    303c:	ff 92       	push	r15
    303e:	0f 93       	push	r16
    3040:	1f 93       	push	r17
    3042:	df 93       	push	r29
    3044:	cf 93       	push	r28
    3046:	00 d0       	rcall	.+0      	; 0x3048 <divide+0x12>
    3048:	0f 92       	push	r0
    304a:	cd b7       	in	r28, 0x3d	; 61
    304c:	de b7       	in	r29, 0x3e	; 62
	uint8 max, min;
	for(uint8 i = 1; i < counter; i++){
    304e:	81 e0       	ldi	r24, 0x01	; 1
    3050:	89 83       	std	Y+1, r24	; 0x01
    3052:	65 c1       	rjmp	.+714    	; 0x331e <divide+0x2e8>
		if(operands[i] == '/'){
    3054:	89 81       	ldd	r24, Y+1	; 0x01
    3056:	88 2f       	mov	r24, r24
    3058:	90 e0       	ldi	r25, 0x00	; 0
    305a:	88 0f       	add	r24, r24
    305c:	99 1f       	adc	r25, r25
    305e:	88 0f       	add	r24, r24
    3060:	99 1f       	adc	r25, r25
    3062:	fc 01       	movw	r30, r24
    3064:	ea 54       	subi	r30, 0x4A	; 74
    3066:	fe 4f       	sbci	r31, 0xFE	; 254
    3068:	80 81       	ld	r24, Z
    306a:	91 81       	ldd	r25, Z+1	; 0x01
    306c:	a2 81       	ldd	r26, Z+2	; 0x02
    306e:	b3 81       	ldd	r27, Z+3	; 0x03
    3070:	bc 01       	movw	r22, r24
    3072:	cd 01       	movw	r24, r26
    3074:	20 e0       	ldi	r18, 0x00	; 0
    3076:	30 e0       	ldi	r19, 0x00	; 0
    3078:	4c e3       	ldi	r20, 0x3C	; 60
    307a:	52 e4       	ldi	r21, 0x42	; 66
    307c:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    3080:	88 23       	and	r24, r24
    3082:	09 f0       	breq	.+2      	; 0x3086 <divide+0x50>
    3084:	49 c1       	rjmp	.+658    	; 0x3318 <divide+0x2e2>
			min = i - 1;
    3086:	89 81       	ldd	r24, Y+1	; 0x01
    3088:	81 50       	subi	r24, 0x01	; 1
    308a:	8a 83       	std	Y+2, r24	; 0x02
    308c:	03 c0       	rjmp	.+6      	; 0x3094 <divide+0x5e>
			while(operands[min] == 'n' || operands[min] == 'x' || operands[min] == '/' || operands[min] == '+' || operands[min] == '-')
			{
				min --;
    308e:	8a 81       	ldd	r24, Y+2	; 0x02
    3090:	81 50       	subi	r24, 0x01	; 1
    3092:	8a 83       	std	Y+2, r24	; 0x02
static void divide(void){
	uint8 max, min;
	for(uint8 i = 1; i < counter; i++){
		if(operands[i] == '/'){
			min = i - 1;
			while(operands[min] == 'n' || operands[min] == 'x' || operands[min] == '/' || operands[min] == '+' || operands[min] == '-')
    3094:	8a 81       	ldd	r24, Y+2	; 0x02
    3096:	88 2f       	mov	r24, r24
    3098:	90 e0       	ldi	r25, 0x00	; 0
    309a:	88 0f       	add	r24, r24
    309c:	99 1f       	adc	r25, r25
    309e:	88 0f       	add	r24, r24
    30a0:	99 1f       	adc	r25, r25
    30a2:	fc 01       	movw	r30, r24
    30a4:	ea 54       	subi	r30, 0x4A	; 74
    30a6:	fe 4f       	sbci	r31, 0xFE	; 254
    30a8:	80 81       	ld	r24, Z
    30aa:	91 81       	ldd	r25, Z+1	; 0x01
    30ac:	a2 81       	ldd	r26, Z+2	; 0x02
    30ae:	b3 81       	ldd	r27, Z+3	; 0x03
    30b0:	bc 01       	movw	r22, r24
    30b2:	cd 01       	movw	r24, r26
    30b4:	20 e0       	ldi	r18, 0x00	; 0
    30b6:	30 e0       	ldi	r19, 0x00	; 0
    30b8:	4c ed       	ldi	r20, 0xDC	; 220
    30ba:	52 e4       	ldi	r21, 0x42	; 66
    30bc:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    30c0:	88 23       	and	r24, r24
    30c2:	29 f3       	breq	.-54     	; 0x308e <divide+0x58>
    30c4:	8a 81       	ldd	r24, Y+2	; 0x02
    30c6:	88 2f       	mov	r24, r24
    30c8:	90 e0       	ldi	r25, 0x00	; 0
    30ca:	88 0f       	add	r24, r24
    30cc:	99 1f       	adc	r25, r25
    30ce:	88 0f       	add	r24, r24
    30d0:	99 1f       	adc	r25, r25
    30d2:	fc 01       	movw	r30, r24
    30d4:	ea 54       	subi	r30, 0x4A	; 74
    30d6:	fe 4f       	sbci	r31, 0xFE	; 254
    30d8:	80 81       	ld	r24, Z
    30da:	91 81       	ldd	r25, Z+1	; 0x01
    30dc:	a2 81       	ldd	r26, Z+2	; 0x02
    30de:	b3 81       	ldd	r27, Z+3	; 0x03
    30e0:	bc 01       	movw	r22, r24
    30e2:	cd 01       	movw	r24, r26
    30e4:	20 e0       	ldi	r18, 0x00	; 0
    30e6:	30 e0       	ldi	r19, 0x00	; 0
    30e8:	40 ef       	ldi	r20, 0xF0	; 240
    30ea:	52 e4       	ldi	r21, 0x42	; 66
    30ec:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    30f0:	88 23       	and	r24, r24
    30f2:	69 f2       	breq	.-102    	; 0x308e <divide+0x58>
    30f4:	8a 81       	ldd	r24, Y+2	; 0x02
    30f6:	88 2f       	mov	r24, r24
    30f8:	90 e0       	ldi	r25, 0x00	; 0
    30fa:	88 0f       	add	r24, r24
    30fc:	99 1f       	adc	r25, r25
    30fe:	88 0f       	add	r24, r24
    3100:	99 1f       	adc	r25, r25
    3102:	fc 01       	movw	r30, r24
    3104:	ea 54       	subi	r30, 0x4A	; 74
    3106:	fe 4f       	sbci	r31, 0xFE	; 254
    3108:	80 81       	ld	r24, Z
    310a:	91 81       	ldd	r25, Z+1	; 0x01
    310c:	a2 81       	ldd	r26, Z+2	; 0x02
    310e:	b3 81       	ldd	r27, Z+3	; 0x03
    3110:	bc 01       	movw	r22, r24
    3112:	cd 01       	movw	r24, r26
    3114:	20 e0       	ldi	r18, 0x00	; 0
    3116:	30 e0       	ldi	r19, 0x00	; 0
    3118:	4c e3       	ldi	r20, 0x3C	; 60
    311a:	52 e4       	ldi	r21, 0x42	; 66
    311c:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    3120:	88 23       	and	r24, r24
    3122:	09 f4       	brne	.+2      	; 0x3126 <divide+0xf0>
    3124:	b4 cf       	rjmp	.-152    	; 0x308e <divide+0x58>
    3126:	8a 81       	ldd	r24, Y+2	; 0x02
    3128:	88 2f       	mov	r24, r24
    312a:	90 e0       	ldi	r25, 0x00	; 0
    312c:	88 0f       	add	r24, r24
    312e:	99 1f       	adc	r25, r25
    3130:	88 0f       	add	r24, r24
    3132:	99 1f       	adc	r25, r25
    3134:	fc 01       	movw	r30, r24
    3136:	ea 54       	subi	r30, 0x4A	; 74
    3138:	fe 4f       	sbci	r31, 0xFE	; 254
    313a:	80 81       	ld	r24, Z
    313c:	91 81       	ldd	r25, Z+1	; 0x01
    313e:	a2 81       	ldd	r26, Z+2	; 0x02
    3140:	b3 81       	ldd	r27, Z+3	; 0x03
    3142:	bc 01       	movw	r22, r24
    3144:	cd 01       	movw	r24, r26
    3146:	20 e0       	ldi	r18, 0x00	; 0
    3148:	30 e0       	ldi	r19, 0x00	; 0
    314a:	4c e2       	ldi	r20, 0x2C	; 44
    314c:	52 e4       	ldi	r21, 0x42	; 66
    314e:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    3152:	88 23       	and	r24, r24
    3154:	09 f4       	brne	.+2      	; 0x3158 <divide+0x122>
    3156:	9b cf       	rjmp	.-202    	; 0x308e <divide+0x58>
    3158:	8a 81       	ldd	r24, Y+2	; 0x02
    315a:	88 2f       	mov	r24, r24
    315c:	90 e0       	ldi	r25, 0x00	; 0
    315e:	88 0f       	add	r24, r24
    3160:	99 1f       	adc	r25, r25
    3162:	88 0f       	add	r24, r24
    3164:	99 1f       	adc	r25, r25
    3166:	fc 01       	movw	r30, r24
    3168:	ea 54       	subi	r30, 0x4A	; 74
    316a:	fe 4f       	sbci	r31, 0xFE	; 254
    316c:	80 81       	ld	r24, Z
    316e:	91 81       	ldd	r25, Z+1	; 0x01
    3170:	a2 81       	ldd	r26, Z+2	; 0x02
    3172:	b3 81       	ldd	r27, Z+3	; 0x03
    3174:	bc 01       	movw	r22, r24
    3176:	cd 01       	movw	r24, r26
    3178:	20 e0       	ldi	r18, 0x00	; 0
    317a:	30 e0       	ldi	r19, 0x00	; 0
    317c:	44 e3       	ldi	r20, 0x34	; 52
    317e:	52 e4       	ldi	r21, 0x42	; 66
    3180:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    3184:	88 23       	and	r24, r24
    3186:	09 f4       	brne	.+2      	; 0x318a <divide+0x154>
    3188:	82 cf       	rjmp	.-252    	; 0x308e <divide+0x58>
			{
				min --;
			}
			max = i + 1;
    318a:	89 81       	ldd	r24, Y+1	; 0x01
    318c:	8f 5f       	subi	r24, 0xFF	; 255
    318e:	8b 83       	std	Y+3, r24	; 0x03
    3190:	03 c0       	rjmp	.+6      	; 0x3198 <divide+0x162>
			while(operands[max] == 'n' || operands[max] == 'x' || operands[min] == '/' || operands[min] == '+' || operands[min] == '-')
			{
				max ++;
    3192:	8b 81       	ldd	r24, Y+3	; 0x03
    3194:	8f 5f       	subi	r24, 0xFF	; 255
    3196:	8b 83       	std	Y+3, r24	; 0x03
			while(operands[min] == 'n' || operands[min] == 'x' || operands[min] == '/' || operands[min] == '+' || operands[min] == '-')
			{
				min --;
			}
			max = i + 1;
			while(operands[max] == 'n' || operands[max] == 'x' || operands[min] == '/' || operands[min] == '+' || operands[min] == '-')
    3198:	8b 81       	ldd	r24, Y+3	; 0x03
    319a:	88 2f       	mov	r24, r24
    319c:	90 e0       	ldi	r25, 0x00	; 0
    319e:	88 0f       	add	r24, r24
    31a0:	99 1f       	adc	r25, r25
    31a2:	88 0f       	add	r24, r24
    31a4:	99 1f       	adc	r25, r25
    31a6:	fc 01       	movw	r30, r24
    31a8:	ea 54       	subi	r30, 0x4A	; 74
    31aa:	fe 4f       	sbci	r31, 0xFE	; 254
    31ac:	80 81       	ld	r24, Z
    31ae:	91 81       	ldd	r25, Z+1	; 0x01
    31b0:	a2 81       	ldd	r26, Z+2	; 0x02
    31b2:	b3 81       	ldd	r27, Z+3	; 0x03
    31b4:	bc 01       	movw	r22, r24
    31b6:	cd 01       	movw	r24, r26
    31b8:	20 e0       	ldi	r18, 0x00	; 0
    31ba:	30 e0       	ldi	r19, 0x00	; 0
    31bc:	4c ed       	ldi	r20, 0xDC	; 220
    31be:	52 e4       	ldi	r21, 0x42	; 66
    31c0:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    31c4:	88 23       	and	r24, r24
    31c6:	29 f3       	breq	.-54     	; 0x3192 <divide+0x15c>
    31c8:	8b 81       	ldd	r24, Y+3	; 0x03
    31ca:	88 2f       	mov	r24, r24
    31cc:	90 e0       	ldi	r25, 0x00	; 0
    31ce:	88 0f       	add	r24, r24
    31d0:	99 1f       	adc	r25, r25
    31d2:	88 0f       	add	r24, r24
    31d4:	99 1f       	adc	r25, r25
    31d6:	fc 01       	movw	r30, r24
    31d8:	ea 54       	subi	r30, 0x4A	; 74
    31da:	fe 4f       	sbci	r31, 0xFE	; 254
    31dc:	80 81       	ld	r24, Z
    31de:	91 81       	ldd	r25, Z+1	; 0x01
    31e0:	a2 81       	ldd	r26, Z+2	; 0x02
    31e2:	b3 81       	ldd	r27, Z+3	; 0x03
    31e4:	bc 01       	movw	r22, r24
    31e6:	cd 01       	movw	r24, r26
    31e8:	20 e0       	ldi	r18, 0x00	; 0
    31ea:	30 e0       	ldi	r19, 0x00	; 0
    31ec:	40 ef       	ldi	r20, 0xF0	; 240
    31ee:	52 e4       	ldi	r21, 0x42	; 66
    31f0:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    31f4:	88 23       	and	r24, r24
    31f6:	69 f2       	breq	.-102    	; 0x3192 <divide+0x15c>
    31f8:	8a 81       	ldd	r24, Y+2	; 0x02
    31fa:	88 2f       	mov	r24, r24
    31fc:	90 e0       	ldi	r25, 0x00	; 0
    31fe:	88 0f       	add	r24, r24
    3200:	99 1f       	adc	r25, r25
    3202:	88 0f       	add	r24, r24
    3204:	99 1f       	adc	r25, r25
    3206:	fc 01       	movw	r30, r24
    3208:	ea 54       	subi	r30, 0x4A	; 74
    320a:	fe 4f       	sbci	r31, 0xFE	; 254
    320c:	80 81       	ld	r24, Z
    320e:	91 81       	ldd	r25, Z+1	; 0x01
    3210:	a2 81       	ldd	r26, Z+2	; 0x02
    3212:	b3 81       	ldd	r27, Z+3	; 0x03
    3214:	bc 01       	movw	r22, r24
    3216:	cd 01       	movw	r24, r26
    3218:	20 e0       	ldi	r18, 0x00	; 0
    321a:	30 e0       	ldi	r19, 0x00	; 0
    321c:	4c e3       	ldi	r20, 0x3C	; 60
    321e:	52 e4       	ldi	r21, 0x42	; 66
    3220:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    3224:	88 23       	and	r24, r24
    3226:	09 f4       	brne	.+2      	; 0x322a <divide+0x1f4>
    3228:	b4 cf       	rjmp	.-152    	; 0x3192 <divide+0x15c>
    322a:	8a 81       	ldd	r24, Y+2	; 0x02
    322c:	88 2f       	mov	r24, r24
    322e:	90 e0       	ldi	r25, 0x00	; 0
    3230:	88 0f       	add	r24, r24
    3232:	99 1f       	adc	r25, r25
    3234:	88 0f       	add	r24, r24
    3236:	99 1f       	adc	r25, r25
    3238:	fc 01       	movw	r30, r24
    323a:	ea 54       	subi	r30, 0x4A	; 74
    323c:	fe 4f       	sbci	r31, 0xFE	; 254
    323e:	80 81       	ld	r24, Z
    3240:	91 81       	ldd	r25, Z+1	; 0x01
    3242:	a2 81       	ldd	r26, Z+2	; 0x02
    3244:	b3 81       	ldd	r27, Z+3	; 0x03
    3246:	bc 01       	movw	r22, r24
    3248:	cd 01       	movw	r24, r26
    324a:	20 e0       	ldi	r18, 0x00	; 0
    324c:	30 e0       	ldi	r19, 0x00	; 0
    324e:	4c e2       	ldi	r20, 0x2C	; 44
    3250:	52 e4       	ldi	r21, 0x42	; 66
    3252:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    3256:	88 23       	and	r24, r24
    3258:	09 f4       	brne	.+2      	; 0x325c <divide+0x226>
    325a:	9b cf       	rjmp	.-202    	; 0x3192 <divide+0x15c>
    325c:	8a 81       	ldd	r24, Y+2	; 0x02
    325e:	88 2f       	mov	r24, r24
    3260:	90 e0       	ldi	r25, 0x00	; 0
    3262:	88 0f       	add	r24, r24
    3264:	99 1f       	adc	r25, r25
    3266:	88 0f       	add	r24, r24
    3268:	99 1f       	adc	r25, r25
    326a:	fc 01       	movw	r30, r24
    326c:	ea 54       	subi	r30, 0x4A	; 74
    326e:	fe 4f       	sbci	r31, 0xFE	; 254
    3270:	80 81       	ld	r24, Z
    3272:	91 81       	ldd	r25, Z+1	; 0x01
    3274:	a2 81       	ldd	r26, Z+2	; 0x02
    3276:	b3 81       	ldd	r27, Z+3	; 0x03
    3278:	bc 01       	movw	r22, r24
    327a:	cd 01       	movw	r24, r26
    327c:	20 e0       	ldi	r18, 0x00	; 0
    327e:	30 e0       	ldi	r19, 0x00	; 0
    3280:	44 e3       	ldi	r20, 0x34	; 52
    3282:	52 e4       	ldi	r21, 0x42	; 66
    3284:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    3288:	88 23       	and	r24, r24
    328a:	09 f4       	brne	.+2      	; 0x328e <divide+0x258>
    328c:	82 cf       	rjmp	.-252    	; 0x3192 <divide+0x15c>
			{
				max ++;
			}

			operands[min] = operands[min] / operands[max];
    328e:	8a 81       	ldd	r24, Y+2	; 0x02
    3290:	c8 2e       	mov	r12, r24
    3292:	dd 24       	eor	r13, r13
    3294:	8a 81       	ldd	r24, Y+2	; 0x02
    3296:	88 2f       	mov	r24, r24
    3298:	90 e0       	ldi	r25, 0x00	; 0
    329a:	88 0f       	add	r24, r24
    329c:	99 1f       	adc	r25, r25
    329e:	88 0f       	add	r24, r24
    32a0:	99 1f       	adc	r25, r25
    32a2:	fc 01       	movw	r30, r24
    32a4:	ea 54       	subi	r30, 0x4A	; 74
    32a6:	fe 4f       	sbci	r31, 0xFE	; 254
    32a8:	e0 80       	ld	r14, Z
    32aa:	f1 80       	ldd	r15, Z+1	; 0x01
    32ac:	02 81       	ldd	r16, Z+2	; 0x02
    32ae:	13 81       	ldd	r17, Z+3	; 0x03
    32b0:	8b 81       	ldd	r24, Y+3	; 0x03
    32b2:	88 2f       	mov	r24, r24
    32b4:	90 e0       	ldi	r25, 0x00	; 0
    32b6:	88 0f       	add	r24, r24
    32b8:	99 1f       	adc	r25, r25
    32ba:	88 0f       	add	r24, r24
    32bc:	99 1f       	adc	r25, r25
    32be:	fc 01       	movw	r30, r24
    32c0:	ea 54       	subi	r30, 0x4A	; 74
    32c2:	fe 4f       	sbci	r31, 0xFE	; 254
    32c4:	20 81       	ld	r18, Z
    32c6:	31 81       	ldd	r19, Z+1	; 0x01
    32c8:	42 81       	ldd	r20, Z+2	; 0x02
    32ca:	53 81       	ldd	r21, Z+3	; 0x03
    32cc:	c8 01       	movw	r24, r16
    32ce:	b7 01       	movw	r22, r14
    32d0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    32d4:	dc 01       	movw	r26, r24
    32d6:	cb 01       	movw	r24, r22
    32d8:	9c 01       	movw	r18, r24
    32da:	ad 01       	movw	r20, r26
    32dc:	c6 01       	movw	r24, r12
    32de:	88 0f       	add	r24, r24
    32e0:	99 1f       	adc	r25, r25
    32e2:	88 0f       	add	r24, r24
    32e4:	99 1f       	adc	r25, r25
    32e6:	fc 01       	movw	r30, r24
    32e8:	ea 54       	subi	r30, 0x4A	; 74
    32ea:	fe 4f       	sbci	r31, 0xFE	; 254
    32ec:	20 83       	st	Z, r18
    32ee:	31 83       	std	Z+1, r19	; 0x01
    32f0:	42 83       	std	Z+2, r20	; 0x02
    32f2:	53 83       	std	Z+3, r21	; 0x03
			operands[max] = 'n';
    32f4:	8b 81       	ldd	r24, Y+3	; 0x03
    32f6:	88 2f       	mov	r24, r24
    32f8:	90 e0       	ldi	r25, 0x00	; 0
    32fa:	88 0f       	add	r24, r24
    32fc:	99 1f       	adc	r25, r25
    32fe:	88 0f       	add	r24, r24
    3300:	99 1f       	adc	r25, r25
    3302:	fc 01       	movw	r30, r24
    3304:	ea 54       	subi	r30, 0x4A	; 74
    3306:	fe 4f       	sbci	r31, 0xFE	; 254
    3308:	80 e0       	ldi	r24, 0x00	; 0
    330a:	90 e0       	ldi	r25, 0x00	; 0
    330c:	ac ed       	ldi	r26, 0xDC	; 220
    330e:	b2 e4       	ldi	r27, 0x42	; 66
    3310:	80 83       	st	Z, r24
    3312:	91 83       	std	Z+1, r25	; 0x01
    3314:	a2 83       	std	Z+2, r26	; 0x02
    3316:	b3 83       	std	Z+3, r27	; 0x03

/* A function that makes any division operation between operands. */
/* Has no arguments or return. */
static void divide(void){
	uint8 max, min;
	for(uint8 i = 1; i < counter; i++){
    3318:	89 81       	ldd	r24, Y+1	; 0x01
    331a:	8f 5f       	subi	r24, 0xFF	; 255
    331c:	89 83       	std	Y+1, r24	; 0x01
    331e:	90 91 f2 01 	lds	r25, 0x01F2
    3322:	89 81       	ldd	r24, Y+1	; 0x01
    3324:	89 17       	cp	r24, r25
    3326:	08 f4       	brcc	.+2      	; 0x332a <divide+0x2f4>
    3328:	95 ce       	rjmp	.-726    	; 0x3054 <divide+0x1e>

			operands[min] = operands[min] / operands[max];
			operands[max] = 'n';
		}
	}
}
    332a:	0f 90       	pop	r0
    332c:	0f 90       	pop	r0
    332e:	0f 90       	pop	r0
    3330:	cf 91       	pop	r28
    3332:	df 91       	pop	r29
    3334:	1f 91       	pop	r17
    3336:	0f 91       	pop	r16
    3338:	ff 90       	pop	r15
    333a:	ef 90       	pop	r14
    333c:	df 90       	pop	r13
    333e:	cf 90       	pop	r12
    3340:	08 95       	ret

00003342 <add>:


/* A function that makes any addition operation between operands. */
/* Has no arguments or return. */
static void add(void){
    3342:	cf 92       	push	r12
    3344:	df 92       	push	r13
    3346:	ef 92       	push	r14
    3348:	ff 92       	push	r15
    334a:	0f 93       	push	r16
    334c:	1f 93       	push	r17
    334e:	df 93       	push	r29
    3350:	cf 93       	push	r28
    3352:	00 d0       	rcall	.+0      	; 0x3354 <add+0x12>
    3354:	0f 92       	push	r0
    3356:	cd b7       	in	r28, 0x3d	; 61
    3358:	de b7       	in	r29, 0x3e	; 62
	uint8 max, min;
	for(uint8 i = 1; i < counter; i++){
    335a:	81 e0       	ldi	r24, 0x01	; 1
    335c:	89 83       	std	Y+1, r24	; 0x01
    335e:	65 c1       	rjmp	.+714    	; 0x362a <add+0x2e8>
		if(operands[i] == '+'){
    3360:	89 81       	ldd	r24, Y+1	; 0x01
    3362:	88 2f       	mov	r24, r24
    3364:	90 e0       	ldi	r25, 0x00	; 0
    3366:	88 0f       	add	r24, r24
    3368:	99 1f       	adc	r25, r25
    336a:	88 0f       	add	r24, r24
    336c:	99 1f       	adc	r25, r25
    336e:	fc 01       	movw	r30, r24
    3370:	ea 54       	subi	r30, 0x4A	; 74
    3372:	fe 4f       	sbci	r31, 0xFE	; 254
    3374:	80 81       	ld	r24, Z
    3376:	91 81       	ldd	r25, Z+1	; 0x01
    3378:	a2 81       	ldd	r26, Z+2	; 0x02
    337a:	b3 81       	ldd	r27, Z+3	; 0x03
    337c:	bc 01       	movw	r22, r24
    337e:	cd 01       	movw	r24, r26
    3380:	20 e0       	ldi	r18, 0x00	; 0
    3382:	30 e0       	ldi	r19, 0x00	; 0
    3384:	4c e2       	ldi	r20, 0x2C	; 44
    3386:	52 e4       	ldi	r21, 0x42	; 66
    3388:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    338c:	88 23       	and	r24, r24
    338e:	09 f0       	breq	.+2      	; 0x3392 <add+0x50>
    3390:	49 c1       	rjmp	.+658    	; 0x3624 <add+0x2e2>
			min = i - 1;
    3392:	89 81       	ldd	r24, Y+1	; 0x01
    3394:	81 50       	subi	r24, 0x01	; 1
    3396:	8a 83       	std	Y+2, r24	; 0x02
    3398:	03 c0       	rjmp	.+6      	; 0x33a0 <add+0x5e>
			while(operands[min] == 'n' || operands[min] == 'x' || operands[min] == '/' || operands[min] == '+' || operands[min] == '-')
			{
				min --;
    339a:	8a 81       	ldd	r24, Y+2	; 0x02
    339c:	81 50       	subi	r24, 0x01	; 1
    339e:	8a 83       	std	Y+2, r24	; 0x02
static void add(void){
	uint8 max, min;
	for(uint8 i = 1; i < counter; i++){
		if(operands[i] == '+'){
			min = i - 1;
			while(operands[min] == 'n' || operands[min] == 'x' || operands[min] == '/' || operands[min] == '+' || operands[min] == '-')
    33a0:	8a 81       	ldd	r24, Y+2	; 0x02
    33a2:	88 2f       	mov	r24, r24
    33a4:	90 e0       	ldi	r25, 0x00	; 0
    33a6:	88 0f       	add	r24, r24
    33a8:	99 1f       	adc	r25, r25
    33aa:	88 0f       	add	r24, r24
    33ac:	99 1f       	adc	r25, r25
    33ae:	fc 01       	movw	r30, r24
    33b0:	ea 54       	subi	r30, 0x4A	; 74
    33b2:	fe 4f       	sbci	r31, 0xFE	; 254
    33b4:	80 81       	ld	r24, Z
    33b6:	91 81       	ldd	r25, Z+1	; 0x01
    33b8:	a2 81       	ldd	r26, Z+2	; 0x02
    33ba:	b3 81       	ldd	r27, Z+3	; 0x03
    33bc:	bc 01       	movw	r22, r24
    33be:	cd 01       	movw	r24, r26
    33c0:	20 e0       	ldi	r18, 0x00	; 0
    33c2:	30 e0       	ldi	r19, 0x00	; 0
    33c4:	4c ed       	ldi	r20, 0xDC	; 220
    33c6:	52 e4       	ldi	r21, 0x42	; 66
    33c8:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    33cc:	88 23       	and	r24, r24
    33ce:	29 f3       	breq	.-54     	; 0x339a <add+0x58>
    33d0:	8a 81       	ldd	r24, Y+2	; 0x02
    33d2:	88 2f       	mov	r24, r24
    33d4:	90 e0       	ldi	r25, 0x00	; 0
    33d6:	88 0f       	add	r24, r24
    33d8:	99 1f       	adc	r25, r25
    33da:	88 0f       	add	r24, r24
    33dc:	99 1f       	adc	r25, r25
    33de:	fc 01       	movw	r30, r24
    33e0:	ea 54       	subi	r30, 0x4A	; 74
    33e2:	fe 4f       	sbci	r31, 0xFE	; 254
    33e4:	80 81       	ld	r24, Z
    33e6:	91 81       	ldd	r25, Z+1	; 0x01
    33e8:	a2 81       	ldd	r26, Z+2	; 0x02
    33ea:	b3 81       	ldd	r27, Z+3	; 0x03
    33ec:	bc 01       	movw	r22, r24
    33ee:	cd 01       	movw	r24, r26
    33f0:	20 e0       	ldi	r18, 0x00	; 0
    33f2:	30 e0       	ldi	r19, 0x00	; 0
    33f4:	40 ef       	ldi	r20, 0xF0	; 240
    33f6:	52 e4       	ldi	r21, 0x42	; 66
    33f8:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    33fc:	88 23       	and	r24, r24
    33fe:	69 f2       	breq	.-102    	; 0x339a <add+0x58>
    3400:	8a 81       	ldd	r24, Y+2	; 0x02
    3402:	88 2f       	mov	r24, r24
    3404:	90 e0       	ldi	r25, 0x00	; 0
    3406:	88 0f       	add	r24, r24
    3408:	99 1f       	adc	r25, r25
    340a:	88 0f       	add	r24, r24
    340c:	99 1f       	adc	r25, r25
    340e:	fc 01       	movw	r30, r24
    3410:	ea 54       	subi	r30, 0x4A	; 74
    3412:	fe 4f       	sbci	r31, 0xFE	; 254
    3414:	80 81       	ld	r24, Z
    3416:	91 81       	ldd	r25, Z+1	; 0x01
    3418:	a2 81       	ldd	r26, Z+2	; 0x02
    341a:	b3 81       	ldd	r27, Z+3	; 0x03
    341c:	bc 01       	movw	r22, r24
    341e:	cd 01       	movw	r24, r26
    3420:	20 e0       	ldi	r18, 0x00	; 0
    3422:	30 e0       	ldi	r19, 0x00	; 0
    3424:	4c e3       	ldi	r20, 0x3C	; 60
    3426:	52 e4       	ldi	r21, 0x42	; 66
    3428:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    342c:	88 23       	and	r24, r24
    342e:	09 f4       	brne	.+2      	; 0x3432 <add+0xf0>
    3430:	b4 cf       	rjmp	.-152    	; 0x339a <add+0x58>
    3432:	8a 81       	ldd	r24, Y+2	; 0x02
    3434:	88 2f       	mov	r24, r24
    3436:	90 e0       	ldi	r25, 0x00	; 0
    3438:	88 0f       	add	r24, r24
    343a:	99 1f       	adc	r25, r25
    343c:	88 0f       	add	r24, r24
    343e:	99 1f       	adc	r25, r25
    3440:	fc 01       	movw	r30, r24
    3442:	ea 54       	subi	r30, 0x4A	; 74
    3444:	fe 4f       	sbci	r31, 0xFE	; 254
    3446:	80 81       	ld	r24, Z
    3448:	91 81       	ldd	r25, Z+1	; 0x01
    344a:	a2 81       	ldd	r26, Z+2	; 0x02
    344c:	b3 81       	ldd	r27, Z+3	; 0x03
    344e:	bc 01       	movw	r22, r24
    3450:	cd 01       	movw	r24, r26
    3452:	20 e0       	ldi	r18, 0x00	; 0
    3454:	30 e0       	ldi	r19, 0x00	; 0
    3456:	4c e2       	ldi	r20, 0x2C	; 44
    3458:	52 e4       	ldi	r21, 0x42	; 66
    345a:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    345e:	88 23       	and	r24, r24
    3460:	09 f4       	brne	.+2      	; 0x3464 <add+0x122>
    3462:	9b cf       	rjmp	.-202    	; 0x339a <add+0x58>
    3464:	8a 81       	ldd	r24, Y+2	; 0x02
    3466:	88 2f       	mov	r24, r24
    3468:	90 e0       	ldi	r25, 0x00	; 0
    346a:	88 0f       	add	r24, r24
    346c:	99 1f       	adc	r25, r25
    346e:	88 0f       	add	r24, r24
    3470:	99 1f       	adc	r25, r25
    3472:	fc 01       	movw	r30, r24
    3474:	ea 54       	subi	r30, 0x4A	; 74
    3476:	fe 4f       	sbci	r31, 0xFE	; 254
    3478:	80 81       	ld	r24, Z
    347a:	91 81       	ldd	r25, Z+1	; 0x01
    347c:	a2 81       	ldd	r26, Z+2	; 0x02
    347e:	b3 81       	ldd	r27, Z+3	; 0x03
    3480:	bc 01       	movw	r22, r24
    3482:	cd 01       	movw	r24, r26
    3484:	20 e0       	ldi	r18, 0x00	; 0
    3486:	30 e0       	ldi	r19, 0x00	; 0
    3488:	44 e3       	ldi	r20, 0x34	; 52
    348a:	52 e4       	ldi	r21, 0x42	; 66
    348c:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    3490:	88 23       	and	r24, r24
    3492:	09 f4       	brne	.+2      	; 0x3496 <add+0x154>
    3494:	82 cf       	rjmp	.-252    	; 0x339a <add+0x58>
			{
				min --;
			}
			max = i + 1;
    3496:	89 81       	ldd	r24, Y+1	; 0x01
    3498:	8f 5f       	subi	r24, 0xFF	; 255
    349a:	8b 83       	std	Y+3, r24	; 0x03
    349c:	03 c0       	rjmp	.+6      	; 0x34a4 <add+0x162>
			while(operands[max] == 'n' || operands[max] == 'x' || operands[min] == '/' || operands[min] == '+' || operands[min] == '-')
			{
				max ++;
    349e:	8b 81       	ldd	r24, Y+3	; 0x03
    34a0:	8f 5f       	subi	r24, 0xFF	; 255
    34a2:	8b 83       	std	Y+3, r24	; 0x03
			while(operands[min] == 'n' || operands[min] == 'x' || operands[min] == '/' || operands[min] == '+' || operands[min] == '-')
			{
				min --;
			}
			max = i + 1;
			while(operands[max] == 'n' || operands[max] == 'x' || operands[min] == '/' || operands[min] == '+' || operands[min] == '-')
    34a4:	8b 81       	ldd	r24, Y+3	; 0x03
    34a6:	88 2f       	mov	r24, r24
    34a8:	90 e0       	ldi	r25, 0x00	; 0
    34aa:	88 0f       	add	r24, r24
    34ac:	99 1f       	adc	r25, r25
    34ae:	88 0f       	add	r24, r24
    34b0:	99 1f       	adc	r25, r25
    34b2:	fc 01       	movw	r30, r24
    34b4:	ea 54       	subi	r30, 0x4A	; 74
    34b6:	fe 4f       	sbci	r31, 0xFE	; 254
    34b8:	80 81       	ld	r24, Z
    34ba:	91 81       	ldd	r25, Z+1	; 0x01
    34bc:	a2 81       	ldd	r26, Z+2	; 0x02
    34be:	b3 81       	ldd	r27, Z+3	; 0x03
    34c0:	bc 01       	movw	r22, r24
    34c2:	cd 01       	movw	r24, r26
    34c4:	20 e0       	ldi	r18, 0x00	; 0
    34c6:	30 e0       	ldi	r19, 0x00	; 0
    34c8:	4c ed       	ldi	r20, 0xDC	; 220
    34ca:	52 e4       	ldi	r21, 0x42	; 66
    34cc:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    34d0:	88 23       	and	r24, r24
    34d2:	29 f3       	breq	.-54     	; 0x349e <add+0x15c>
    34d4:	8b 81       	ldd	r24, Y+3	; 0x03
    34d6:	88 2f       	mov	r24, r24
    34d8:	90 e0       	ldi	r25, 0x00	; 0
    34da:	88 0f       	add	r24, r24
    34dc:	99 1f       	adc	r25, r25
    34de:	88 0f       	add	r24, r24
    34e0:	99 1f       	adc	r25, r25
    34e2:	fc 01       	movw	r30, r24
    34e4:	ea 54       	subi	r30, 0x4A	; 74
    34e6:	fe 4f       	sbci	r31, 0xFE	; 254
    34e8:	80 81       	ld	r24, Z
    34ea:	91 81       	ldd	r25, Z+1	; 0x01
    34ec:	a2 81       	ldd	r26, Z+2	; 0x02
    34ee:	b3 81       	ldd	r27, Z+3	; 0x03
    34f0:	bc 01       	movw	r22, r24
    34f2:	cd 01       	movw	r24, r26
    34f4:	20 e0       	ldi	r18, 0x00	; 0
    34f6:	30 e0       	ldi	r19, 0x00	; 0
    34f8:	40 ef       	ldi	r20, 0xF0	; 240
    34fa:	52 e4       	ldi	r21, 0x42	; 66
    34fc:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    3500:	88 23       	and	r24, r24
    3502:	69 f2       	breq	.-102    	; 0x349e <add+0x15c>
    3504:	8a 81       	ldd	r24, Y+2	; 0x02
    3506:	88 2f       	mov	r24, r24
    3508:	90 e0       	ldi	r25, 0x00	; 0
    350a:	88 0f       	add	r24, r24
    350c:	99 1f       	adc	r25, r25
    350e:	88 0f       	add	r24, r24
    3510:	99 1f       	adc	r25, r25
    3512:	fc 01       	movw	r30, r24
    3514:	ea 54       	subi	r30, 0x4A	; 74
    3516:	fe 4f       	sbci	r31, 0xFE	; 254
    3518:	80 81       	ld	r24, Z
    351a:	91 81       	ldd	r25, Z+1	; 0x01
    351c:	a2 81       	ldd	r26, Z+2	; 0x02
    351e:	b3 81       	ldd	r27, Z+3	; 0x03
    3520:	bc 01       	movw	r22, r24
    3522:	cd 01       	movw	r24, r26
    3524:	20 e0       	ldi	r18, 0x00	; 0
    3526:	30 e0       	ldi	r19, 0x00	; 0
    3528:	4c e3       	ldi	r20, 0x3C	; 60
    352a:	52 e4       	ldi	r21, 0x42	; 66
    352c:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    3530:	88 23       	and	r24, r24
    3532:	09 f4       	brne	.+2      	; 0x3536 <add+0x1f4>
    3534:	b4 cf       	rjmp	.-152    	; 0x349e <add+0x15c>
    3536:	8a 81       	ldd	r24, Y+2	; 0x02
    3538:	88 2f       	mov	r24, r24
    353a:	90 e0       	ldi	r25, 0x00	; 0
    353c:	88 0f       	add	r24, r24
    353e:	99 1f       	adc	r25, r25
    3540:	88 0f       	add	r24, r24
    3542:	99 1f       	adc	r25, r25
    3544:	fc 01       	movw	r30, r24
    3546:	ea 54       	subi	r30, 0x4A	; 74
    3548:	fe 4f       	sbci	r31, 0xFE	; 254
    354a:	80 81       	ld	r24, Z
    354c:	91 81       	ldd	r25, Z+1	; 0x01
    354e:	a2 81       	ldd	r26, Z+2	; 0x02
    3550:	b3 81       	ldd	r27, Z+3	; 0x03
    3552:	bc 01       	movw	r22, r24
    3554:	cd 01       	movw	r24, r26
    3556:	20 e0       	ldi	r18, 0x00	; 0
    3558:	30 e0       	ldi	r19, 0x00	; 0
    355a:	4c e2       	ldi	r20, 0x2C	; 44
    355c:	52 e4       	ldi	r21, 0x42	; 66
    355e:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    3562:	88 23       	and	r24, r24
    3564:	09 f4       	brne	.+2      	; 0x3568 <add+0x226>
    3566:	9b cf       	rjmp	.-202    	; 0x349e <add+0x15c>
    3568:	8a 81       	ldd	r24, Y+2	; 0x02
    356a:	88 2f       	mov	r24, r24
    356c:	90 e0       	ldi	r25, 0x00	; 0
    356e:	88 0f       	add	r24, r24
    3570:	99 1f       	adc	r25, r25
    3572:	88 0f       	add	r24, r24
    3574:	99 1f       	adc	r25, r25
    3576:	fc 01       	movw	r30, r24
    3578:	ea 54       	subi	r30, 0x4A	; 74
    357a:	fe 4f       	sbci	r31, 0xFE	; 254
    357c:	80 81       	ld	r24, Z
    357e:	91 81       	ldd	r25, Z+1	; 0x01
    3580:	a2 81       	ldd	r26, Z+2	; 0x02
    3582:	b3 81       	ldd	r27, Z+3	; 0x03
    3584:	bc 01       	movw	r22, r24
    3586:	cd 01       	movw	r24, r26
    3588:	20 e0       	ldi	r18, 0x00	; 0
    358a:	30 e0       	ldi	r19, 0x00	; 0
    358c:	44 e3       	ldi	r20, 0x34	; 52
    358e:	52 e4       	ldi	r21, 0x42	; 66
    3590:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    3594:	88 23       	and	r24, r24
    3596:	09 f4       	brne	.+2      	; 0x359a <add+0x258>
    3598:	82 cf       	rjmp	.-252    	; 0x349e <add+0x15c>
			{
				max ++;
			}

			operands[min] = operands[min] + operands[max];
    359a:	8a 81       	ldd	r24, Y+2	; 0x02
    359c:	c8 2e       	mov	r12, r24
    359e:	dd 24       	eor	r13, r13
    35a0:	8a 81       	ldd	r24, Y+2	; 0x02
    35a2:	88 2f       	mov	r24, r24
    35a4:	90 e0       	ldi	r25, 0x00	; 0
    35a6:	88 0f       	add	r24, r24
    35a8:	99 1f       	adc	r25, r25
    35aa:	88 0f       	add	r24, r24
    35ac:	99 1f       	adc	r25, r25
    35ae:	fc 01       	movw	r30, r24
    35b0:	ea 54       	subi	r30, 0x4A	; 74
    35b2:	fe 4f       	sbci	r31, 0xFE	; 254
    35b4:	e0 80       	ld	r14, Z
    35b6:	f1 80       	ldd	r15, Z+1	; 0x01
    35b8:	02 81       	ldd	r16, Z+2	; 0x02
    35ba:	13 81       	ldd	r17, Z+3	; 0x03
    35bc:	8b 81       	ldd	r24, Y+3	; 0x03
    35be:	88 2f       	mov	r24, r24
    35c0:	90 e0       	ldi	r25, 0x00	; 0
    35c2:	88 0f       	add	r24, r24
    35c4:	99 1f       	adc	r25, r25
    35c6:	88 0f       	add	r24, r24
    35c8:	99 1f       	adc	r25, r25
    35ca:	fc 01       	movw	r30, r24
    35cc:	ea 54       	subi	r30, 0x4A	; 74
    35ce:	fe 4f       	sbci	r31, 0xFE	; 254
    35d0:	20 81       	ld	r18, Z
    35d2:	31 81       	ldd	r19, Z+1	; 0x01
    35d4:	42 81       	ldd	r20, Z+2	; 0x02
    35d6:	53 81       	ldd	r21, Z+3	; 0x03
    35d8:	c8 01       	movw	r24, r16
    35da:	b7 01       	movw	r22, r14
    35dc:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    35e0:	dc 01       	movw	r26, r24
    35e2:	cb 01       	movw	r24, r22
    35e4:	9c 01       	movw	r18, r24
    35e6:	ad 01       	movw	r20, r26
    35e8:	c6 01       	movw	r24, r12
    35ea:	88 0f       	add	r24, r24
    35ec:	99 1f       	adc	r25, r25
    35ee:	88 0f       	add	r24, r24
    35f0:	99 1f       	adc	r25, r25
    35f2:	fc 01       	movw	r30, r24
    35f4:	ea 54       	subi	r30, 0x4A	; 74
    35f6:	fe 4f       	sbci	r31, 0xFE	; 254
    35f8:	20 83       	st	Z, r18
    35fa:	31 83       	std	Z+1, r19	; 0x01
    35fc:	42 83       	std	Z+2, r20	; 0x02
    35fe:	53 83       	std	Z+3, r21	; 0x03
			operands[max] = 'n';
    3600:	8b 81       	ldd	r24, Y+3	; 0x03
    3602:	88 2f       	mov	r24, r24
    3604:	90 e0       	ldi	r25, 0x00	; 0
    3606:	88 0f       	add	r24, r24
    3608:	99 1f       	adc	r25, r25
    360a:	88 0f       	add	r24, r24
    360c:	99 1f       	adc	r25, r25
    360e:	fc 01       	movw	r30, r24
    3610:	ea 54       	subi	r30, 0x4A	; 74
    3612:	fe 4f       	sbci	r31, 0xFE	; 254
    3614:	80 e0       	ldi	r24, 0x00	; 0
    3616:	90 e0       	ldi	r25, 0x00	; 0
    3618:	ac ed       	ldi	r26, 0xDC	; 220
    361a:	b2 e4       	ldi	r27, 0x42	; 66
    361c:	80 83       	st	Z, r24
    361e:	91 83       	std	Z+1, r25	; 0x01
    3620:	a2 83       	std	Z+2, r26	; 0x02
    3622:	b3 83       	std	Z+3, r27	; 0x03

/* A function that makes any addition operation between operands. */
/* Has no arguments or return. */
static void add(void){
	uint8 max, min;
	for(uint8 i = 1; i < counter; i++){
    3624:	89 81       	ldd	r24, Y+1	; 0x01
    3626:	8f 5f       	subi	r24, 0xFF	; 255
    3628:	89 83       	std	Y+1, r24	; 0x01
    362a:	90 91 f2 01 	lds	r25, 0x01F2
    362e:	89 81       	ldd	r24, Y+1	; 0x01
    3630:	89 17       	cp	r24, r25
    3632:	08 f4       	brcc	.+2      	; 0x3636 <add+0x2f4>
    3634:	95 ce       	rjmp	.-726    	; 0x3360 <add+0x1e>

			operands[min] = operands[min] + operands[max];
			operands[max] = 'n';
		}
	}
}
    3636:	0f 90       	pop	r0
    3638:	0f 90       	pop	r0
    363a:	0f 90       	pop	r0
    363c:	cf 91       	pop	r28
    363e:	df 91       	pop	r29
    3640:	1f 91       	pop	r17
    3642:	0f 91       	pop	r16
    3644:	ff 90       	pop	r15
    3646:	ef 90       	pop	r14
    3648:	df 90       	pop	r13
    364a:	cf 90       	pop	r12
    364c:	08 95       	ret

0000364e <subtract>:


/* A function that makes any subtraction operation between operands. */
/* Has no arguments or return. */
static void subtract(void){
    364e:	cf 92       	push	r12
    3650:	df 92       	push	r13
    3652:	ef 92       	push	r14
    3654:	ff 92       	push	r15
    3656:	0f 93       	push	r16
    3658:	1f 93       	push	r17
    365a:	df 93       	push	r29
    365c:	cf 93       	push	r28
    365e:	00 d0       	rcall	.+0      	; 0x3660 <subtract+0x12>
    3660:	0f 92       	push	r0
    3662:	cd b7       	in	r28, 0x3d	; 61
    3664:	de b7       	in	r29, 0x3e	; 62
	uint8 max, min;
	for(uint8 i = 1; i < counter; i++){
    3666:	81 e0       	ldi	r24, 0x01	; 1
    3668:	89 83       	std	Y+1, r24	; 0x01
    366a:	65 c1       	rjmp	.+714    	; 0x3936 <subtract+0x2e8>
		if(operands[i] == '-'){
    366c:	89 81       	ldd	r24, Y+1	; 0x01
    366e:	88 2f       	mov	r24, r24
    3670:	90 e0       	ldi	r25, 0x00	; 0
    3672:	88 0f       	add	r24, r24
    3674:	99 1f       	adc	r25, r25
    3676:	88 0f       	add	r24, r24
    3678:	99 1f       	adc	r25, r25
    367a:	fc 01       	movw	r30, r24
    367c:	ea 54       	subi	r30, 0x4A	; 74
    367e:	fe 4f       	sbci	r31, 0xFE	; 254
    3680:	80 81       	ld	r24, Z
    3682:	91 81       	ldd	r25, Z+1	; 0x01
    3684:	a2 81       	ldd	r26, Z+2	; 0x02
    3686:	b3 81       	ldd	r27, Z+3	; 0x03
    3688:	bc 01       	movw	r22, r24
    368a:	cd 01       	movw	r24, r26
    368c:	20 e0       	ldi	r18, 0x00	; 0
    368e:	30 e0       	ldi	r19, 0x00	; 0
    3690:	44 e3       	ldi	r20, 0x34	; 52
    3692:	52 e4       	ldi	r21, 0x42	; 66
    3694:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    3698:	88 23       	and	r24, r24
    369a:	09 f0       	breq	.+2      	; 0x369e <subtract+0x50>
    369c:	49 c1       	rjmp	.+658    	; 0x3930 <subtract+0x2e2>
			min = i - 1;
    369e:	89 81       	ldd	r24, Y+1	; 0x01
    36a0:	81 50       	subi	r24, 0x01	; 1
    36a2:	8a 83       	std	Y+2, r24	; 0x02
    36a4:	03 c0       	rjmp	.+6      	; 0x36ac <subtract+0x5e>
			while(operands[min] == 'n' || operands[min] == 'x' || operands[min] == '/' || operands[min] == '+' || operands[min] == '-')
			{
				min --;
    36a6:	8a 81       	ldd	r24, Y+2	; 0x02
    36a8:	81 50       	subi	r24, 0x01	; 1
    36aa:	8a 83       	std	Y+2, r24	; 0x02
static void subtract(void){
	uint8 max, min;
	for(uint8 i = 1; i < counter; i++){
		if(operands[i] == '-'){
			min = i - 1;
			while(operands[min] == 'n' || operands[min] == 'x' || operands[min] == '/' || operands[min] == '+' || operands[min] == '-')
    36ac:	8a 81       	ldd	r24, Y+2	; 0x02
    36ae:	88 2f       	mov	r24, r24
    36b0:	90 e0       	ldi	r25, 0x00	; 0
    36b2:	88 0f       	add	r24, r24
    36b4:	99 1f       	adc	r25, r25
    36b6:	88 0f       	add	r24, r24
    36b8:	99 1f       	adc	r25, r25
    36ba:	fc 01       	movw	r30, r24
    36bc:	ea 54       	subi	r30, 0x4A	; 74
    36be:	fe 4f       	sbci	r31, 0xFE	; 254
    36c0:	80 81       	ld	r24, Z
    36c2:	91 81       	ldd	r25, Z+1	; 0x01
    36c4:	a2 81       	ldd	r26, Z+2	; 0x02
    36c6:	b3 81       	ldd	r27, Z+3	; 0x03
    36c8:	bc 01       	movw	r22, r24
    36ca:	cd 01       	movw	r24, r26
    36cc:	20 e0       	ldi	r18, 0x00	; 0
    36ce:	30 e0       	ldi	r19, 0x00	; 0
    36d0:	4c ed       	ldi	r20, 0xDC	; 220
    36d2:	52 e4       	ldi	r21, 0x42	; 66
    36d4:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    36d8:	88 23       	and	r24, r24
    36da:	29 f3       	breq	.-54     	; 0x36a6 <subtract+0x58>
    36dc:	8a 81       	ldd	r24, Y+2	; 0x02
    36de:	88 2f       	mov	r24, r24
    36e0:	90 e0       	ldi	r25, 0x00	; 0
    36e2:	88 0f       	add	r24, r24
    36e4:	99 1f       	adc	r25, r25
    36e6:	88 0f       	add	r24, r24
    36e8:	99 1f       	adc	r25, r25
    36ea:	fc 01       	movw	r30, r24
    36ec:	ea 54       	subi	r30, 0x4A	; 74
    36ee:	fe 4f       	sbci	r31, 0xFE	; 254
    36f0:	80 81       	ld	r24, Z
    36f2:	91 81       	ldd	r25, Z+1	; 0x01
    36f4:	a2 81       	ldd	r26, Z+2	; 0x02
    36f6:	b3 81       	ldd	r27, Z+3	; 0x03
    36f8:	bc 01       	movw	r22, r24
    36fa:	cd 01       	movw	r24, r26
    36fc:	20 e0       	ldi	r18, 0x00	; 0
    36fe:	30 e0       	ldi	r19, 0x00	; 0
    3700:	40 ef       	ldi	r20, 0xF0	; 240
    3702:	52 e4       	ldi	r21, 0x42	; 66
    3704:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    3708:	88 23       	and	r24, r24
    370a:	69 f2       	breq	.-102    	; 0x36a6 <subtract+0x58>
    370c:	8a 81       	ldd	r24, Y+2	; 0x02
    370e:	88 2f       	mov	r24, r24
    3710:	90 e0       	ldi	r25, 0x00	; 0
    3712:	88 0f       	add	r24, r24
    3714:	99 1f       	adc	r25, r25
    3716:	88 0f       	add	r24, r24
    3718:	99 1f       	adc	r25, r25
    371a:	fc 01       	movw	r30, r24
    371c:	ea 54       	subi	r30, 0x4A	; 74
    371e:	fe 4f       	sbci	r31, 0xFE	; 254
    3720:	80 81       	ld	r24, Z
    3722:	91 81       	ldd	r25, Z+1	; 0x01
    3724:	a2 81       	ldd	r26, Z+2	; 0x02
    3726:	b3 81       	ldd	r27, Z+3	; 0x03
    3728:	bc 01       	movw	r22, r24
    372a:	cd 01       	movw	r24, r26
    372c:	20 e0       	ldi	r18, 0x00	; 0
    372e:	30 e0       	ldi	r19, 0x00	; 0
    3730:	4c e3       	ldi	r20, 0x3C	; 60
    3732:	52 e4       	ldi	r21, 0x42	; 66
    3734:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    3738:	88 23       	and	r24, r24
    373a:	09 f4       	brne	.+2      	; 0x373e <subtract+0xf0>
    373c:	b4 cf       	rjmp	.-152    	; 0x36a6 <subtract+0x58>
    373e:	8a 81       	ldd	r24, Y+2	; 0x02
    3740:	88 2f       	mov	r24, r24
    3742:	90 e0       	ldi	r25, 0x00	; 0
    3744:	88 0f       	add	r24, r24
    3746:	99 1f       	adc	r25, r25
    3748:	88 0f       	add	r24, r24
    374a:	99 1f       	adc	r25, r25
    374c:	fc 01       	movw	r30, r24
    374e:	ea 54       	subi	r30, 0x4A	; 74
    3750:	fe 4f       	sbci	r31, 0xFE	; 254
    3752:	80 81       	ld	r24, Z
    3754:	91 81       	ldd	r25, Z+1	; 0x01
    3756:	a2 81       	ldd	r26, Z+2	; 0x02
    3758:	b3 81       	ldd	r27, Z+3	; 0x03
    375a:	bc 01       	movw	r22, r24
    375c:	cd 01       	movw	r24, r26
    375e:	20 e0       	ldi	r18, 0x00	; 0
    3760:	30 e0       	ldi	r19, 0x00	; 0
    3762:	4c e2       	ldi	r20, 0x2C	; 44
    3764:	52 e4       	ldi	r21, 0x42	; 66
    3766:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    376a:	88 23       	and	r24, r24
    376c:	09 f4       	brne	.+2      	; 0x3770 <subtract+0x122>
    376e:	9b cf       	rjmp	.-202    	; 0x36a6 <subtract+0x58>
    3770:	8a 81       	ldd	r24, Y+2	; 0x02
    3772:	88 2f       	mov	r24, r24
    3774:	90 e0       	ldi	r25, 0x00	; 0
    3776:	88 0f       	add	r24, r24
    3778:	99 1f       	adc	r25, r25
    377a:	88 0f       	add	r24, r24
    377c:	99 1f       	adc	r25, r25
    377e:	fc 01       	movw	r30, r24
    3780:	ea 54       	subi	r30, 0x4A	; 74
    3782:	fe 4f       	sbci	r31, 0xFE	; 254
    3784:	80 81       	ld	r24, Z
    3786:	91 81       	ldd	r25, Z+1	; 0x01
    3788:	a2 81       	ldd	r26, Z+2	; 0x02
    378a:	b3 81       	ldd	r27, Z+3	; 0x03
    378c:	bc 01       	movw	r22, r24
    378e:	cd 01       	movw	r24, r26
    3790:	20 e0       	ldi	r18, 0x00	; 0
    3792:	30 e0       	ldi	r19, 0x00	; 0
    3794:	44 e3       	ldi	r20, 0x34	; 52
    3796:	52 e4       	ldi	r21, 0x42	; 66
    3798:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    379c:	88 23       	and	r24, r24
    379e:	09 f4       	brne	.+2      	; 0x37a2 <subtract+0x154>
    37a0:	82 cf       	rjmp	.-252    	; 0x36a6 <subtract+0x58>
			{
				min --;
			}
			max = i + 1;
    37a2:	89 81       	ldd	r24, Y+1	; 0x01
    37a4:	8f 5f       	subi	r24, 0xFF	; 255
    37a6:	8b 83       	std	Y+3, r24	; 0x03
    37a8:	03 c0       	rjmp	.+6      	; 0x37b0 <subtract+0x162>
			while(operands[max] == 'n' || operands[max] == 'x' || operands[min] == '/' || operands[min] == '+' || operands[min] == '-')
			{
				max ++;
    37aa:	8b 81       	ldd	r24, Y+3	; 0x03
    37ac:	8f 5f       	subi	r24, 0xFF	; 255
    37ae:	8b 83       	std	Y+3, r24	; 0x03
			while(operands[min] == 'n' || operands[min] == 'x' || operands[min] == '/' || operands[min] == '+' || operands[min] == '-')
			{
				min --;
			}
			max = i + 1;
			while(operands[max] == 'n' || operands[max] == 'x' || operands[min] == '/' || operands[min] == '+' || operands[min] == '-')
    37b0:	8b 81       	ldd	r24, Y+3	; 0x03
    37b2:	88 2f       	mov	r24, r24
    37b4:	90 e0       	ldi	r25, 0x00	; 0
    37b6:	88 0f       	add	r24, r24
    37b8:	99 1f       	adc	r25, r25
    37ba:	88 0f       	add	r24, r24
    37bc:	99 1f       	adc	r25, r25
    37be:	fc 01       	movw	r30, r24
    37c0:	ea 54       	subi	r30, 0x4A	; 74
    37c2:	fe 4f       	sbci	r31, 0xFE	; 254
    37c4:	80 81       	ld	r24, Z
    37c6:	91 81       	ldd	r25, Z+1	; 0x01
    37c8:	a2 81       	ldd	r26, Z+2	; 0x02
    37ca:	b3 81       	ldd	r27, Z+3	; 0x03
    37cc:	bc 01       	movw	r22, r24
    37ce:	cd 01       	movw	r24, r26
    37d0:	20 e0       	ldi	r18, 0x00	; 0
    37d2:	30 e0       	ldi	r19, 0x00	; 0
    37d4:	4c ed       	ldi	r20, 0xDC	; 220
    37d6:	52 e4       	ldi	r21, 0x42	; 66
    37d8:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    37dc:	88 23       	and	r24, r24
    37de:	29 f3       	breq	.-54     	; 0x37aa <subtract+0x15c>
    37e0:	8b 81       	ldd	r24, Y+3	; 0x03
    37e2:	88 2f       	mov	r24, r24
    37e4:	90 e0       	ldi	r25, 0x00	; 0
    37e6:	88 0f       	add	r24, r24
    37e8:	99 1f       	adc	r25, r25
    37ea:	88 0f       	add	r24, r24
    37ec:	99 1f       	adc	r25, r25
    37ee:	fc 01       	movw	r30, r24
    37f0:	ea 54       	subi	r30, 0x4A	; 74
    37f2:	fe 4f       	sbci	r31, 0xFE	; 254
    37f4:	80 81       	ld	r24, Z
    37f6:	91 81       	ldd	r25, Z+1	; 0x01
    37f8:	a2 81       	ldd	r26, Z+2	; 0x02
    37fa:	b3 81       	ldd	r27, Z+3	; 0x03
    37fc:	bc 01       	movw	r22, r24
    37fe:	cd 01       	movw	r24, r26
    3800:	20 e0       	ldi	r18, 0x00	; 0
    3802:	30 e0       	ldi	r19, 0x00	; 0
    3804:	40 ef       	ldi	r20, 0xF0	; 240
    3806:	52 e4       	ldi	r21, 0x42	; 66
    3808:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    380c:	88 23       	and	r24, r24
    380e:	69 f2       	breq	.-102    	; 0x37aa <subtract+0x15c>
    3810:	8a 81       	ldd	r24, Y+2	; 0x02
    3812:	88 2f       	mov	r24, r24
    3814:	90 e0       	ldi	r25, 0x00	; 0
    3816:	88 0f       	add	r24, r24
    3818:	99 1f       	adc	r25, r25
    381a:	88 0f       	add	r24, r24
    381c:	99 1f       	adc	r25, r25
    381e:	fc 01       	movw	r30, r24
    3820:	ea 54       	subi	r30, 0x4A	; 74
    3822:	fe 4f       	sbci	r31, 0xFE	; 254
    3824:	80 81       	ld	r24, Z
    3826:	91 81       	ldd	r25, Z+1	; 0x01
    3828:	a2 81       	ldd	r26, Z+2	; 0x02
    382a:	b3 81       	ldd	r27, Z+3	; 0x03
    382c:	bc 01       	movw	r22, r24
    382e:	cd 01       	movw	r24, r26
    3830:	20 e0       	ldi	r18, 0x00	; 0
    3832:	30 e0       	ldi	r19, 0x00	; 0
    3834:	4c e3       	ldi	r20, 0x3C	; 60
    3836:	52 e4       	ldi	r21, 0x42	; 66
    3838:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    383c:	88 23       	and	r24, r24
    383e:	09 f4       	brne	.+2      	; 0x3842 <subtract+0x1f4>
    3840:	b4 cf       	rjmp	.-152    	; 0x37aa <subtract+0x15c>
    3842:	8a 81       	ldd	r24, Y+2	; 0x02
    3844:	88 2f       	mov	r24, r24
    3846:	90 e0       	ldi	r25, 0x00	; 0
    3848:	88 0f       	add	r24, r24
    384a:	99 1f       	adc	r25, r25
    384c:	88 0f       	add	r24, r24
    384e:	99 1f       	adc	r25, r25
    3850:	fc 01       	movw	r30, r24
    3852:	ea 54       	subi	r30, 0x4A	; 74
    3854:	fe 4f       	sbci	r31, 0xFE	; 254
    3856:	80 81       	ld	r24, Z
    3858:	91 81       	ldd	r25, Z+1	; 0x01
    385a:	a2 81       	ldd	r26, Z+2	; 0x02
    385c:	b3 81       	ldd	r27, Z+3	; 0x03
    385e:	bc 01       	movw	r22, r24
    3860:	cd 01       	movw	r24, r26
    3862:	20 e0       	ldi	r18, 0x00	; 0
    3864:	30 e0       	ldi	r19, 0x00	; 0
    3866:	4c e2       	ldi	r20, 0x2C	; 44
    3868:	52 e4       	ldi	r21, 0x42	; 66
    386a:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    386e:	88 23       	and	r24, r24
    3870:	09 f4       	brne	.+2      	; 0x3874 <subtract+0x226>
    3872:	9b cf       	rjmp	.-202    	; 0x37aa <subtract+0x15c>
    3874:	8a 81       	ldd	r24, Y+2	; 0x02
    3876:	88 2f       	mov	r24, r24
    3878:	90 e0       	ldi	r25, 0x00	; 0
    387a:	88 0f       	add	r24, r24
    387c:	99 1f       	adc	r25, r25
    387e:	88 0f       	add	r24, r24
    3880:	99 1f       	adc	r25, r25
    3882:	fc 01       	movw	r30, r24
    3884:	ea 54       	subi	r30, 0x4A	; 74
    3886:	fe 4f       	sbci	r31, 0xFE	; 254
    3888:	80 81       	ld	r24, Z
    388a:	91 81       	ldd	r25, Z+1	; 0x01
    388c:	a2 81       	ldd	r26, Z+2	; 0x02
    388e:	b3 81       	ldd	r27, Z+3	; 0x03
    3890:	bc 01       	movw	r22, r24
    3892:	cd 01       	movw	r24, r26
    3894:	20 e0       	ldi	r18, 0x00	; 0
    3896:	30 e0       	ldi	r19, 0x00	; 0
    3898:	44 e3       	ldi	r20, 0x34	; 52
    389a:	52 e4       	ldi	r21, 0x42	; 66
    389c:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    38a0:	88 23       	and	r24, r24
    38a2:	09 f4       	brne	.+2      	; 0x38a6 <subtract+0x258>
    38a4:	82 cf       	rjmp	.-252    	; 0x37aa <subtract+0x15c>
			{
				max ++;
			}

			operands[min] = operands[min] - operands[max];
    38a6:	8a 81       	ldd	r24, Y+2	; 0x02
    38a8:	c8 2e       	mov	r12, r24
    38aa:	dd 24       	eor	r13, r13
    38ac:	8a 81       	ldd	r24, Y+2	; 0x02
    38ae:	88 2f       	mov	r24, r24
    38b0:	90 e0       	ldi	r25, 0x00	; 0
    38b2:	88 0f       	add	r24, r24
    38b4:	99 1f       	adc	r25, r25
    38b6:	88 0f       	add	r24, r24
    38b8:	99 1f       	adc	r25, r25
    38ba:	fc 01       	movw	r30, r24
    38bc:	ea 54       	subi	r30, 0x4A	; 74
    38be:	fe 4f       	sbci	r31, 0xFE	; 254
    38c0:	e0 80       	ld	r14, Z
    38c2:	f1 80       	ldd	r15, Z+1	; 0x01
    38c4:	02 81       	ldd	r16, Z+2	; 0x02
    38c6:	13 81       	ldd	r17, Z+3	; 0x03
    38c8:	8b 81       	ldd	r24, Y+3	; 0x03
    38ca:	88 2f       	mov	r24, r24
    38cc:	90 e0       	ldi	r25, 0x00	; 0
    38ce:	88 0f       	add	r24, r24
    38d0:	99 1f       	adc	r25, r25
    38d2:	88 0f       	add	r24, r24
    38d4:	99 1f       	adc	r25, r25
    38d6:	fc 01       	movw	r30, r24
    38d8:	ea 54       	subi	r30, 0x4A	; 74
    38da:	fe 4f       	sbci	r31, 0xFE	; 254
    38dc:	20 81       	ld	r18, Z
    38de:	31 81       	ldd	r19, Z+1	; 0x01
    38e0:	42 81       	ldd	r20, Z+2	; 0x02
    38e2:	53 81       	ldd	r21, Z+3	; 0x03
    38e4:	c8 01       	movw	r24, r16
    38e6:	b7 01       	movw	r22, r14
    38e8:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    38ec:	dc 01       	movw	r26, r24
    38ee:	cb 01       	movw	r24, r22
    38f0:	9c 01       	movw	r18, r24
    38f2:	ad 01       	movw	r20, r26
    38f4:	c6 01       	movw	r24, r12
    38f6:	88 0f       	add	r24, r24
    38f8:	99 1f       	adc	r25, r25
    38fa:	88 0f       	add	r24, r24
    38fc:	99 1f       	adc	r25, r25
    38fe:	fc 01       	movw	r30, r24
    3900:	ea 54       	subi	r30, 0x4A	; 74
    3902:	fe 4f       	sbci	r31, 0xFE	; 254
    3904:	20 83       	st	Z, r18
    3906:	31 83       	std	Z+1, r19	; 0x01
    3908:	42 83       	std	Z+2, r20	; 0x02
    390a:	53 83       	std	Z+3, r21	; 0x03
			operands[max] = 'n';
    390c:	8b 81       	ldd	r24, Y+3	; 0x03
    390e:	88 2f       	mov	r24, r24
    3910:	90 e0       	ldi	r25, 0x00	; 0
    3912:	88 0f       	add	r24, r24
    3914:	99 1f       	adc	r25, r25
    3916:	88 0f       	add	r24, r24
    3918:	99 1f       	adc	r25, r25
    391a:	fc 01       	movw	r30, r24
    391c:	ea 54       	subi	r30, 0x4A	; 74
    391e:	fe 4f       	sbci	r31, 0xFE	; 254
    3920:	80 e0       	ldi	r24, 0x00	; 0
    3922:	90 e0       	ldi	r25, 0x00	; 0
    3924:	ac ed       	ldi	r26, 0xDC	; 220
    3926:	b2 e4       	ldi	r27, 0x42	; 66
    3928:	80 83       	st	Z, r24
    392a:	91 83       	std	Z+1, r25	; 0x01
    392c:	a2 83       	std	Z+2, r26	; 0x02
    392e:	b3 83       	std	Z+3, r27	; 0x03

/* A function that makes any subtraction operation between operands. */
/* Has no arguments or return. */
static void subtract(void){
	uint8 max, min;
	for(uint8 i = 1; i < counter; i++){
    3930:	89 81       	ldd	r24, Y+1	; 0x01
    3932:	8f 5f       	subi	r24, 0xFF	; 255
    3934:	89 83       	std	Y+1, r24	; 0x01
    3936:	90 91 f2 01 	lds	r25, 0x01F2
    393a:	89 81       	ldd	r24, Y+1	; 0x01
    393c:	89 17       	cp	r24, r25
    393e:	08 f4       	brcc	.+2      	; 0x3942 <subtract+0x2f4>
    3940:	95 ce       	rjmp	.-726    	; 0x366c <subtract+0x1e>

			operands[min] = operands[min] - operands[max];
			operands[max] = 'n';
		}
	}
}
    3942:	0f 90       	pop	r0
    3944:	0f 90       	pop	r0
    3946:	0f 90       	pop	r0
    3948:	cf 91       	pop	r28
    394a:	df 91       	pop	r29
    394c:	1f 91       	pop	r17
    394e:	0f 91       	pop	r16
    3950:	ff 90       	pop	r15
    3952:	ef 90       	pop	r14
    3954:	df 90       	pop	r13
    3956:	cf 90       	pop	r12
    3958:	08 95       	ret

0000395a <intTOchar>:


/* A function that converts numeric value into characters by passing the array of digits and its lenghth. */
/* Has no return. */
static void intTOchar(uint8 * ints, uint8 leng){
    395a:	df 93       	push	r29
    395c:	cf 93       	push	r28
    395e:	00 d0       	rcall	.+0      	; 0x3960 <intTOchar+0x6>
    3960:	00 d0       	rcall	.+0      	; 0x3962 <intTOchar+0x8>
    3962:	00 d0       	rcall	.+0      	; 0x3964 <intTOchar+0xa>
    3964:	cd b7       	in	r28, 0x3d	; 61
    3966:	de b7       	in	r29, 0x3e	; 62
    3968:	9b 83       	std	Y+3, r25	; 0x03
    396a:	8a 83       	std	Y+2, r24	; 0x02
    396c:	6c 83       	std	Y+4, r22	; 0x04
	for(uint8 i = 0; i < leng; i++){
    396e:	19 82       	std	Y+1, r1	; 0x01
    3970:	ed c0       	rjmp	.+474    	; 0x3b4c <intTOchar+0x1f2>
		switch(ints[i]){
    3972:	89 81       	ldd	r24, Y+1	; 0x01
    3974:	28 2f       	mov	r18, r24
    3976:	30 e0       	ldi	r19, 0x00	; 0
    3978:	8a 81       	ldd	r24, Y+2	; 0x02
    397a:	9b 81       	ldd	r25, Y+3	; 0x03
    397c:	fc 01       	movw	r30, r24
    397e:	e2 0f       	add	r30, r18
    3980:	f3 1f       	adc	r31, r19
    3982:	80 81       	ld	r24, Z
    3984:	28 2f       	mov	r18, r24
    3986:	30 e0       	ldi	r19, 0x00	; 0
    3988:	3e 83       	std	Y+6, r19	; 0x06
    398a:	2d 83       	std	Y+5, r18	; 0x05
    398c:	8d 81       	ldd	r24, Y+5	; 0x05
    398e:	9e 81       	ldd	r25, Y+6	; 0x06
    3990:	85 30       	cpi	r24, 0x05	; 5
    3992:	91 05       	cpc	r25, r1
    3994:	09 f4       	brne	.+2      	; 0x3998 <intTOchar+0x3e>
    3996:	8b c0       	rjmp	.+278    	; 0x3aae <intTOchar+0x154>
    3998:	2d 81       	ldd	r18, Y+5	; 0x05
    399a:	3e 81       	ldd	r19, Y+6	; 0x06
    399c:	26 30       	cpi	r18, 0x06	; 6
    399e:	31 05       	cpc	r19, r1
    39a0:	24 f5       	brge	.+72     	; 0x39ea <intTOchar+0x90>
    39a2:	8d 81       	ldd	r24, Y+5	; 0x05
    39a4:	9e 81       	ldd	r25, Y+6	; 0x06
    39a6:	82 30       	cpi	r24, 0x02	; 2
    39a8:	91 05       	cpc	r25, r1
    39aa:	09 f4       	brne	.+2      	; 0x39ae <intTOchar+0x54>
    39ac:	5f c0       	rjmp	.+190    	; 0x3a6c <intTOchar+0x112>
    39ae:	2d 81       	ldd	r18, Y+5	; 0x05
    39b0:	3e 81       	ldd	r19, Y+6	; 0x06
    39b2:	23 30       	cpi	r18, 0x03	; 3
    39b4:	31 05       	cpc	r19, r1
    39b6:	64 f4       	brge	.+24     	; 0x39d0 <intTOchar+0x76>
    39b8:	8d 81       	ldd	r24, Y+5	; 0x05
    39ba:	9e 81       	ldd	r25, Y+6	; 0x06
    39bc:	00 97       	sbiw	r24, 0x00	; 0
    39be:	09 f4       	brne	.+2      	; 0x39c2 <intTOchar+0x68>
    39c0:	3f c0       	rjmp	.+126    	; 0x3a40 <intTOchar+0xe6>
    39c2:	2d 81       	ldd	r18, Y+5	; 0x05
    39c4:	3e 81       	ldd	r19, Y+6	; 0x06
    39c6:	21 30       	cpi	r18, 0x01	; 1
    39c8:	31 05       	cpc	r19, r1
    39ca:	09 f4       	brne	.+2      	; 0x39ce <intTOchar+0x74>
    39cc:	44 c0       	rjmp	.+136    	; 0x3a56 <intTOchar+0xfc>
    39ce:	bb c0       	rjmp	.+374    	; 0x3b46 <intTOchar+0x1ec>
    39d0:	8d 81       	ldd	r24, Y+5	; 0x05
    39d2:	9e 81       	ldd	r25, Y+6	; 0x06
    39d4:	83 30       	cpi	r24, 0x03	; 3
    39d6:	91 05       	cpc	r25, r1
    39d8:	09 f4       	brne	.+2      	; 0x39dc <intTOchar+0x82>
    39da:	53 c0       	rjmp	.+166    	; 0x3a82 <intTOchar+0x128>
    39dc:	2d 81       	ldd	r18, Y+5	; 0x05
    39de:	3e 81       	ldd	r19, Y+6	; 0x06
    39e0:	24 30       	cpi	r18, 0x04	; 4
    39e2:	31 05       	cpc	r19, r1
    39e4:	09 f4       	brne	.+2      	; 0x39e8 <intTOchar+0x8e>
    39e6:	58 c0       	rjmp	.+176    	; 0x3a98 <intTOchar+0x13e>
    39e8:	ae c0       	rjmp	.+348    	; 0x3b46 <intTOchar+0x1ec>
    39ea:	8d 81       	ldd	r24, Y+5	; 0x05
    39ec:	9e 81       	ldd	r25, Y+6	; 0x06
    39ee:	88 30       	cpi	r24, 0x08	; 8
    39f0:	91 05       	cpc	r25, r1
    39f2:	09 f4       	brne	.+2      	; 0x39f6 <intTOchar+0x9c>
    39f4:	7d c0       	rjmp	.+250    	; 0x3af0 <intTOchar+0x196>
    39f6:	2d 81       	ldd	r18, Y+5	; 0x05
    39f8:	3e 81       	ldd	r19, Y+6	; 0x06
    39fa:	29 30       	cpi	r18, 0x09	; 9
    39fc:	31 05       	cpc	r19, r1
    39fe:	6c f4       	brge	.+26     	; 0x3a1a <intTOchar+0xc0>
    3a00:	8d 81       	ldd	r24, Y+5	; 0x05
    3a02:	9e 81       	ldd	r25, Y+6	; 0x06
    3a04:	86 30       	cpi	r24, 0x06	; 6
    3a06:	91 05       	cpc	r25, r1
    3a08:	09 f4       	brne	.+2      	; 0x3a0c <intTOchar+0xb2>
    3a0a:	5c c0       	rjmp	.+184    	; 0x3ac4 <intTOchar+0x16a>
    3a0c:	2d 81       	ldd	r18, Y+5	; 0x05
    3a0e:	3e 81       	ldd	r19, Y+6	; 0x06
    3a10:	27 30       	cpi	r18, 0x07	; 7
    3a12:	31 05       	cpc	r19, r1
    3a14:	09 f4       	brne	.+2      	; 0x3a18 <intTOchar+0xbe>
    3a16:	61 c0       	rjmp	.+194    	; 0x3ada <intTOchar+0x180>
    3a18:	96 c0       	rjmp	.+300    	; 0x3b46 <intTOchar+0x1ec>
    3a1a:	8d 81       	ldd	r24, Y+5	; 0x05
    3a1c:	9e 81       	ldd	r25, Y+6	; 0x06
    3a1e:	8d 32       	cpi	r24, 0x2D	; 45
    3a20:	91 05       	cpc	r25, r1
    3a22:	09 f4       	brne	.+2      	; 0x3a26 <intTOchar+0xcc>
    3a24:	7b c0       	rjmp	.+246    	; 0x3b1c <intTOchar+0x1c2>
    3a26:	2d 81       	ldd	r18, Y+5	; 0x05
    3a28:	3e 81       	ldd	r19, Y+6	; 0x06
    3a2a:	2e 32       	cpi	r18, 0x2E	; 46
    3a2c:	31 05       	cpc	r19, r1
    3a2e:	09 f4       	brne	.+2      	; 0x3a32 <intTOchar+0xd8>
    3a30:	80 c0       	rjmp	.+256    	; 0x3b32 <intTOchar+0x1d8>
    3a32:	8d 81       	ldd	r24, Y+5	; 0x05
    3a34:	9e 81       	ldd	r25, Y+6	; 0x06
    3a36:	89 30       	cpi	r24, 0x09	; 9
    3a38:	91 05       	cpc	r25, r1
    3a3a:	09 f4       	brne	.+2      	; 0x3a3e <intTOchar+0xe4>
    3a3c:	64 c0       	rjmp	.+200    	; 0x3b06 <intTOchar+0x1ac>
    3a3e:	83 c0       	rjmp	.+262    	; 0x3b46 <intTOchar+0x1ec>
		case 0:
			ints[i] = '0';
    3a40:	89 81       	ldd	r24, Y+1	; 0x01
    3a42:	28 2f       	mov	r18, r24
    3a44:	30 e0       	ldi	r19, 0x00	; 0
    3a46:	8a 81       	ldd	r24, Y+2	; 0x02
    3a48:	9b 81       	ldd	r25, Y+3	; 0x03
    3a4a:	fc 01       	movw	r30, r24
    3a4c:	e2 0f       	add	r30, r18
    3a4e:	f3 1f       	adc	r31, r19
    3a50:	80 e3       	ldi	r24, 0x30	; 48
    3a52:	80 83       	st	Z, r24
    3a54:	78 c0       	rjmp	.+240    	; 0x3b46 <intTOchar+0x1ec>
			break;
		case 1:
			ints[i] = '1';
    3a56:	89 81       	ldd	r24, Y+1	; 0x01
    3a58:	28 2f       	mov	r18, r24
    3a5a:	30 e0       	ldi	r19, 0x00	; 0
    3a5c:	8a 81       	ldd	r24, Y+2	; 0x02
    3a5e:	9b 81       	ldd	r25, Y+3	; 0x03
    3a60:	fc 01       	movw	r30, r24
    3a62:	e2 0f       	add	r30, r18
    3a64:	f3 1f       	adc	r31, r19
    3a66:	81 e3       	ldi	r24, 0x31	; 49
    3a68:	80 83       	st	Z, r24
    3a6a:	6d c0       	rjmp	.+218    	; 0x3b46 <intTOchar+0x1ec>
			break;
		case 2:
			ints[i] = '2';
    3a6c:	89 81       	ldd	r24, Y+1	; 0x01
    3a6e:	28 2f       	mov	r18, r24
    3a70:	30 e0       	ldi	r19, 0x00	; 0
    3a72:	8a 81       	ldd	r24, Y+2	; 0x02
    3a74:	9b 81       	ldd	r25, Y+3	; 0x03
    3a76:	fc 01       	movw	r30, r24
    3a78:	e2 0f       	add	r30, r18
    3a7a:	f3 1f       	adc	r31, r19
    3a7c:	82 e3       	ldi	r24, 0x32	; 50
    3a7e:	80 83       	st	Z, r24
    3a80:	62 c0       	rjmp	.+196    	; 0x3b46 <intTOchar+0x1ec>
			break;
		case 3:
			ints[i] = '3';
    3a82:	89 81       	ldd	r24, Y+1	; 0x01
    3a84:	28 2f       	mov	r18, r24
    3a86:	30 e0       	ldi	r19, 0x00	; 0
    3a88:	8a 81       	ldd	r24, Y+2	; 0x02
    3a8a:	9b 81       	ldd	r25, Y+3	; 0x03
    3a8c:	fc 01       	movw	r30, r24
    3a8e:	e2 0f       	add	r30, r18
    3a90:	f3 1f       	adc	r31, r19
    3a92:	83 e3       	ldi	r24, 0x33	; 51
    3a94:	80 83       	st	Z, r24
    3a96:	57 c0       	rjmp	.+174    	; 0x3b46 <intTOchar+0x1ec>
			break;
		case 4:
			ints[i] = '4';
    3a98:	89 81       	ldd	r24, Y+1	; 0x01
    3a9a:	28 2f       	mov	r18, r24
    3a9c:	30 e0       	ldi	r19, 0x00	; 0
    3a9e:	8a 81       	ldd	r24, Y+2	; 0x02
    3aa0:	9b 81       	ldd	r25, Y+3	; 0x03
    3aa2:	fc 01       	movw	r30, r24
    3aa4:	e2 0f       	add	r30, r18
    3aa6:	f3 1f       	adc	r31, r19
    3aa8:	84 e3       	ldi	r24, 0x34	; 52
    3aaa:	80 83       	st	Z, r24
    3aac:	4c c0       	rjmp	.+152    	; 0x3b46 <intTOchar+0x1ec>
			break;
		case 5:
			ints[i] = '5';
    3aae:	89 81       	ldd	r24, Y+1	; 0x01
    3ab0:	28 2f       	mov	r18, r24
    3ab2:	30 e0       	ldi	r19, 0x00	; 0
    3ab4:	8a 81       	ldd	r24, Y+2	; 0x02
    3ab6:	9b 81       	ldd	r25, Y+3	; 0x03
    3ab8:	fc 01       	movw	r30, r24
    3aba:	e2 0f       	add	r30, r18
    3abc:	f3 1f       	adc	r31, r19
    3abe:	85 e3       	ldi	r24, 0x35	; 53
    3ac0:	80 83       	st	Z, r24
    3ac2:	41 c0       	rjmp	.+130    	; 0x3b46 <intTOchar+0x1ec>
			break;
		case 6:
			ints[i] = '6';
    3ac4:	89 81       	ldd	r24, Y+1	; 0x01
    3ac6:	28 2f       	mov	r18, r24
    3ac8:	30 e0       	ldi	r19, 0x00	; 0
    3aca:	8a 81       	ldd	r24, Y+2	; 0x02
    3acc:	9b 81       	ldd	r25, Y+3	; 0x03
    3ace:	fc 01       	movw	r30, r24
    3ad0:	e2 0f       	add	r30, r18
    3ad2:	f3 1f       	adc	r31, r19
    3ad4:	86 e3       	ldi	r24, 0x36	; 54
    3ad6:	80 83       	st	Z, r24
    3ad8:	36 c0       	rjmp	.+108    	; 0x3b46 <intTOchar+0x1ec>
			break;
		case 7:
			ints[i] = '7';
    3ada:	89 81       	ldd	r24, Y+1	; 0x01
    3adc:	28 2f       	mov	r18, r24
    3ade:	30 e0       	ldi	r19, 0x00	; 0
    3ae0:	8a 81       	ldd	r24, Y+2	; 0x02
    3ae2:	9b 81       	ldd	r25, Y+3	; 0x03
    3ae4:	fc 01       	movw	r30, r24
    3ae6:	e2 0f       	add	r30, r18
    3ae8:	f3 1f       	adc	r31, r19
    3aea:	87 e3       	ldi	r24, 0x37	; 55
    3aec:	80 83       	st	Z, r24
    3aee:	2b c0       	rjmp	.+86     	; 0x3b46 <intTOchar+0x1ec>
			break;
		case 8:
			ints[i] = '8';
    3af0:	89 81       	ldd	r24, Y+1	; 0x01
    3af2:	28 2f       	mov	r18, r24
    3af4:	30 e0       	ldi	r19, 0x00	; 0
    3af6:	8a 81       	ldd	r24, Y+2	; 0x02
    3af8:	9b 81       	ldd	r25, Y+3	; 0x03
    3afa:	fc 01       	movw	r30, r24
    3afc:	e2 0f       	add	r30, r18
    3afe:	f3 1f       	adc	r31, r19
    3b00:	88 e3       	ldi	r24, 0x38	; 56
    3b02:	80 83       	st	Z, r24
    3b04:	20 c0       	rjmp	.+64     	; 0x3b46 <intTOchar+0x1ec>
			break;
		case 9:
			ints[i] = '9';
    3b06:	89 81       	ldd	r24, Y+1	; 0x01
    3b08:	28 2f       	mov	r18, r24
    3b0a:	30 e0       	ldi	r19, 0x00	; 0
    3b0c:	8a 81       	ldd	r24, Y+2	; 0x02
    3b0e:	9b 81       	ldd	r25, Y+3	; 0x03
    3b10:	fc 01       	movw	r30, r24
    3b12:	e2 0f       	add	r30, r18
    3b14:	f3 1f       	adc	r31, r19
    3b16:	89 e3       	ldi	r24, 0x39	; 57
    3b18:	80 83       	st	Z, r24
    3b1a:	15 c0       	rjmp	.+42     	; 0x3b46 <intTOchar+0x1ec>
			break;
		case '-':
			ints[i] = '-';
    3b1c:	89 81       	ldd	r24, Y+1	; 0x01
    3b1e:	28 2f       	mov	r18, r24
    3b20:	30 e0       	ldi	r19, 0x00	; 0
    3b22:	8a 81       	ldd	r24, Y+2	; 0x02
    3b24:	9b 81       	ldd	r25, Y+3	; 0x03
    3b26:	fc 01       	movw	r30, r24
    3b28:	e2 0f       	add	r30, r18
    3b2a:	f3 1f       	adc	r31, r19
    3b2c:	8d e2       	ldi	r24, 0x2D	; 45
    3b2e:	80 83       	st	Z, r24
    3b30:	0a c0       	rjmp	.+20     	; 0x3b46 <intTOchar+0x1ec>
			break;
		case '.':
			ints[i] = '.';
    3b32:	89 81       	ldd	r24, Y+1	; 0x01
    3b34:	28 2f       	mov	r18, r24
    3b36:	30 e0       	ldi	r19, 0x00	; 0
    3b38:	8a 81       	ldd	r24, Y+2	; 0x02
    3b3a:	9b 81       	ldd	r25, Y+3	; 0x03
    3b3c:	fc 01       	movw	r30, r24
    3b3e:	e2 0f       	add	r30, r18
    3b40:	f3 1f       	adc	r31, r19
    3b42:	8e e2       	ldi	r24, 0x2E	; 46
    3b44:	80 83       	st	Z, r24


/* A function that converts numeric value into characters by passing the array of digits and its lenghth. */
/* Has no return. */
static void intTOchar(uint8 * ints, uint8 leng){
	for(uint8 i = 0; i < leng; i++){
    3b46:	89 81       	ldd	r24, Y+1	; 0x01
    3b48:	8f 5f       	subi	r24, 0xFF	; 255
    3b4a:	89 83       	std	Y+1, r24	; 0x01
    3b4c:	99 81       	ldd	r25, Y+1	; 0x01
    3b4e:	8c 81       	ldd	r24, Y+4	; 0x04
    3b50:	98 17       	cp	r25, r24
    3b52:	08 f4       	brcc	.+2      	; 0x3b56 <intTOchar+0x1fc>
    3b54:	0e cf       	rjmp	.-484    	; 0x3972 <intTOchar+0x18>
		default:
			/* Nothing to do. */
			break;
		}
	}
}
    3b56:	26 96       	adiw	r28, 0x06	; 6
    3b58:	0f b6       	in	r0, 0x3f	; 63
    3b5a:	f8 94       	cli
    3b5c:	de bf       	out	0x3e, r29	; 62
    3b5e:	0f be       	out	0x3f, r0	; 63
    3b60:	cd bf       	out	0x3d, r28	; 61
    3b62:	cf 91       	pop	r28
    3b64:	df 91       	pop	r29
    3b66:	08 95       	ret

00003b68 <separate_digits>:


/* A function that separates each digit in numeric value inside elemente of array by passing the array and the numeric value. */
/* Returns the length of array. */
static uint8 separate_digits(uint8 * ints, float32 ans){
    3b68:	0f 93       	push	r16
    3b6a:	1f 93       	push	r17
    3b6c:	df 93       	push	r29
    3b6e:	cf 93       	push	r28
    3b70:	cd b7       	in	r28, 0x3d	; 61
    3b72:	de b7       	in	r29, 0x3e	; 62
    3b74:	60 97       	sbiw	r28, 0x10	; 16
    3b76:	0f b6       	in	r0, 0x3f	; 63
    3b78:	f8 94       	cli
    3b7a:	de bf       	out	0x3e, r29	; 62
    3b7c:	0f be       	out	0x3f, r0	; 63
    3b7e:	cd bf       	out	0x3d, r28	; 61
    3b80:	9c 87       	std	Y+12, r25	; 0x0c
    3b82:	8b 87       	std	Y+11, r24	; 0x0b
    3b84:	4d 87       	std	Y+13, r20	; 0x0d
    3b86:	5e 87       	std	Y+14, r21	; 0x0e
    3b88:	6f 87       	std	Y+15, r22	; 0x0f
    3b8a:	78 8b       	std	Y+16, r23	; 0x10
	uint8 leng = 0;
    3b8c:	1a 86       	std	Y+10, r1	; 0x0a
	uint8 flag = 0;
    3b8e:	19 86       	std	Y+9, r1	; 0x09
	if(ans < 0){
    3b90:	6d 85       	ldd	r22, Y+13	; 0x0d
    3b92:	7e 85       	ldd	r23, Y+14	; 0x0e
    3b94:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b96:	98 89       	ldd	r25, Y+16	; 0x10
    3b98:	20 e0       	ldi	r18, 0x00	; 0
    3b9a:	30 e0       	ldi	r19, 0x00	; 0
    3b9c:	40 e0       	ldi	r20, 0x00	; 0
    3b9e:	50 e0       	ldi	r21, 0x00	; 0
    3ba0:	0e 94 85 04 	call	0x90a	; 0x90a <__ltsf2>
    3ba4:	88 23       	and	r24, r24
    3ba6:	5c f4       	brge	.+22     	; 0x3bbe <separate_digits+0x56>
		ans *= (-1);
    3ba8:	8d 85       	ldd	r24, Y+13	; 0x0d
    3baa:	9e 85       	ldd	r25, Y+14	; 0x0e
    3bac:	af 85       	ldd	r26, Y+15	; 0x0f
    3bae:	b8 89       	ldd	r27, Y+16	; 0x10
    3bb0:	b0 58       	subi	r27, 0x80	; 128
    3bb2:	8d 87       	std	Y+13, r24	; 0x0d
    3bb4:	9e 87       	std	Y+14, r25	; 0x0e
    3bb6:	af 87       	std	Y+15, r26	; 0x0f
    3bb8:	b8 8b       	std	Y+16, r27	; 0x10
		flag = 1;
    3bba:	81 e0       	ldi	r24, 0x01	; 1
    3bbc:	89 87       	std	Y+9, r24	; 0x09
	}
	sint32 beforePoint = (sint32)ans;
    3bbe:	6d 85       	ldd	r22, Y+13	; 0x0d
    3bc0:	7e 85       	ldd	r23, Y+14	; 0x0e
    3bc2:	8f 85       	ldd	r24, Y+15	; 0x0f
    3bc4:	98 89       	ldd	r25, Y+16	; 0x10
    3bc6:	0e 94 13 05 	call	0xa26	; 0xa26 <__fixsfsi>
    3bca:	dc 01       	movw	r26, r24
    3bcc:	cb 01       	movw	r24, r22
    3bce:	8d 83       	std	Y+5, r24	; 0x05
    3bd0:	9e 83       	std	Y+6, r25	; 0x06
    3bd2:	af 83       	std	Y+7, r26	; 0x07
    3bd4:	b8 87       	std	Y+8, r27	; 0x08
	float32 afterPoint = ans - (float32)beforePoint;
    3bd6:	6d 81       	ldd	r22, Y+5	; 0x05
    3bd8:	7e 81       	ldd	r23, Y+6	; 0x06
    3bda:	8f 81       	ldd	r24, Y+7	; 0x07
    3bdc:	98 85       	ldd	r25, Y+8	; 0x08
    3bde:	0e 94 b5 04 	call	0x96a	; 0x96a <__floatsisf>
    3be2:	9b 01       	movw	r18, r22
    3be4:	ac 01       	movw	r20, r24
    3be6:	6d 85       	ldd	r22, Y+13	; 0x0d
    3be8:	7e 85       	ldd	r23, Y+14	; 0x0e
    3bea:	8f 85       	ldd	r24, Y+15	; 0x0f
    3bec:	98 89       	ldd	r25, Y+16	; 0x10
    3bee:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    3bf2:	dc 01       	movw	r26, r24
    3bf4:	cb 01       	movw	r24, r22
    3bf6:	89 83       	std	Y+1, r24	; 0x01
    3bf8:	9a 83       	std	Y+2, r25	; 0x02
    3bfa:	ab 83       	std	Y+3, r26	; 0x03
    3bfc:	bc 83       	std	Y+4, r27	; 0x04

	if(afterPoint != 0){
    3bfe:	69 81       	ldd	r22, Y+1	; 0x01
    3c00:	7a 81       	ldd	r23, Y+2	; 0x02
    3c02:	8b 81       	ldd	r24, Y+3	; 0x03
    3c04:	9c 81       	ldd	r25, Y+4	; 0x04
    3c06:	20 e0       	ldi	r18, 0x00	; 0
    3c08:	30 e0       	ldi	r19, 0x00	; 0
    3c0a:	40 e0       	ldi	r20, 0x00	; 0
    3c0c:	50 e0       	ldi	r21, 0x00	; 0
    3c0e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__nesf2>
    3c12:	88 23       	and	r24, r24
    3c14:	09 f4       	brne	.+2      	; 0x3c18 <separate_digits+0xb0>
    3c16:	65 c0       	rjmp	.+202    	; 0x3ce2 <separate_digits+0x17a>
		afterPoint = afterPoint * (10000000);
    3c18:	69 81       	ldd	r22, Y+1	; 0x01
    3c1a:	7a 81       	ldd	r23, Y+2	; 0x02
    3c1c:	8b 81       	ldd	r24, Y+3	; 0x03
    3c1e:	9c 81       	ldd	r25, Y+4	; 0x04
    3c20:	20 e8       	ldi	r18, 0x80	; 128
    3c22:	36 e9       	ldi	r19, 0x96	; 150
    3c24:	48 e1       	ldi	r20, 0x18	; 24
    3c26:	5b e4       	ldi	r21, 0x4B	; 75
    3c28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c2c:	dc 01       	movw	r26, r24
    3c2e:	cb 01       	movw	r24, r22
    3c30:	89 83       	std	Y+1, r24	; 0x01
    3c32:	9a 83       	std	Y+2, r25	; 0x02
    3c34:	ab 83       	std	Y+3, r26	; 0x03
    3c36:	bc 83       	std	Y+4, r27	; 0x04

		do{
			ints[leng] = ((sint32)afterPoint %10);
    3c38:	8a 85       	ldd	r24, Y+10	; 0x0a
    3c3a:	28 2f       	mov	r18, r24
    3c3c:	30 e0       	ldi	r19, 0x00	; 0
    3c3e:	8b 85       	ldd	r24, Y+11	; 0x0b
    3c40:	9c 85       	ldd	r25, Y+12	; 0x0c
    3c42:	8c 01       	movw	r16, r24
    3c44:	02 0f       	add	r16, r18
    3c46:	13 1f       	adc	r17, r19
    3c48:	69 81       	ldd	r22, Y+1	; 0x01
    3c4a:	7a 81       	ldd	r23, Y+2	; 0x02
    3c4c:	8b 81       	ldd	r24, Y+3	; 0x03
    3c4e:	9c 81       	ldd	r25, Y+4	; 0x04
    3c50:	0e 94 13 05 	call	0xa26	; 0xa26 <__fixsfsi>
    3c54:	dc 01       	movw	r26, r24
    3c56:	cb 01       	movw	r24, r22
    3c58:	2a e0       	ldi	r18, 0x0A	; 10
    3c5a:	30 e0       	ldi	r19, 0x00	; 0
    3c5c:	40 e0       	ldi	r20, 0x00	; 0
    3c5e:	50 e0       	ldi	r21, 0x00	; 0
    3c60:	bc 01       	movw	r22, r24
    3c62:	cd 01       	movw	r24, r26
    3c64:	0e 94 75 20 	call	0x40ea	; 0x40ea <__divmodsi4>
    3c68:	dc 01       	movw	r26, r24
    3c6a:	cb 01       	movw	r24, r22
    3c6c:	f8 01       	movw	r30, r16
    3c6e:	80 83       	st	Z, r24
			afterPoint = (uint32)afterPoint / 10;
    3c70:	69 81       	ldd	r22, Y+1	; 0x01
    3c72:	7a 81       	ldd	r23, Y+2	; 0x02
    3c74:	8b 81       	ldd	r24, Y+3	; 0x03
    3c76:	9c 81       	ldd	r25, Y+4	; 0x04
    3c78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c7c:	dc 01       	movw	r26, r24
    3c7e:	cb 01       	movw	r24, r22
    3c80:	2a e0       	ldi	r18, 0x0A	; 10
    3c82:	30 e0       	ldi	r19, 0x00	; 0
    3c84:	40 e0       	ldi	r20, 0x00	; 0
    3c86:	50 e0       	ldi	r21, 0x00	; 0
    3c88:	bc 01       	movw	r22, r24
    3c8a:	cd 01       	movw	r24, r26
    3c8c:	0e 94 53 20 	call	0x40a6	; 0x40a6 <__udivmodsi4>
    3c90:	da 01       	movw	r26, r20
    3c92:	c9 01       	movw	r24, r18
    3c94:	bc 01       	movw	r22, r24
    3c96:	cd 01       	movw	r24, r26
    3c98:	0e 94 67 05 	call	0xace	; 0xace <__floatunsisf>
    3c9c:	dc 01       	movw	r26, r24
    3c9e:	cb 01       	movw	r24, r22
    3ca0:	89 83       	std	Y+1, r24	; 0x01
    3ca2:	9a 83       	std	Y+2, r25	; 0x02
    3ca4:	ab 83       	std	Y+3, r26	; 0x03
    3ca6:	bc 83       	std	Y+4, r27	; 0x04
			leng++;
    3ca8:	8a 85       	ldd	r24, Y+10	; 0x0a
    3caa:	8f 5f       	subi	r24, 0xFF	; 255
    3cac:	8a 87       	std	Y+10, r24	; 0x0a

		}while(afterPoint>0);
    3cae:	69 81       	ldd	r22, Y+1	; 0x01
    3cb0:	7a 81       	ldd	r23, Y+2	; 0x02
    3cb2:	8b 81       	ldd	r24, Y+3	; 0x03
    3cb4:	9c 81       	ldd	r25, Y+4	; 0x04
    3cb6:	20 e0       	ldi	r18, 0x00	; 0
    3cb8:	30 e0       	ldi	r19, 0x00	; 0
    3cba:	40 e0       	ldi	r20, 0x00	; 0
    3cbc:	50 e0       	ldi	r21, 0x00	; 0
    3cbe:	0e 94 25 04 	call	0x84a	; 0x84a <__gtsf2>
    3cc2:	18 16       	cp	r1, r24
    3cc4:	0c f4       	brge	.+2      	; 0x3cc8 <separate_digits+0x160>
    3cc6:	b8 cf       	rjmp	.-144    	; 0x3c38 <separate_digits+0xd0>
		ints[leng] = '.';
    3cc8:	8a 85       	ldd	r24, Y+10	; 0x0a
    3cca:	28 2f       	mov	r18, r24
    3ccc:	30 e0       	ldi	r19, 0x00	; 0
    3cce:	8b 85       	ldd	r24, Y+11	; 0x0b
    3cd0:	9c 85       	ldd	r25, Y+12	; 0x0c
    3cd2:	fc 01       	movw	r30, r24
    3cd4:	e2 0f       	add	r30, r18
    3cd6:	f3 1f       	adc	r31, r19
    3cd8:	8e e2       	ldi	r24, 0x2E	; 46
    3cda:	80 83       	st	Z, r24
		leng ++;
    3cdc:	8a 85       	ldd	r24, Y+10	; 0x0a
    3cde:	8f 5f       	subi	r24, 0xFF	; 255
    3ce0:	8a 87       	std	Y+10, r24	; 0x0a
	}

	do{
		ints[leng] = (beforePoint%10);
    3ce2:	8a 85       	ldd	r24, Y+10	; 0x0a
    3ce4:	28 2f       	mov	r18, r24
    3ce6:	30 e0       	ldi	r19, 0x00	; 0
    3ce8:	8b 85       	ldd	r24, Y+11	; 0x0b
    3cea:	9c 85       	ldd	r25, Y+12	; 0x0c
    3cec:	8c 01       	movw	r16, r24
    3cee:	02 0f       	add	r16, r18
    3cf0:	13 1f       	adc	r17, r19
    3cf2:	8d 81       	ldd	r24, Y+5	; 0x05
    3cf4:	9e 81       	ldd	r25, Y+6	; 0x06
    3cf6:	af 81       	ldd	r26, Y+7	; 0x07
    3cf8:	b8 85       	ldd	r27, Y+8	; 0x08
    3cfa:	2a e0       	ldi	r18, 0x0A	; 10
    3cfc:	30 e0       	ldi	r19, 0x00	; 0
    3cfe:	40 e0       	ldi	r20, 0x00	; 0
    3d00:	50 e0       	ldi	r21, 0x00	; 0
    3d02:	bc 01       	movw	r22, r24
    3d04:	cd 01       	movw	r24, r26
    3d06:	0e 94 75 20 	call	0x40ea	; 0x40ea <__divmodsi4>
    3d0a:	dc 01       	movw	r26, r24
    3d0c:	cb 01       	movw	r24, r22
    3d0e:	f8 01       	movw	r30, r16
    3d10:	80 83       	st	Z, r24
		beforePoint /= 10;
    3d12:	8d 81       	ldd	r24, Y+5	; 0x05
    3d14:	9e 81       	ldd	r25, Y+6	; 0x06
    3d16:	af 81       	ldd	r26, Y+7	; 0x07
    3d18:	b8 85       	ldd	r27, Y+8	; 0x08
    3d1a:	2a e0       	ldi	r18, 0x0A	; 10
    3d1c:	30 e0       	ldi	r19, 0x00	; 0
    3d1e:	40 e0       	ldi	r20, 0x00	; 0
    3d20:	50 e0       	ldi	r21, 0x00	; 0
    3d22:	bc 01       	movw	r22, r24
    3d24:	cd 01       	movw	r24, r26
    3d26:	0e 94 75 20 	call	0x40ea	; 0x40ea <__divmodsi4>
    3d2a:	da 01       	movw	r26, r20
    3d2c:	c9 01       	movw	r24, r18
    3d2e:	8d 83       	std	Y+5, r24	; 0x05
    3d30:	9e 83       	std	Y+6, r25	; 0x06
    3d32:	af 83       	std	Y+7, r26	; 0x07
    3d34:	b8 87       	std	Y+8, r27	; 0x08
		leng++;
    3d36:	8a 85       	ldd	r24, Y+10	; 0x0a
    3d38:	8f 5f       	subi	r24, 0xFF	; 255
    3d3a:	8a 87       	std	Y+10, r24	; 0x0a

	}while(beforePoint>0);
    3d3c:	8d 81       	ldd	r24, Y+5	; 0x05
    3d3e:	9e 81       	ldd	r25, Y+6	; 0x06
    3d40:	af 81       	ldd	r26, Y+7	; 0x07
    3d42:	b8 85       	ldd	r27, Y+8	; 0x08
    3d44:	18 16       	cp	r1, r24
    3d46:	19 06       	cpc	r1, r25
    3d48:	1a 06       	cpc	r1, r26
    3d4a:	1b 06       	cpc	r1, r27
    3d4c:	54 f2       	brlt	.-108    	; 0x3ce2 <separate_digits+0x17a>

	if(flag){
    3d4e:	89 85       	ldd	r24, Y+9	; 0x09
    3d50:	88 23       	and	r24, r24
    3d52:	69 f0       	breq	.+26     	; 0x3d6e <separate_digits+0x206>
		ints[leng] = '-';
    3d54:	8a 85       	ldd	r24, Y+10	; 0x0a
    3d56:	28 2f       	mov	r18, r24
    3d58:	30 e0       	ldi	r19, 0x00	; 0
    3d5a:	8b 85       	ldd	r24, Y+11	; 0x0b
    3d5c:	9c 85       	ldd	r25, Y+12	; 0x0c
    3d5e:	fc 01       	movw	r30, r24
    3d60:	e2 0f       	add	r30, r18
    3d62:	f3 1f       	adc	r31, r19
    3d64:	8d e2       	ldi	r24, 0x2D	; 45
    3d66:	80 83       	st	Z, r24
		leng ++;
    3d68:	8a 85       	ldd	r24, Y+10	; 0x0a
    3d6a:	8f 5f       	subi	r24, 0xFF	; 255
    3d6c:	8a 87       	std	Y+10, r24	; 0x0a
	}
	return leng;
    3d6e:	8a 85       	ldd	r24, Y+10	; 0x0a

}
    3d70:	60 96       	adiw	r28, 0x10	; 16
    3d72:	0f b6       	in	r0, 0x3f	; 63
    3d74:	f8 94       	cli
    3d76:	de bf       	out	0x3e, r29	; 62
    3d78:	0f be       	out	0x3f, r0	; 63
    3d7a:	cd bf       	out	0x3d, r28	; 61
    3d7c:	cf 91       	pop	r28
    3d7e:	df 91       	pop	r29
    3d80:	1f 91       	pop	r17
    3d82:	0f 91       	pop	r16
    3d84:	08 95       	ret

00003d86 <reverse>:


/* A function that reverse the order of an array by passing the array and its lenght. */
/* Has no return */
static void reverse(uint8 * ints, uint8 len){
    3d86:	df 93       	push	r29
    3d88:	cf 93       	push	r28
    3d8a:	00 d0       	rcall	.+0      	; 0x3d8c <reverse+0x6>
    3d8c:	00 d0       	rcall	.+0      	; 0x3d8e <reverse+0x8>
    3d8e:	0f 92       	push	r0
    3d90:	cd b7       	in	r28, 0x3d	; 61
    3d92:	de b7       	in	r29, 0x3e	; 62
    3d94:	9c 83       	std	Y+4, r25	; 0x04
    3d96:	8b 83       	std	Y+3, r24	; 0x03
    3d98:	6d 83       	std	Y+5, r22	; 0x05
	for(uint8 i = 0; i < len/2;i++){
    3d9a:	1a 82       	std	Y+2, r1	; 0x02
    3d9c:	3d c0       	rjmp	.+122    	; 0x3e18 <reverse+0x92>
		uint8 temp = ints[len-i-1];
    3d9e:	8d 81       	ldd	r24, Y+5	; 0x05
    3da0:	28 2f       	mov	r18, r24
    3da2:	30 e0       	ldi	r19, 0x00	; 0
    3da4:	8a 81       	ldd	r24, Y+2	; 0x02
    3da6:	88 2f       	mov	r24, r24
    3da8:	90 e0       	ldi	r25, 0x00	; 0
    3daa:	a9 01       	movw	r20, r18
    3dac:	48 1b       	sub	r20, r24
    3dae:	59 0b       	sbc	r21, r25
    3db0:	ca 01       	movw	r24, r20
    3db2:	9c 01       	movw	r18, r24
    3db4:	21 50       	subi	r18, 0x01	; 1
    3db6:	30 40       	sbci	r19, 0x00	; 0
    3db8:	8b 81       	ldd	r24, Y+3	; 0x03
    3dba:	9c 81       	ldd	r25, Y+4	; 0x04
    3dbc:	fc 01       	movw	r30, r24
    3dbe:	e2 0f       	add	r30, r18
    3dc0:	f3 1f       	adc	r31, r19
    3dc2:	80 81       	ld	r24, Z
    3dc4:	89 83       	std	Y+1, r24	; 0x01
		ints[len-i-1] = ints[i];
    3dc6:	8d 81       	ldd	r24, Y+5	; 0x05
    3dc8:	28 2f       	mov	r18, r24
    3dca:	30 e0       	ldi	r19, 0x00	; 0
    3dcc:	8a 81       	ldd	r24, Y+2	; 0x02
    3dce:	88 2f       	mov	r24, r24
    3dd0:	90 e0       	ldi	r25, 0x00	; 0
    3dd2:	a9 01       	movw	r20, r18
    3dd4:	48 1b       	sub	r20, r24
    3dd6:	59 0b       	sbc	r21, r25
    3dd8:	ca 01       	movw	r24, r20
    3dda:	9c 01       	movw	r18, r24
    3ddc:	21 50       	subi	r18, 0x01	; 1
    3dde:	30 40       	sbci	r19, 0x00	; 0
    3de0:	8b 81       	ldd	r24, Y+3	; 0x03
    3de2:	9c 81       	ldd	r25, Y+4	; 0x04
    3de4:	dc 01       	movw	r26, r24
    3de6:	a2 0f       	add	r26, r18
    3de8:	b3 1f       	adc	r27, r19
    3dea:	8a 81       	ldd	r24, Y+2	; 0x02
    3dec:	28 2f       	mov	r18, r24
    3dee:	30 e0       	ldi	r19, 0x00	; 0
    3df0:	8b 81       	ldd	r24, Y+3	; 0x03
    3df2:	9c 81       	ldd	r25, Y+4	; 0x04
    3df4:	fc 01       	movw	r30, r24
    3df6:	e2 0f       	add	r30, r18
    3df8:	f3 1f       	adc	r31, r19
    3dfa:	80 81       	ld	r24, Z
    3dfc:	8c 93       	st	X, r24
		ints[i] = temp;
    3dfe:	8a 81       	ldd	r24, Y+2	; 0x02
    3e00:	28 2f       	mov	r18, r24
    3e02:	30 e0       	ldi	r19, 0x00	; 0
    3e04:	8b 81       	ldd	r24, Y+3	; 0x03
    3e06:	9c 81       	ldd	r25, Y+4	; 0x04
    3e08:	fc 01       	movw	r30, r24
    3e0a:	e2 0f       	add	r30, r18
    3e0c:	f3 1f       	adc	r31, r19
    3e0e:	89 81       	ldd	r24, Y+1	; 0x01
    3e10:	80 83       	st	Z, r24


/* A function that reverse the order of an array by passing the array and its lenght. */
/* Has no return */
static void reverse(uint8 * ints, uint8 len){
	for(uint8 i = 0; i < len/2;i++){
    3e12:	8a 81       	ldd	r24, Y+2	; 0x02
    3e14:	8f 5f       	subi	r24, 0xFF	; 255
    3e16:	8a 83       	std	Y+2, r24	; 0x02
    3e18:	8d 81       	ldd	r24, Y+5	; 0x05
    3e1a:	98 2f       	mov	r25, r24
    3e1c:	96 95       	lsr	r25
    3e1e:	8a 81       	ldd	r24, Y+2	; 0x02
    3e20:	89 17       	cp	r24, r25
    3e22:	08 f4       	brcc	.+2      	; 0x3e26 <reverse+0xa0>
    3e24:	bc cf       	rjmp	.-136    	; 0x3d9e <reverse+0x18>
		uint8 temp = ints[len-i-1];
		ints[len-i-1] = ints[i];
		ints[i] = temp;
	}
}
    3e26:	0f 90       	pop	r0
    3e28:	0f 90       	pop	r0
    3e2a:	0f 90       	pop	r0
    3e2c:	0f 90       	pop	r0
    3e2e:	0f 90       	pop	r0
    3e30:	cf 91       	pop	r28
    3e32:	df 91       	pop	r29
    3e34:	08 95       	ret

00003e36 <main>:
#include "calc.h"



int main(void)
{
    3e36:	df 93       	push	r29
    3e38:	cf 93       	push	r28
    3e3a:	cd b7       	in	r28, 0x3d	; 61
    3e3c:	de b7       	in	r29, 0x3e	; 62
    3e3e:	e3 97       	sbiw	r28, 0x33	; 51
    3e40:	0f b6       	in	r0, 0x3f	; 63
    3e42:	f8 94       	cli
    3e44:	de bf       	out	0x3e, r29	; 62
    3e46:	0f be       	out	0x3f, r0	; 63
    3e48:	cd bf       	out	0x3d, r28	; 61

	/* Initializing Keypad. */
	DIO_SetPortDirection(PA,0b00001111);
    3e4a:	80 e0       	ldi	r24, 0x00	; 0
    3e4c:	6f e0       	ldi	r22, 0x0F	; 15
    3e4e:	0e 94 a4 09 	call	0x1348	; 0x1348 <DIO_SetPortDirection>
	DIO_WriteOnPort(PA,0b11110000);
    3e52:	80 e0       	ldi	r24, 0x00	; 0
    3e54:	60 ef       	ldi	r22, 0xF0	; 240
    3e56:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <DIO_WriteOnPort>

	/* Configuering Port direction for LCD. */
	DIO_SetPortDirection(PC, 0b11111111);
    3e5a:	82 e0       	ldi	r24, 0x02	; 2
    3e5c:	6f ef       	ldi	r22, 0xFF	; 255
    3e5e:	0e 94 a4 09 	call	0x1348	; 0x1348 <DIO_SetPortDirection>
	DIO_SetPortDirection(PD, 0b11111111);
    3e62:	83 e0       	ldi	r24, 0x03	; 3
    3e64:	6f ef       	ldi	r22, 0xFF	; 255
    3e66:	0e 94 a4 09 	call	0x1348	; 0x1348 <DIO_SetPortDirection>

	LCD_vidInit(); /* LCD initialization function */
    3e6a:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <LCD_vidInit>


	uint8 ops[10] = {0}; /* Buffer to save result. */
    3e6e:	8a e0       	ldi	r24, 0x0A	; 10
    3e70:	fe 01       	movw	r30, r28
    3e72:	71 96       	adiw	r30, 0x11	; 17
    3e74:	df 01       	movw	r26, r30
    3e76:	98 2f       	mov	r25, r24
    3e78:	1d 92       	st	X+, r1
    3e7a:	9a 95       	dec	r25
    3e7c:	e9 f7       	brne	.-6      	; 0x3e78 <main+0x42>
	uint8 size = 0; /* saves the length of result inside the buffer. */
    3e7e:	18 8a       	std	Y+16, r1	; 0x10
	uint8 flag = 1; /* Flag to know when to reset the calculator. */
    3e80:	81 e0       	ldi	r24, 0x01	; 1
    3e82:	8f 87       	std	Y+15, r24	; 0x0f
	uint8 syntx[] = "Syntax";
    3e84:	de 01       	movw	r26, r28
    3e86:	5b 96       	adiw	r26, 0x1b	; 27
    3e88:	bb a7       	std	Y+43, r27	; 0x2b
    3e8a:	aa a7       	std	Y+42, r26	; 0x2a
    3e8c:	e0 e6       	ldi	r30, 0x60	; 96
    3e8e:	f0 e0       	ldi	r31, 0x00	; 0
    3e90:	fd a7       	std	Y+45, r31	; 0x2d
    3e92:	ec a7       	std	Y+44, r30	; 0x2c
    3e94:	f7 e0       	ldi	r31, 0x07	; 7
    3e96:	fe a7       	std	Y+46, r31	; 0x2e
    3e98:	ac a5       	ldd	r26, Y+44	; 0x2c
    3e9a:	bd a5       	ldd	r27, Y+45	; 0x2d
    3e9c:	0c 90       	ld	r0, X
    3e9e:	ec a5       	ldd	r30, Y+44	; 0x2c
    3ea0:	fd a5       	ldd	r31, Y+45	; 0x2d
    3ea2:	31 96       	adiw	r30, 0x01	; 1
    3ea4:	fd a7       	std	Y+45, r31	; 0x2d
    3ea6:	ec a7       	std	Y+44, r30	; 0x2c
    3ea8:	aa a5       	ldd	r26, Y+42	; 0x2a
    3eaa:	bb a5       	ldd	r27, Y+43	; 0x2b
    3eac:	0c 92       	st	X, r0
    3eae:	ea a5       	ldd	r30, Y+42	; 0x2a
    3eb0:	fb a5       	ldd	r31, Y+43	; 0x2b
    3eb2:	31 96       	adiw	r30, 0x01	; 1
    3eb4:	fb a7       	std	Y+43, r31	; 0x2b
    3eb6:	ea a7       	std	Y+42, r30	; 0x2a
    3eb8:	fe a5       	ldd	r31, Y+46	; 0x2e
    3eba:	f1 50       	subi	r31, 0x01	; 1
    3ebc:	fe a7       	std	Y+46, r31	; 0x2e
    3ebe:	8e a5       	ldd	r24, Y+46	; 0x2e
    3ec0:	88 23       	and	r24, r24
    3ec2:	51 f7       	brne	.-44     	; 0x3e98 <main+0x62>
	uint8 syntx1[] = "Error";
    3ec4:	de 01       	movw	r26, r28
    3ec6:	92 96       	adiw	r26, 0x22	; 34
    3ec8:	b8 ab       	std	Y+48, r27	; 0x30
    3eca:	af a7       	std	Y+47, r26	; 0x2f
    3ecc:	e7 e6       	ldi	r30, 0x67	; 103
    3ece:	f0 e0       	ldi	r31, 0x00	; 0
    3ed0:	fa ab       	std	Y+50, r31	; 0x32
    3ed2:	e9 ab       	std	Y+49, r30	; 0x31
    3ed4:	f6 e0       	ldi	r31, 0x06	; 6
    3ed6:	fb ab       	std	Y+51, r31	; 0x33
    3ed8:	a9 a9       	ldd	r26, Y+49	; 0x31
    3eda:	ba a9       	ldd	r27, Y+50	; 0x32
    3edc:	0c 90       	ld	r0, X
    3ede:	e9 a9       	ldd	r30, Y+49	; 0x31
    3ee0:	fa a9       	ldd	r31, Y+50	; 0x32
    3ee2:	31 96       	adiw	r30, 0x01	; 1
    3ee4:	fa ab       	std	Y+50, r31	; 0x32
    3ee6:	e9 ab       	std	Y+49, r30	; 0x31
    3ee8:	af a5       	ldd	r26, Y+47	; 0x2f
    3eea:	b8 a9       	ldd	r27, Y+48	; 0x30
    3eec:	0c 92       	st	X, r0
    3eee:	ef a5       	ldd	r30, Y+47	; 0x2f
    3ef0:	f8 a9       	ldd	r31, Y+48	; 0x30
    3ef2:	31 96       	adiw	r30, 0x01	; 1
    3ef4:	f8 ab       	std	Y+48, r31	; 0x30
    3ef6:	ef a7       	std	Y+47, r30	; 0x2f
    3ef8:	fb a9       	ldd	r31, Y+51	; 0x33
    3efa:	f1 50       	subi	r31, 0x01	; 1
    3efc:	fb ab       	std	Y+51, r31	; 0x33
    3efe:	8b a9       	ldd	r24, Y+51	; 0x33
    3f00:	88 23       	and	r24, r24
    3f02:	51 f7       	brne	.-44     	; 0x3ed8 <main+0xa2>

	while(1)
	{
		uint8 key[2] = {0}; /* Saves the pressed key value */
    3f04:	19 a6       	std	Y+41, r1	; 0x29
    3f06:	18 a6       	std	Y+40, r1	; 0x28
		KEYPAD_GetChar(key); /* Getting value of pressed key */
    3f08:	ce 01       	movw	r24, r28
    3f0a:	88 96       	adiw	r24, 0x28	; 40
    3f0c:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <KEYPAD_GetChar>


		if(key[0] != 0){ /* Check if there is any key was pressed */
    3f10:	88 a5       	ldd	r24, Y+40	; 0x28
    3f12:	88 23       	and	r24, r24
    3f14:	09 f4       	brne	.+2      	; 0x3f18 <main+0xe2>
    3f16:	54 c0       	rjmp	.+168    	; 0x3fc0 <main+0x18a>

			if(!flag) /* Check if we need to reset calculater by erase LCD */
    3f18:	8f 85       	ldd	r24, Y+15	; 0x0f
    3f1a:	88 23       	and	r24, r24
    3f1c:	29 f4       	brne	.+10     	; 0x3f28 <main+0xf2>
			{
				LCD_vidSendCommand(0x01);
    3f1e:	81 e0       	ldi	r24, 0x01	; 1
    3f20:	0e 94 8a 11 	call	0x2314	; 0x2314 <LCD_vidSendCommand>
				flag = 1;
    3f24:	81 e0       	ldi	r24, 0x01	; 1
    3f26:	8f 87       	std	Y+15, r24	; 0x0f
			} if(key[1] <= 9){ /* check if the key pressed was a numbre */
    3f28:	89 a5       	ldd	r24, Y+41	; 0x29
    3f2a:	8a 30       	cpi	r24, 0x0A	; 10
    3f2c:	38 f4       	brcc	.+14     	; 0x3f3c <main+0x106>
				Create_op(key[1]); /* Calling a function which creates a new operand and passing the value of key to it. */
    3f2e:	89 a5       	ldd	r24, Y+41	; 0x29
    3f30:	0e 94 49 15 	call	0x2a92	; 0x2a92 <Create_op>
				LCD_vidWriteChar(key[0]); /* calling a function which displays the key value on LCD by passing the key value in character format. */
    3f34:	88 a5       	ldd	r24, Y+40	; 0x28
    3f36:	0e 94 9f 12 	call	0x253e	; 0x253e <LCD_vidWriteChar>
    3f3a:	42 c0       	rjmp	.+132    	; 0x3fc0 <main+0x18a>
			}else if(key[1] == '0'){  /* check if the key pressed was an operator. */
    3f3c:	89 a5       	ldd	r24, Y+41	; 0x29
    3f3e:	80 33       	cpi	r24, 0x30	; 48
    3f40:	71 f4       	brne	.+28     	; 0x3f5e <main+0x128>
				Operation(key[0]);  /* calling function which create an operator by passing the value of the key containing the operation. */
    3f42:	88 a5       	ldd	r24, Y+40	; 0x28
    3f44:	0e 94 99 15 	call	0x2b32	; 0x2b32 <Operation>
				if(key[0] == 'a'){ /* Check if the key pressed is for resetting calculator */
    3f48:	88 a5       	ldd	r24, Y+40	; 0x28
    3f4a:	81 36       	cpi	r24, 0x61	; 97
    3f4c:	21 f4       	brne	.+8      	; 0x3f56 <main+0x120>
					LCD_vidSendCommand(0x01); /* Calling a function which clears LCD. */
    3f4e:	81 e0       	ldi	r24, 0x01	; 1
    3f50:	0e 94 8a 11 	call	0x2314	; 0x2314 <LCD_vidSendCommand>
    3f54:	35 c0       	rjmp	.+106    	; 0x3fc0 <main+0x18a>
				}else{
					LCD_vidWriteChar(key[0]); /* Calling a function which diplays the operator pressed by passing its value to it. */
    3f56:	88 a5       	ldd	r24, Y+40	; 0x28
    3f58:	0e 94 9f 12 	call	0x253e	; 0x253e <LCD_vidWriteChar>
    3f5c:	31 c0       	rjmp	.+98     	; 0x3fc0 <main+0x18a>
				}
			}else if(key[1] == 'e'){ /* Check if the = key was pressed. */
    3f5e:	89 a5       	ldd	r24, Y+41	; 0x29
    3f60:	85 36       	cpi	r24, 0x65	; 101
    3f62:	71 f5       	brne	.+92     	; 0x3fc0 <main+0x18a>
				if(error){  /* Check if there is any syntax error. */
    3f64:	80 91 f5 01 	lds	r24, 0x01F5
    3f68:	88 23       	and	r24, r24
    3f6a:	b1 f0       	breq	.+44     	; 0x3f98 <main+0x162>
					/* Printing "Syntax Error" on LCD. */
					LCD_vidSendCommand(0x01);
    3f6c:	81 e0       	ldi	r24, 0x01	; 1
    3f6e:	0e 94 8a 11 	call	0x2314	; 0x2314 <LCD_vidSendCommand>
					LCD_vidWriteString(syntx, 6);
    3f72:	ce 01       	movw	r24, r28
    3f74:	4b 96       	adiw	r24, 0x1b	; 27
    3f76:	66 e0       	ldi	r22, 0x06	; 6
    3f78:	0e 94 b4 13 	call	0x2768	; 0x2768 <LCD_vidWriteString>
					LCD_vidSendCommand(0xc4);
    3f7c:	84 ec       	ldi	r24, 0xC4	; 196
    3f7e:	0e 94 8a 11 	call	0x2314	; 0x2314 <LCD_vidSendCommand>
					LCD_vidWriteString(syntx1, 5);
    3f82:	ce 01       	movw	r24, r28
    3f84:	82 96       	adiw	r24, 0x22	; 34
    3f86:	65 e0       	ldi	r22, 0x05	; 5
    3f88:	0e 94 b4 13 	call	0x2768	; 0x2768 <LCD_vidWriteString>
					flag = 0; /* Setting a flag to reset calculater in the next itiration. */
    3f8c:	1f 86       	std	Y+15, r1	; 0x0f
					error = 0; /* Clearing syntax error flag. */
    3f8e:	10 92 f5 01 	sts	0x01F5, r1
					restart(); /* Calling a function that restart the calculator. */
    3f92:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <restart>
    3f96:	14 c0       	rjmp	.+40     	; 0x3fc0 <main+0x18a>
				}else{
					size = Equal(key[0], ops);/* Calling a function which calculates the equation by passing the value of '=' key, and an array as a buffer to save the value and returning the size of it. */
    3f98:	88 a5       	ldd	r24, Y+40	; 0x28
    3f9a:	9e 01       	movw	r18, r28
    3f9c:	2f 5e       	subi	r18, 0xEF	; 239
    3f9e:	3f 4f       	sbci	r19, 0xFF	; 255
    3fa0:	b9 01       	movw	r22, r18
    3fa2:	0e 94 23 16 	call	0x2c46	; 0x2c46 <Equal>
    3fa6:	88 8b       	std	Y+16, r24	; 0x10
					/* Printing the equation final value on LCD in case of there is no syntax error. */
					LCD_vidSendCommand(0xc0);
    3fa8:	80 ec       	ldi	r24, 0xC0	; 192
    3faa:	0e 94 8a 11 	call	0x2314	; 0x2314 <LCD_vidSendCommand>
					LCD_vidWriteChar(key[0]);
    3fae:	88 a5       	ldd	r24, Y+40	; 0x28
    3fb0:	0e 94 9f 12 	call	0x253e	; 0x253e <LCD_vidWriteChar>
					LCD_vidWriteString(ops, size);
    3fb4:	ce 01       	movw	r24, r28
    3fb6:	41 96       	adiw	r24, 0x11	; 17
    3fb8:	68 89       	ldd	r22, Y+16	; 0x10
    3fba:	0e 94 b4 13 	call	0x2768	; 0x2768 <LCD_vidWriteString>
					flag = 0; /* Setting a flag to reset calculater in the next itiration. */
    3fbe:	1f 86       	std	Y+15, r1	; 0x0f
    3fc0:	80 e0       	ldi	r24, 0x00	; 0
    3fc2:	90 e0       	ldi	r25, 0x00	; 0
    3fc4:	a8 e4       	ldi	r26, 0x48	; 72
    3fc6:	b3 e4       	ldi	r27, 0x43	; 67
    3fc8:	8b 87       	std	Y+11, r24	; 0x0b
    3fca:	9c 87       	std	Y+12, r25	; 0x0c
    3fcc:	ad 87       	std	Y+13, r26	; 0x0d
    3fce:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3fd0:	6b 85       	ldd	r22, Y+11	; 0x0b
    3fd2:	7c 85       	ldd	r23, Y+12	; 0x0c
    3fd4:	8d 85       	ldd	r24, Y+13	; 0x0d
    3fd6:	9e 85       	ldd	r25, Y+14	; 0x0e
    3fd8:	20 e0       	ldi	r18, 0x00	; 0
    3fda:	30 e0       	ldi	r19, 0x00	; 0
    3fdc:	4a ef       	ldi	r20, 0xFA	; 250
    3fde:	54 e4       	ldi	r21, 0x44	; 68
    3fe0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fe4:	dc 01       	movw	r26, r24
    3fe6:	cb 01       	movw	r24, r22
    3fe8:	8f 83       	std	Y+7, r24	; 0x07
    3fea:	98 87       	std	Y+8, r25	; 0x08
    3fec:	a9 87       	std	Y+9, r26	; 0x09
    3fee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3ff0:	6f 81       	ldd	r22, Y+7	; 0x07
    3ff2:	78 85       	ldd	r23, Y+8	; 0x08
    3ff4:	89 85       	ldd	r24, Y+9	; 0x09
    3ff6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ff8:	20 e0       	ldi	r18, 0x00	; 0
    3ffa:	30 e0       	ldi	r19, 0x00	; 0
    3ffc:	40 e8       	ldi	r20, 0x80	; 128
    3ffe:	5f e3       	ldi	r21, 0x3F	; 63
    4000:	0e 94 85 04 	call	0x90a	; 0x90a <__ltsf2>
    4004:	88 23       	and	r24, r24
    4006:	2c f4       	brge	.+10     	; 0x4012 <main+0x1dc>
		__ticks = 1;
    4008:	81 e0       	ldi	r24, 0x01	; 1
    400a:	90 e0       	ldi	r25, 0x00	; 0
    400c:	9e 83       	std	Y+6, r25	; 0x06
    400e:	8d 83       	std	Y+5, r24	; 0x05
    4010:	3f c0       	rjmp	.+126    	; 0x4090 <main+0x25a>
	else if (__tmp > 65535)
    4012:	6f 81       	ldd	r22, Y+7	; 0x07
    4014:	78 85       	ldd	r23, Y+8	; 0x08
    4016:	89 85       	ldd	r24, Y+9	; 0x09
    4018:	9a 85       	ldd	r25, Y+10	; 0x0a
    401a:	20 e0       	ldi	r18, 0x00	; 0
    401c:	3f ef       	ldi	r19, 0xFF	; 255
    401e:	4f e7       	ldi	r20, 0x7F	; 127
    4020:	57 e4       	ldi	r21, 0x47	; 71
    4022:	0e 94 25 04 	call	0x84a	; 0x84a <__gtsf2>
    4026:	18 16       	cp	r1, r24
    4028:	4c f5       	brge	.+82     	; 0x407c <main+0x246>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    402a:	6b 85       	ldd	r22, Y+11	; 0x0b
    402c:	7c 85       	ldd	r23, Y+12	; 0x0c
    402e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4030:	9e 85       	ldd	r25, Y+14	; 0x0e
    4032:	20 e0       	ldi	r18, 0x00	; 0
    4034:	30 e0       	ldi	r19, 0x00	; 0
    4036:	40 e2       	ldi	r20, 0x20	; 32
    4038:	51 e4       	ldi	r21, 0x41	; 65
    403a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    403e:	dc 01       	movw	r26, r24
    4040:	cb 01       	movw	r24, r22
    4042:	bc 01       	movw	r22, r24
    4044:	cd 01       	movw	r24, r26
    4046:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    404a:	dc 01       	movw	r26, r24
    404c:	cb 01       	movw	r24, r22
    404e:	9e 83       	std	Y+6, r25	; 0x06
    4050:	8d 83       	std	Y+5, r24	; 0x05
    4052:	0f c0       	rjmp	.+30     	; 0x4072 <main+0x23c>
    4054:	88 ec       	ldi	r24, 0xC8	; 200
    4056:	90 e0       	ldi	r25, 0x00	; 0
    4058:	9c 83       	std	Y+4, r25	; 0x04
    405a:	8b 83       	std	Y+3, r24	; 0x03
    405c:	8b 81       	ldd	r24, Y+3	; 0x03
    405e:	9c 81       	ldd	r25, Y+4	; 0x04
    4060:	01 97       	sbiw	r24, 0x01	; 1
    4062:	f1 f7       	brne	.-4      	; 0x4060 <main+0x22a>
    4064:	9c 83       	std	Y+4, r25	; 0x04
    4066:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4068:	8d 81       	ldd	r24, Y+5	; 0x05
    406a:	9e 81       	ldd	r25, Y+6	; 0x06
    406c:	01 97       	sbiw	r24, 0x01	; 1
    406e:	9e 83       	std	Y+6, r25	; 0x06
    4070:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4072:	8d 81       	ldd	r24, Y+5	; 0x05
    4074:	9e 81       	ldd	r25, Y+6	; 0x06
    4076:	00 97       	sbiw	r24, 0x00	; 0
    4078:	69 f7       	brne	.-38     	; 0x4054 <main+0x21e>
    407a:	44 cf       	rjmp	.-376    	; 0x3f04 <main+0xce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    407c:	6f 81       	ldd	r22, Y+7	; 0x07
    407e:	78 85       	ldd	r23, Y+8	; 0x08
    4080:	89 85       	ldd	r24, Y+9	; 0x09
    4082:	9a 85       	ldd	r25, Y+10	; 0x0a
    4084:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4088:	dc 01       	movw	r26, r24
    408a:	cb 01       	movw	r24, r22
    408c:	9e 83       	std	Y+6, r25	; 0x06
    408e:	8d 83       	std	Y+5, r24	; 0x05
    4090:	8d 81       	ldd	r24, Y+5	; 0x05
    4092:	9e 81       	ldd	r25, Y+6	; 0x06
    4094:	9a 83       	std	Y+2, r25	; 0x02
    4096:	89 83       	std	Y+1, r24	; 0x01
    4098:	89 81       	ldd	r24, Y+1	; 0x01
    409a:	9a 81       	ldd	r25, Y+2	; 0x02
    409c:	01 97       	sbiw	r24, 0x01	; 1
    409e:	f1 f7       	brne	.-4      	; 0x409c <main+0x266>
    40a0:	9a 83       	std	Y+2, r25	; 0x02
    40a2:	89 83       	std	Y+1, r24	; 0x01
    40a4:	2f cf       	rjmp	.-418    	; 0x3f04 <main+0xce>

000040a6 <__udivmodsi4>:
    40a6:	a1 e2       	ldi	r26, 0x21	; 33
    40a8:	1a 2e       	mov	r1, r26
    40aa:	aa 1b       	sub	r26, r26
    40ac:	bb 1b       	sub	r27, r27
    40ae:	fd 01       	movw	r30, r26
    40b0:	0d c0       	rjmp	.+26     	; 0x40cc <__udivmodsi4_ep>

000040b2 <__udivmodsi4_loop>:
    40b2:	aa 1f       	adc	r26, r26
    40b4:	bb 1f       	adc	r27, r27
    40b6:	ee 1f       	adc	r30, r30
    40b8:	ff 1f       	adc	r31, r31
    40ba:	a2 17       	cp	r26, r18
    40bc:	b3 07       	cpc	r27, r19
    40be:	e4 07       	cpc	r30, r20
    40c0:	f5 07       	cpc	r31, r21
    40c2:	20 f0       	brcs	.+8      	; 0x40cc <__udivmodsi4_ep>
    40c4:	a2 1b       	sub	r26, r18
    40c6:	b3 0b       	sbc	r27, r19
    40c8:	e4 0b       	sbc	r30, r20
    40ca:	f5 0b       	sbc	r31, r21

000040cc <__udivmodsi4_ep>:
    40cc:	66 1f       	adc	r22, r22
    40ce:	77 1f       	adc	r23, r23
    40d0:	88 1f       	adc	r24, r24
    40d2:	99 1f       	adc	r25, r25
    40d4:	1a 94       	dec	r1
    40d6:	69 f7       	brne	.-38     	; 0x40b2 <__udivmodsi4_loop>
    40d8:	60 95       	com	r22
    40da:	70 95       	com	r23
    40dc:	80 95       	com	r24
    40de:	90 95       	com	r25
    40e0:	9b 01       	movw	r18, r22
    40e2:	ac 01       	movw	r20, r24
    40e4:	bd 01       	movw	r22, r26
    40e6:	cf 01       	movw	r24, r30
    40e8:	08 95       	ret

000040ea <__divmodsi4>:
    40ea:	97 fb       	bst	r25, 7
    40ec:	09 2e       	mov	r0, r25
    40ee:	05 26       	eor	r0, r21
    40f0:	0e d0       	rcall	.+28     	; 0x410e <__divmodsi4_neg1>
    40f2:	57 fd       	sbrc	r21, 7
    40f4:	04 d0       	rcall	.+8      	; 0x40fe <__divmodsi4_neg2>
    40f6:	d7 df       	rcall	.-82     	; 0x40a6 <__udivmodsi4>
    40f8:	0a d0       	rcall	.+20     	; 0x410e <__divmodsi4_neg1>
    40fa:	00 1c       	adc	r0, r0
    40fc:	38 f4       	brcc	.+14     	; 0x410c <__divmodsi4_exit>

000040fe <__divmodsi4_neg2>:
    40fe:	50 95       	com	r21
    4100:	40 95       	com	r20
    4102:	30 95       	com	r19
    4104:	21 95       	neg	r18
    4106:	3f 4f       	sbci	r19, 0xFF	; 255
    4108:	4f 4f       	sbci	r20, 0xFF	; 255
    410a:	5f 4f       	sbci	r21, 0xFF	; 255

0000410c <__divmodsi4_exit>:
    410c:	08 95       	ret

0000410e <__divmodsi4_neg1>:
    410e:	f6 f7       	brtc	.-4      	; 0x410c <__divmodsi4_exit>
    4110:	90 95       	com	r25
    4112:	80 95       	com	r24
    4114:	70 95       	com	r23
    4116:	61 95       	neg	r22
    4118:	7f 4f       	sbci	r23, 0xFF	; 255
    411a:	8f 4f       	sbci	r24, 0xFF	; 255
    411c:	9f 4f       	sbci	r25, 0xFF	; 255
    411e:	08 95       	ret

00004120 <__prologue_saves__>:
    4120:	2f 92       	push	r2
    4122:	3f 92       	push	r3
    4124:	4f 92       	push	r4
    4126:	5f 92       	push	r5
    4128:	6f 92       	push	r6
    412a:	7f 92       	push	r7
    412c:	8f 92       	push	r8
    412e:	9f 92       	push	r9
    4130:	af 92       	push	r10
    4132:	bf 92       	push	r11
    4134:	cf 92       	push	r12
    4136:	df 92       	push	r13
    4138:	ef 92       	push	r14
    413a:	ff 92       	push	r15
    413c:	0f 93       	push	r16
    413e:	1f 93       	push	r17
    4140:	cf 93       	push	r28
    4142:	df 93       	push	r29
    4144:	cd b7       	in	r28, 0x3d	; 61
    4146:	de b7       	in	r29, 0x3e	; 62
    4148:	ca 1b       	sub	r28, r26
    414a:	db 0b       	sbc	r29, r27
    414c:	0f b6       	in	r0, 0x3f	; 63
    414e:	f8 94       	cli
    4150:	de bf       	out	0x3e, r29	; 62
    4152:	0f be       	out	0x3f, r0	; 63
    4154:	cd bf       	out	0x3d, r28	; 61
    4156:	09 94       	ijmp

00004158 <__epilogue_restores__>:
    4158:	2a 88       	ldd	r2, Y+18	; 0x12
    415a:	39 88       	ldd	r3, Y+17	; 0x11
    415c:	48 88       	ldd	r4, Y+16	; 0x10
    415e:	5f 84       	ldd	r5, Y+15	; 0x0f
    4160:	6e 84       	ldd	r6, Y+14	; 0x0e
    4162:	7d 84       	ldd	r7, Y+13	; 0x0d
    4164:	8c 84       	ldd	r8, Y+12	; 0x0c
    4166:	9b 84       	ldd	r9, Y+11	; 0x0b
    4168:	aa 84       	ldd	r10, Y+10	; 0x0a
    416a:	b9 84       	ldd	r11, Y+9	; 0x09
    416c:	c8 84       	ldd	r12, Y+8	; 0x08
    416e:	df 80       	ldd	r13, Y+7	; 0x07
    4170:	ee 80       	ldd	r14, Y+6	; 0x06
    4172:	fd 80       	ldd	r15, Y+5	; 0x05
    4174:	0c 81       	ldd	r16, Y+4	; 0x04
    4176:	1b 81       	ldd	r17, Y+3	; 0x03
    4178:	aa 81       	ldd	r26, Y+2	; 0x02
    417a:	b9 81       	ldd	r27, Y+1	; 0x01
    417c:	ce 0f       	add	r28, r30
    417e:	d1 1d       	adc	r29, r1
    4180:	0f b6       	in	r0, 0x3f	; 63
    4182:	f8 94       	cli
    4184:	de bf       	out	0x3e, r29	; 62
    4186:	0f be       	out	0x3f, r0	; 63
    4188:	cd bf       	out	0x3d, r28	; 61
    418a:	ed 01       	movw	r28, r26
    418c:	08 95       	ret

0000418e <_exit>:
    418e:	f8 94       	cli

00004190 <__stop_program>:
    4190:	ff cf       	rjmp	.-2      	; 0x4190 <__stop_program>
